Santiagos-MacBook-Pro:prototype-20121204 sescobar$ examples/Needham_Schroeder_Lowe_Modified-command
Wed Dec  5 02:02:08 CET 2012
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude alpha96b built: Nov  9 2012 18:20:01
	    Copyright 1997-2011 SRI International
		   Wed Dec  5 02:02:08 2012
Maude> 
	    Maude-NPA Version:  Dec 4 2012 with direct composition
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           for getting the unification algorithm
 red genGrammars .            for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern X
 red summary(X,Y).            for summary of analysis steps
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 76460922 in 104799ms cpu (105684ms real) (729593 rewrites/second)
result GrammarList: (
grl #0:Msg inL => pk(i, #0:Msg) inL . ; 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:NNSet inL => (#0:NNSet * #1:NNSet) inL . ; 
grl #0:Msg notInI, #0:Msg notLeq #1:NNSet => pk(#2:Name, n(#2:Name, #3:Fresh) ; #0:Msg) inL . ; 
grl #0:Msg notInI, #0:Msg notLeq #1:NNSet => (n(#2:Name, #3:Fresh) ; #0:Msg) inL . ; 
grl #0:NNSet notInI, #0:NNSet notLeq #1:NNSet => (#0:NNSet * #2:NNSet) inL . ; 
grl (#0:NNSet * #1:NNSet) notInI, (#0:NNSet notLeq #2:Name), (#0:NNSet notLeq n(#3:Name, #4:Fresh)), (#0:NNSet * #1:NNSet) notLeq #5:NNSet => #0:NNSet inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:NNSet * #2:NNSet) inL .,none,
grl empty => (#1:NNSet,#2:NNSet) inL .,none,
grl empty => (#1:NNSet,#2:NNSet) inL .} usingGrammar 
grl empty => (#1:NNSet * #2:NNSet) inL .)
| (
grl #0:Msg inL => pk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:NNSet inL => (#0:NNSet * #1:NNSet) inL . ; 
grl #0:Msg notInI, #0:Msg notLeq n(#1:Name, #2:Fresh) => (#0:Msg ; #3:Msg) inL .)
| (
grl #0:Msg inL => pk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:NNSet inL => (#0:NNSet * #1:NNSet) inL . ; 
grl #0:Msg notInI, #0:Msg notLeq #1:Name * n(#1:Name, #2:Fresh) => (#3:Msg ; #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #1:NNSet => n(#0:Name, #1:Fresh) inL . inGrammar 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #4:Msg inL => pk(#3:Name, #4:Msg) inL . ; 
grl #12:NNSet inL => pk(#3:Name, n(#3:Name, #4:Fresh) ; i * #12:NNSet) inL . ; 
grl #0:Nonce inL => (#1:NNSet * #0:Nonce) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq #1:NNSet => n(#0:Name, #1:Fresh) inL .)
| (
grl #0:Msg inL => pk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:NNSet inL => (#0:NNSet * #1:NNSet) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq #1:NNSet), (#0:Msg notLeq #2:NNSet ; #3:Name * n(#3:Name, #4:Fresh)), #0:Msg notLeq n(#5:Name, #6:Fresh) ; #5:Name => pk(#7:Name, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => pk(#1:Name, #2:Msg) inL .,none,
grl empty => #2:Msg inL .,none,
grl empty => #2:Msg inL .} usingGrammar 
grl empty => pk(#1:Name, #2:Msg) inL .)
| (
grl #0:Msg inL => pk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:NNSet inL => (#0:NNSet * #1:NNSet) inL . ; 
grl #0:Msg notInI => sk(#1:Name, #0:Msg) inL .)
| 
grl #0:Msg inL => pk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => sk(#1:Name, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:NNSet inL => (#0:NNSet * #1:NNSet) inL . ; 
grl sk(#0:Name, #1:Msg) notLeq sk(i, #2:Msg) => sk(#0:Name, #1:Msg) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3466 in 29ms cpu (32ms real) (116001 rewrites/second)
result IdSystem: < 1 > 
:: r':Fresh ::
[ nil, 
   -(pk(b, XN:NNSet ; a)), 
   +(pk(a, XN:NNSet ; b * n(b, r':Fresh))), 
   -(pk(b, n(b, r':Fresh))) | nil] 
|| 
n(b, r':Fresh) inI
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 1702004 in 2522ms cpu (2537ms real) (674686 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 4977138 in 8247ms cpu (8312ms real) (603455 rewrites/second)
result Summary: States>> 7 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 8228627 in 15041ms cpu (15170ms real) (547069 rewrites/second)
result Summary: States>> 8 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 7875255 in 16395ms cpu (16557ms real) (480325 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 3086536 in 6874ms cpu (6953ms real) (448984 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 637991 in 1122ms cpu (1135ms real) (568577 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 543500 in 848ms cpu (865ms real) (640437 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(8) .
rewrites: 1891153 in 2535ms cpu (2557ms real) (745893 rewrites/second)
result Summary: States>> 4 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(9) .
rewrites: 6555827 in 8192ms cpu (8235ms real) (800200 rewrites/second)
result Summary: States>> 5 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(10) .
rewrites: 4427903 in 6971ms cpu (7023ms real) (635172 rewrites/second)
result Summary: States>> 5 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(11) .
rewrites: 4046307 in 7410ms cpu (7486ms real) (545993 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh))), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
n(b, #0:Fresh) !inI,
pk(b, n(b, #0:Fresh)) inI,
pk(i, n(b, #0:Fresh)) inI
|| 
-(pk(i, n(b, #0:Fresh))), 
+(n(b, #0:Fresh)), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 10 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
n(b, #0:Fresh) !inI,
pk(b, n(b, #0:Fresh)) inI,
(n(b, #0:Fresh) ; #1:Msg) inI
|| 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(b, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
pk(b, n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) inI
|| 
-(n(b, #0:Fresh)), 
+(pk(b, n(b, #0:Fresh))), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
< 1 . (2 [2]) > (
:: nil ::
[ nil | 
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
n(b, #1:Fresh) !inI,
pk(b, n(b, #1:Fresh)) inI,
(#0:NNSet * n(b, #1:Fresh)) inI,
irr(#0:NNSet * n(b, #1:Fresh)),
inst(#0:NNSet)
|| 
-(#0:NNSet), 
-(#0:NNSet * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(pk(b, n(b, #1:Fresh)))
|| 
ghost( #0:NNSet,
   :: nil ::
   [ nil | 
      -(#0:NNSet), 
      -(#0:NNSet * n(b, #1:Fresh)), 
      +(n(b, #1:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(pk(b, #2:NNSet ; a)), 
      +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
      -(pk(b, n(b, #1:Fresh))), nil] ,    
   n(b, #1:Fresh) !inI,
   pk(b, n(b, #1:Fresh)) inI,
   (#0:NNSet * n(b, #1:Fresh)) inI,
   irr(#0:NNSet * n(b, #1:Fresh)),
   inst(#0:NNSet),    
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), 
   -(pk(b, n(b, #1:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 10 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh))), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(i, n(#3:Name, #2:Fresh) ; #3:Name)) | 
   -(pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(b, #0:Fresh))), 
   +(pk(i, n(b, #0:Fresh))), nil] )
|| 
pk(i, n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
pk(b, n(b, #0:Fresh)) inI,
pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(b, #0:Fresh)) inI
|| 
-(pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(b, #0:Fresh))), 
+(pk(i, n(b, #0:Fresh))), 
-(pk(i, n(b, #0:Fresh))), 
+(n(b, #0:Fresh)), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 10 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh) ; #1:Msg)), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
(n(b, #0:Fresh) ; #1:Msg) !inI,
n(b, #0:Fresh) !inI,
pk(b, n(b, #0:Fresh)) inI,
pk(i, n(b, #0:Fresh) ; #1:Msg) inI
|| 
-(pk(i, n(b, #0:Fresh) ; #1:Msg)), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh))), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(b, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
pk(b, n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
pk(i, n(b, #0:Fresh)) inI
|| 
-(pk(i, n(b, #0:Fresh))), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(b, n(b, #0:Fresh))), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . 7 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(b, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
pk(b, n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
(n(b, #0:Fresh) ; #1:Msg) inI
|| 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(b, n(b, #0:Fresh))), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) > (
:: nil ::
[ nil | 
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(b, n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(#0:NNSet * n(b, #1:Fresh)) inI,
irr(#0:NNSet * n(b, #1:Fresh)),
inst(#0:NNSet)
|| 
-(#0:NNSet), 
-(#0:NNSet * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
ghost( #0:NNSet,
   :: nil ::
   [ nil | 
      -(#0:NNSet), 
      -(#0:NNSet * n(b, #1:Fresh)), 
      +(n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      +(pk(b, n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(pk(b, #2:NNSet ; a)), 
      +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
      -(pk(b, n(b, #1:Fresh))), nil] ,    
   pk(b, n(b, #1:Fresh)) !inI,
   n(b, #1:Fresh) !inI,
   (#0:NNSet * n(b, #1:Fresh)) inI,
   irr(#0:NNSet * n(b, #1:Fresh)),
   inst(#0:NNSet),    
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . (2 [2]) . 4 > (
:: nil ::
[ nil | 
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #0:NNSet * n(b, #1:Fresh))), 
   +(#0:NNSet * n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
n(b, #1:Fresh) !inI,
(#0:NNSet * n(b, #1:Fresh)) !inI,
pk(b, n(b, #1:Fresh)) inI,
pk(i, #0:NNSet * n(b, #1:Fresh)) inI,
irr(#0:NNSet * n(b, #1:Fresh)),
inst(#0:NNSet)
|| 
-(pk(i, #0:NNSet * n(b, #1:Fresh))), 
+(#0:NNSet * n(b, #1:Fresh)), 
-(#0:NNSet), 
-(#0:NNSet * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(pk(b, n(b, #1:Fresh)))
|| 
ghost( #0:NNSet,
   :: nil ::
   [ nil | 
      -(#0:NNSet), 
      -(#0:NNSet * n(b, #1:Fresh)), 
      +(n(b, #1:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(pk(b, #2:NNSet ; a)), 
      +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
      -(pk(b, n(b, #1:Fresh))), nil] ,    
   n(b, #1:Fresh) !inI,
   pk(b, n(b, #1:Fresh)) inI,
   (#0:NNSet * n(b, #1:Fresh)) inI,
   irr(#0:NNSet * n(b, #1:Fresh)),
   inst(#0:NNSet),    
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), 
   -(pk(b, n(b, #1:Fresh))),    
   nil )
|| 
nil)
< 1 . (2 [2]) . 11 > (
:: nil ::
[ nil | 
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
   +(#1:NNSet * n(b, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(pk(b, #3:NNSet ; a)), 
   +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
n(b, #2:Fresh) !inI,
(#1:NNSet * n(b, #2:Fresh)) !inI,
pk(b, n(b, #2:Fresh)) inI,
(#0:Msg ; #1:NNSet * n(b, #2:Fresh)) inI,
irr(#1:NNSet * n(b, #2:Fresh)),
inst(#1:NNSet)
|| 
-(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
+(#1:NNSet * n(b, #2:Fresh)), 
-(#1:NNSet), 
-(#1:NNSet * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(pk(b, n(b, #2:Fresh)))
|| 
ghost( #1:NNSet,
   :: nil ::
   [ nil | 
      -(#1:NNSet), 
      -(#1:NNSet * n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(pk(b, #3:NNSet ; a)), 
      +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
      -(pk(b, n(b, #2:Fresh))), nil] ,    
   n(b, #2:Fresh) !inI,
   pk(b, n(b, #2:Fresh)) inI,
   (#1:NNSet * n(b, #2:Fresh)) inI,
   irr(#1:NNSet * n(b, #2:Fresh)),
   inst(#1:NNSet),    
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(pk(b, n(b, #2:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 10 . 3 . 11 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
   +(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(#3:Name, n(b, #0:Fresh) ; i)), 
   +(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), nil] )
|| 
pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)) !inI,
(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)) !inI,
n(b, #0:Fresh) !inI,
pk(b, n(b, #0:Fresh)) inI,
pk(#3:Name, n(b, #0:Fresh) ; i) inI
|| 
-(pk(#3:Name, n(b, #0:Fresh) ; i)), 
+(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
-(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
+(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
-(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
+(n(b, #0:Fresh)), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . 4 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh))), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(b, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(i, n(#3:Name, #2:Fresh) ; #3:Name)) | 
   -(pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(b, #0:Fresh))), 
   +(pk(i, n(b, #0:Fresh))), nil] )
|| 
pk(b, n(b, #0:Fresh)) !inI,
pk(i, n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(b, #0:Fresh)) inI
|| 
-(pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(b, #0:Fresh))), 
+(pk(i, n(b, #0:Fresh))), 
-(pk(i, n(b, #0:Fresh))), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(b, n(b, #0:Fresh))), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . 7 . 2 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh) ; #1:Msg)), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(b, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil] )
|| 
pk(b, n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #1:Msg) !inI,
n(b, #0:Fresh) !inI,
pk(i, n(b, #0:Fresh) ; #1:Msg) inI
|| 
-(pk(i, n(b, #0:Fresh) ; #1:Msg)), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(b, n(b, #0:Fresh))), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 > (
:: nil ::
[ nil | 
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #0:NNSet * n(b, #1:Fresh))), 
   +(#0:NNSet * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(b, #2:NNSet ; a)), 
   +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(b, n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(#0:NNSet * n(b, #1:Fresh)) !inI,
pk(i, #0:NNSet * n(b, #1:Fresh)) inI,
irr(#0:NNSet * n(b, #1:Fresh)),
inst(#0:NNSet)
|| 
-(pk(i, #0:NNSet * n(b, #1:Fresh))), 
+(#0:NNSet * n(b, #1:Fresh)), 
-(#0:NNSet), 
-(#0:NNSet * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
ghost( #0:NNSet,
   :: nil ::
   [ nil | 
      -(#0:NNSet), 
      -(#0:NNSet * n(b, #1:Fresh)), 
      +(n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      +(pk(b, n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(pk(b, #2:NNSet ; a)), 
      +(pk(a, #2:NNSet ; b * n(b, #1:Fresh))) | 
      -(pk(b, n(b, #1:Fresh))), nil] ,    
   pk(b, n(b, #1:Fresh)) !inI,
   n(b, #1:Fresh) !inI,
   (#0:NNSet * n(b, #1:Fresh)) inI,
   irr(#0:NNSet * n(b, #1:Fresh)),
   inst(#0:NNSet),    
   -(#0:NNSet), 
   -(#0:NNSet * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . 11 . (3 [2]) . 11 > (
:: nil ::
[ nil | 
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
   +(#1:NNSet * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(pk(b, #3:NNSet ; a)), 
   +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
pk(b, n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
(#1:NNSet * n(b, #2:Fresh)) !inI,
(#0:Msg ; #1:NNSet * n(b, #2:Fresh)) inI,
irr(#1:NNSet * n(b, #2:Fresh)),
inst(#1:NNSet)
|| 
-(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
+(#1:NNSet * n(b, #2:Fresh)), 
-(#1:NNSet), 
-(#1:NNSet * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
+(pk(b, n(b, #2:Fresh))), 
-(pk(b, n(b, #2:Fresh)))
|| 
ghost( #1:NNSet,
   :: nil ::
   [ nil | 
      -(#1:NNSet), 
      -(#1:NNSet * n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      +(pk(b, n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(pk(b, #3:NNSet ; a)), 
      +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
      -(pk(b, n(b, #2:Fresh))), nil] ,    
   pk(b, n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) !inI,
   (#1:NNSet * n(b, #2:Fresh)) inI,
   irr(#1:NNSet * n(b, #2:Fresh)),
   inst(#1:NNSet),    
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . (2 [2]) . 4 . 10 > (
:: nil ::
[ nil | 
   -(#2:NNSet), 
   -(#2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:NNSet * n(b, #3:Fresh))), 
   +(#2:NNSet * n(b, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(#1:Name, #0:Fresh) ; #1:Name)) | 
   -(pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(b, #3:Fresh))), 
   +(pk(i, #2:NNSet * n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(pk(b, #4:NNSet ; a)), 
   +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
   -(pk(b, n(b, #3:Fresh))), nil] )
|| 
pk(i, #2:NNSet * n(b, #3:Fresh)) !inI,
n(b, #3:Fresh) !inI,
(#2:NNSet * n(b, #3:Fresh)) !inI,
pk(b, n(b, #3:Fresh)) inI,
pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(b, #3:Fresh)) inI,
irr(#2:NNSet * n(b, #3:Fresh)),
inst(#2:NNSet)
|| 
-(pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(b, #3:Fresh))), 
+(pk(i, #2:NNSet * n(b, #3:Fresh))), 
-(pk(i, #2:NNSet * n(b, #3:Fresh))), 
+(#2:NNSet * n(b, #3:Fresh)), 
-(#2:NNSet), 
-(#2:NNSet * n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(pk(b, n(b, #3:Fresh)))
|| 
ghost( #2:NNSet,
   :: nil ::
   [ nil | 
      -(#2:NNSet), 
      -(#2:NNSet * n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(pk(b, #4:NNSet ; a)), 
      +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
      -(pk(b, n(b, #3:Fresh))), nil] ,    
   n(b, #3:Fresh) !inI,
   pk(b, n(b, #3:Fresh)) inI,
   (#2:NNSet * n(b, #3:Fresh)) inI,
   irr(#2:NNSet * n(b, #3:Fresh)),
   inst(#2:NNSet),    
   -(#2:NNSet), 
   -(#2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(pk(b, n(b, #3:Fresh))),    
   nil )
|| 
nil)
(< 1 . (2 [2]) . 4 . 17 > (
:: nil ::
[ nil | 
   -(pk(i, i * #2:NNSet * n(b, #3:Fresh))), 
   +(i * #2:NNSet * n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(i * #2:NNSet), 
   -(i * #2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(#1:Name, #0:Fresh) ; #1:Name)) | 
   -(pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(b, #3:Fresh))), 
   +(pk(i, i * #2:NNSet * n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(pk(b, #4:NNSet ; a)), 
   +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
   -(pk(b, n(b, #3:Fresh))), nil] )
|| 
pk(i, i * #2:NNSet * n(b, #3:Fresh)) !inI,
n(b, #3:Fresh) !inI,
(i * #2:NNSet * n(b, #3:Fresh)) !inI,
pk(b, n(b, #3:Fresh)) inI,
pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(b, #3:Fresh)) inI,
irr(i * #2:NNSet * n(b, #3:Fresh)),
inst(#2:NNSet)
|| 
-(pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(b, #3:Fresh))), 
+(pk(i, i * #2:NNSet * n(b, #3:Fresh))), 
-(pk(i, i * #2:NNSet * n(b, #3:Fresh))), 
+(i * #2:NNSet * n(b, #3:Fresh)), 
-(i * #2:NNSet), 
-(i * #2:NNSet * n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(pk(b, n(b, #3:Fresh)))
|| 
ghost( i * #2:NNSet,
   :: nil ::
   [ nil | 
      -(i * #2:NNSet), 
      -(i * #2:NNSet * n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(pk(b, #4:NNSet ; a)), 
      +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
      -(pk(b, n(b, #3:Fresh))), nil] ,    
   n(b, #3:Fresh) !inI,
   pk(b, n(b, #3:Fresh)) inI,
   (i * #2:NNSet * n(b, #3:Fresh)) inI,
   irr(i * #2:NNSet * n(b, #3:Fresh)),
   inst(i * #2:NNSet),    
   -(i * #2:NNSet), 
   -(i * #2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(pk(b, n(b, #3:Fresh))),    
   nil )
|| 
nil)
< 1 . (2 [2]) . 11 . 3 > (
:: nil ::
[ nil | 
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #0:Msg ; #1:NNSet * n(b, #2:Fresh))), 
   +(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
   +(#1:NNSet * n(b, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(pk(b, #3:NNSet ; a)), 
   +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
(#0:Msg ; #1:NNSet * n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
(#1:NNSet * n(b, #2:Fresh)) !inI,
pk(b, n(b, #2:Fresh)) inI,
pk(i, #0:Msg ; #1:NNSet * n(b, #2:Fresh)) inI,
irr(#1:NNSet * n(b, #2:Fresh)),
inst(#1:NNSet)
|| 
-(pk(i, #0:Msg ; #1:NNSet * n(b, #2:Fresh))), 
+(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
-(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
+(#1:NNSet * n(b, #2:Fresh)), 
-(#1:NNSet), 
-(#1:NNSet * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(pk(b, n(b, #2:Fresh)))
|| 
ghost( #1:NNSet,
   :: nil ::
   [ nil | 
      -(#1:NNSet), 
      -(#1:NNSet * n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(pk(b, #3:NNSet ; a)), 
      +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
      -(pk(b, n(b, #2:Fresh))), nil] ,    
   n(b, #2:Fresh) !inI,
   pk(b, n(b, #2:Fresh)) inI,
   (#1:NNSet * n(b, #2:Fresh)) inI,
   irr(#1:NNSet * n(b, #2:Fresh)),
   inst(#1:NNSet),    
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(pk(b, n(b, #2:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 11 . 7 . 2 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
   +(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(b, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(b, #1:NNSet ; a)), 
   +(pk(a, #1:NNSet ; b * n(b, #0:Fresh))) | 
   -(pk(b, n(b, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(#3:Name, n(b, #0:Fresh) ; i)), 
   +(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), nil] )
|| 
pk(b, n(b, #0:Fresh)) !inI,
pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)) !inI,
(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)) !inI,
n(b, #0:Fresh) !inI,
pk(#3:Name, n(b, #0:Fresh) ; i) inI
|| 
-(pk(#3:Name, n(b, #0:Fresh) ; i)), 
+(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
-(pk(i, n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
+(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
-(n(b, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(b, n(b, #0:Fresh))), 
-(pk(b, n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 8 > (
:: nil ::
[ nil | 
   -(#2:NNSet), 
   -(#2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:NNSet * n(b, #3:Fresh))), 
   +(#2:NNSet * n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(#1:Name, #0:Fresh) ; #1:Name)) | 
   -(pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(b, #3:Fresh))), 
   +(pk(i, #2:NNSet * n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(pk(b, #4:NNSet ; a)), 
   +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
   -(pk(b, n(b, #3:Fresh))), nil] )
|| 
pk(b, n(b, #3:Fresh)) !inI,
pk(i, #2:NNSet * n(b, #3:Fresh)) !inI,
n(b, #3:Fresh) !inI,
(#2:NNSet * n(b, #3:Fresh)) !inI,
pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(b, #3:Fresh)) inI,
irr(#2:NNSet * n(b, #3:Fresh)),
inst(#2:NNSet)
|| 
-(pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(b, #3:Fresh))), 
+(pk(i, #2:NNSet * n(b, #3:Fresh))), 
-(pk(i, #2:NNSet * n(b, #3:Fresh))), 
+(#2:NNSet * n(b, #3:Fresh)), 
-(#2:NNSet), 
-(#2:NNSet * n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(n(b, #3:Fresh)), 
+(pk(b, n(b, #3:Fresh))), 
-(pk(b, n(b, #3:Fresh)))
|| 
ghost( #2:NNSet,
   :: nil ::
   [ nil | 
      -(#2:NNSet), 
      -(#2:NNSet * n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      +(pk(b, n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(pk(b, #4:NNSet ; a)), 
      +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
      -(pk(b, n(b, #3:Fresh))), nil] ,    
   pk(b, n(b, #3:Fresh)) !inI,
   n(b, #3:Fresh) !inI,
   (#2:NNSet * n(b, #3:Fresh)) inI,
   irr(#2:NNSet * n(b, #3:Fresh)),
   inst(#2:NNSet),    
   -(#2:NNSet), 
   -(#2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), 
   -(pk(b, n(b, #3:Fresh))),    
   nil )
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 > (
:: nil ::
[ nil | 
   -(pk(i, i * #2:NNSet * n(b, #3:Fresh))), 
   +(i * #2:NNSet * n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(i * #2:NNSet), 
   -(i * #2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(#1:Name, #0:Fresh) ; #1:Name)) | 
   -(pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(b, #3:Fresh))), 
   +(pk(i, i * #2:NNSet * n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(pk(b, #4:NNSet ; a)), 
   +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
   -(pk(b, n(b, #3:Fresh))), nil] )
|| 
pk(b, n(b, #3:Fresh)) !inI,
pk(i, i * #2:NNSet * n(b, #3:Fresh)) !inI,
n(b, #3:Fresh) !inI,
(i * #2:NNSet * n(b, #3:Fresh)) !inI,
pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(b, #3:Fresh)) inI,
irr(i * #2:NNSet * n(b, #3:Fresh)),
inst(#2:NNSet)
|| 
-(pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(b, #3:Fresh))), 
+(pk(i, i * #2:NNSet * n(b, #3:Fresh))), 
-(pk(i, i * #2:NNSet * n(b, #3:Fresh))), 
+(i * #2:NNSet * n(b, #3:Fresh)), 
-(i * #2:NNSet), 
-(i * #2:NNSet * n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(n(b, #3:Fresh)), 
+(pk(b, n(b, #3:Fresh))), 
-(pk(b, n(b, #3:Fresh)))
|| 
ghost( i * #2:NNSet,
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      +(pk(b, n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(i * #2:NNSet), 
      -(i * #2:NNSet * n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(pk(b, #4:NNSet ; a)), 
      +(pk(a, #4:NNSet ; b * n(b, #3:Fresh))) | 
      -(pk(b, n(b, #3:Fresh))), nil] ,    
   pk(b, n(b, #3:Fresh)) !inI,
   n(b, #3:Fresh) !inI,
   (i * #2:NNSet * n(b, #3:Fresh)) inI,
   irr(i * #2:NNSet * n(b, #3:Fresh)),
   inst(i * #2:NNSet),    
   -(i * #2:NNSet), 
   -(i * #2:NNSet * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), 
   -(pk(b, n(b, #3:Fresh))),    
   nil )
|| 
nil)
< 1 . 11 . (3 [2]) . 11 . 3 > (
:: nil ::
[ nil | 
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #0:Msg ; #1:NNSet * n(b, #2:Fresh))), 
   +(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
   +(#1:NNSet * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(pk(b, #3:NNSet ; a)), 
   +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
pk(b, n(b, #2:Fresh)) !inI,
(#0:Msg ; #1:NNSet * n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
(#1:NNSet * n(b, #2:Fresh)) !inI,
pk(i, #0:Msg ; #1:NNSet * n(b, #2:Fresh)) inI,
irr(#1:NNSet * n(b, #2:Fresh)),
inst(#1:NNSet)
|| 
-(pk(i, #0:Msg ; #1:NNSet * n(b, #2:Fresh))), 
+(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
-(#0:Msg ; #1:NNSet * n(b, #2:Fresh)), 
+(#1:NNSet * n(b, #2:Fresh)), 
-(#1:NNSet), 
-(#1:NNSet * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
+(pk(b, n(b, #2:Fresh))), 
-(pk(b, n(b, #2:Fresh)))
|| 
ghost( #1:NNSet,
   :: nil ::
   [ nil | 
      -(#1:NNSet), 
      -(#1:NNSet * n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      +(pk(b, n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(pk(b, #3:NNSet ; a)), 
      +(pk(a, #3:NNSet ; b * n(b, #2:Fresh))) | 
      -(pk(b, n(b, #2:Fresh))), nil] ,    
   pk(b, n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) !inI,
   (#1:NNSet * n(b, #2:Fresh)) inI,
   irr(#1:NNSet * n(b, #2:Fresh)),
   inst(#1:NNSet),    
   -(#1:NNSet), 
   -(#1:NNSet * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 11 . (3 [2]) . 4 . 10 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) inI,
irr(b * i * n(b, #1:Fresh))
|| 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) inI,
irr(b * i * n(b, #1:Fresh))
|| 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 2 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; a)), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; a) inI,
irr(b * i * n(b, #1:Fresh))
|| 
-(pk(i, n(a, #0:Fresh) ; a)), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
n(a, #0:Fresh) inI,
irr(b * i * n(b, #1:Fresh))
|| 
-(n(a, #0:Fresh)), 
-(a), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(8) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 2 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; a)), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(i, n(a, #0:Fresh) ; a)), 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; a) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
irr(b * i * n(b, #1:Fresh))
|| 
+(pk(i, n(a, #0:Fresh) ; a)), 
-(pk(i, n(a, #0:Fresh) ; a)), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh))), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh)) inI,
irr(b * i * n(b, #1:Fresh))
|| 
-(pk(i, n(a, #0:Fresh))), 
+(n(a, #0:Fresh)), 
-(n(a, #0:Fresh)), 
-(a), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . 8 > (
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #2:Fresh))), 
   +(b * i * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #1:Msg), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
   +(pk(i, b * i * n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #2:Fresh)) !inI,
pk(i, b * i * n(b, #2:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(a, #0:Fresh) !inI,
n(b, #2:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #2:Fresh)) !inI,
(n(a, #0:Fresh) ; #1:Msg) inI,
irr(b * i * n(b, #2:Fresh))
|| 
-(n(a, #0:Fresh) ; #1:Msg), 
+(n(a, #0:Fresh)), 
-(n(a, #0:Fresh)), 
-(a), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
+(pk(i, b * i * n(b, #2:Fresh))), 
-(pk(i, b * i * n(b, #2:Fresh))), 
+(b * i * n(b, #2:Fresh)), 
-(b * i), 
-(b * i * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
+(pk(b, n(b, #2:Fresh))), 
-(pk(b, n(b, #2:Fresh)))
|| 
nil
|| 
nil)
< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . (3 [2]) > (
:: nil ::
[ nil | 
   -(#0:NNSet), 
   -(#0:NNSet * n(a, #1:Fresh)), 
   +(n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #2:Fresh))), 
   +(b * i * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #1:Fresh) ; a), 
   +(pk(b, n(a, #1:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #1:Fresh)), 
   -(a), 
   +(n(a, #1:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(i, n(a, #1:Fresh) ; a)) | 
   -(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   +(pk(i, b * i * n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b, n(a, #1:Fresh) ; a)), 
   +(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh)) !inI,
pk(b, n(a, #1:Fresh) ; a) !inI,
pk(b, n(b, #2:Fresh)) !inI,
pk(i, b * i * n(b, #2:Fresh)) !inI,
(n(a, #1:Fresh) ; a) !inI,
n(a, #1:Fresh) !inI,
n(b, #2:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #2:Fresh)) !inI,
(#0:NNSet * n(a, #1:Fresh)) inI,
irr(#0:NNSet * n(a, #1:Fresh)),
irr(b * i * n(b, #2:Fresh)),
inst(#0:NNSet)
|| 
-(#0:NNSet), 
-(#0:NNSet * n(a, #1:Fresh)), 
+(n(a, #1:Fresh)), 
-(n(a, #1:Fresh)), 
-(a), 
+(n(a, #1:Fresh) ; a), 
-(n(a, #1:Fresh) ; a), 
+(pk(b, n(a, #1:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #1:Fresh) ; a)), 
+(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
-(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
+(pk(i, b * i * n(b, #2:Fresh))), 
-(pk(i, b * i * n(b, #2:Fresh))), 
+(b * i * n(b, #2:Fresh)), 
-(b * i), 
-(b * i * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
+(pk(b, n(b, #2:Fresh))), 
-(pk(b, n(b, #2:Fresh)))
|| 
ghost( #0:NNSet,
   :: nil ::
   [ nil | 
      -(#0:NNSet), 
      -(#0:NNSet * n(a, #1:Fresh)), 
      +(n(a, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pk(i, b * i * n(b, #2:Fresh))), 
      +(b * i * n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #1:Fresh) ; a), 
      +(pk(b, n(a, #1:Fresh) ; a)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #1:Fresh)), 
      -(a), 
      +(n(a, #1:Fresh) ; a), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      +(pk(b, n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(b * i), 
      -(b * i * n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(pk(i, n(a, #1:Fresh) ; a)) | 
      -(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
      +(pk(i, b * i * n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil | 
      -(pk(b, n(a, #1:Fresh) ; a)), 
      +(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
      -(pk(b, n(b, #2:Fresh))), nil] ,    
   pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh)) !inI,
   pk(b, n(a, #1:Fresh) ; a) !inI,
   pk(b, n(b, #2:Fresh)) !inI,
   pk(i, b * i * n(b, #2:Fresh)) !inI,
   (n(a, #1:Fresh) ; a) !inI,
   n(a, #1:Fresh) !inI,
   n(b, #2:Fresh) !inI,
   (b * i) !inI,
   (b * i * n(b, #2:Fresh)) !inI,
   (#0:NNSet * n(a, #1:Fresh)) inI,
   irr(#0:NNSet * n(a, #1:Fresh)),
   irr(b * i * n(b, #2:Fresh)),
   inst(#0:NNSet),    
   -(#0:NNSet), 
   -(#0:NNSet * n(a, #1:Fresh)), 
   +(n(a, #1:Fresh)), 
   -(n(a, #1:Fresh)), 
   -(a), 
   +(n(a, #1:Fresh) ; a), 
   -(n(a, #1:Fresh) ; a), 
   +(pk(b, n(a, #1:Fresh) ; a)), 
   generatedByIntruder(b * i), 
   -(pk(b, n(a, #1:Fresh) ; a)), 
   +(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   -(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   +(pk(i, b * i * n(b, #2:Fresh))), 
   -(pk(i, b * i * n(b, #2:Fresh))), 
   +(b * i * n(b, #2:Fresh)), 
   -(b * i), 
   -(b * i * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(9) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 2 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; a)), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(i, n(a, #0:Fresh) ; a)), 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; a) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
irr(b * i * n(b, #1:Fresh))
|| 
+(pk(i, n(a, #0:Fresh) ; a)), 
-(pk(i, n(a, #0:Fresh) ; a)), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . 4 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh))), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(i, n(#3:Name, #2:Fresh) ; #3:Name)) | 
   -(pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(a, #0:Fresh))), 
   +(pk(i, n(a, #0:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(a, #0:Fresh)) inI,
irr(b * i * n(b, #1:Fresh))
|| 
-(pk(#3:Name, n(#3:Name, #2:Fresh) ; i * n(a, #0:Fresh))), 
+(pk(i, n(a, #0:Fresh))), 
-(pk(i, n(a, #0:Fresh))), 
+(n(a, #0:Fresh)), 
-(n(a, #0:Fresh)), 
-(a), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . 8 . 2 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; #1:Msg)), 
   +(n(a, #0:Fresh) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #2:Fresh))), 
   +(b * i * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #1:Msg), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
   +(pk(i, b * i * n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #2:Fresh)) !inI,
pk(i, b * i * n(b, #2:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
(n(a, #0:Fresh) ; #1:Msg) !inI,
n(a, #0:Fresh) !inI,
n(b, #2:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #2:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; #1:Msg) inI,
irr(b * i * n(b, #2:Fresh))
|| 
-(pk(i, n(a, #0:Fresh) ; #1:Msg)), 
+(n(a, #0:Fresh) ; #1:Msg), 
-(n(a, #0:Fresh) ; #1:Msg), 
+(n(a, #0:Fresh)), 
-(n(a, #0:Fresh)), 
-(a), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #2:Fresh))), 
+(pk(i, b * i * n(b, #2:Fresh))), 
-(pk(i, b * i * n(b, #2:Fresh))), 
+(b * i * n(b, #2:Fresh)), 
-(b * i), 
-(b * i * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
+(pk(b, n(b, #2:Fresh))), 
-(pk(b, n(b, #2:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . (3 [2]) . 4 > (
:: nil ::
[ nil | 
   -(#0:NNSet), 
   -(#0:NNSet * n(a, #1:Fresh)), 
   +(n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #0:NNSet * n(a, #1:Fresh))), 
   +(#0:NNSet * n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #2:Fresh))), 
   +(b * i * n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #1:Fresh) ; a), 
   +(pk(b, n(a, #1:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #1:Fresh)), 
   -(a), 
   +(n(a, #1:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(i, n(a, #1:Fresh) ; a)) | 
   -(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   +(pk(i, b * i * n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b, n(a, #1:Fresh) ; a)), 
   +(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))), nil] )
|| 
pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh)) !inI,
pk(b, n(a, #1:Fresh) ; a) !inI,
pk(b, n(b, #2:Fresh)) !inI,
pk(i, b * i * n(b, #2:Fresh)) !inI,
(n(a, #1:Fresh) ; a) !inI,
n(a, #1:Fresh) !inI,
n(b, #2:Fresh) !inI,
(b * i) !inI,
(#0:NNSet * n(a, #1:Fresh)) !inI,
(b * i * n(b, #2:Fresh)) !inI,
pk(i, #0:NNSet * n(a, #1:Fresh)) inI,
irr(#0:NNSet * n(a, #1:Fresh)),
irr(b * i * n(b, #2:Fresh)),
inst(#0:NNSet)
|| 
-(pk(i, #0:NNSet * n(a, #1:Fresh))), 
+(#0:NNSet * n(a, #1:Fresh)), 
-(#0:NNSet), 
-(#0:NNSet * n(a, #1:Fresh)), 
+(n(a, #1:Fresh)), 
-(n(a, #1:Fresh)), 
-(a), 
+(n(a, #1:Fresh) ; a), 
-(n(a, #1:Fresh) ; a), 
+(pk(b, n(a, #1:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #1:Fresh) ; a)), 
+(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
-(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
+(pk(i, b * i * n(b, #2:Fresh))), 
-(pk(i, b * i * n(b, #2:Fresh))), 
+(b * i * n(b, #2:Fresh)), 
-(b * i), 
-(b * i * n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
+(pk(b, n(b, #2:Fresh))), 
-(pk(b, n(b, #2:Fresh)))
|| 
ghost( #0:NNSet,
   :: nil ::
   [ nil | 
      -(#0:NNSet), 
      -(#0:NNSet * n(a, #1:Fresh)), 
      +(n(a, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pk(i, b * i * n(b, #2:Fresh))), 
      +(b * i * n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #1:Fresh) ; a), 
      +(pk(b, n(a, #1:Fresh) ; a)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #1:Fresh)), 
      -(a), 
      +(n(a, #1:Fresh) ; a), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      +(pk(b, n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(b * i), 
      -(b * i * n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(pk(i, n(a, #1:Fresh) ; a)) | 
      -(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
      +(pk(i, b * i * n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil | 
      -(pk(b, n(a, #1:Fresh) ; a)), 
      +(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
      -(pk(b, n(b, #2:Fresh))), nil] ,    
   pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh)) !inI,
   pk(b, n(a, #1:Fresh) ; a) !inI,
   pk(b, n(b, #2:Fresh)) !inI,
   pk(i, b * i * n(b, #2:Fresh)) !inI,
   (n(a, #1:Fresh) ; a) !inI,
   n(a, #1:Fresh) !inI,
   n(b, #2:Fresh) !inI,
   (b * i) !inI,
   (b * i * n(b, #2:Fresh)) !inI,
   (#0:NNSet * n(a, #1:Fresh)) inI,
   irr(#0:NNSet * n(a, #1:Fresh)),
   irr(b * i * n(b, #2:Fresh)),
   inst(#0:NNSet),    
   -(#0:NNSet), 
   -(#0:NNSet * n(a, #1:Fresh)), 
   +(n(a, #1:Fresh)), 
   -(n(a, #1:Fresh)), 
   -(a), 
   +(n(a, #1:Fresh) ; a), 
   -(n(a, #1:Fresh) ; a), 
   +(pk(b, n(a, #1:Fresh) ; a)), 
   generatedByIntruder(b * i), 
   -(pk(b, n(a, #1:Fresh) ; a)), 
   +(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   -(pk(a, n(a, #1:Fresh) ; b * n(b, #2:Fresh))), 
   +(pk(i, b * i * n(b, #2:Fresh))), 
   -(pk(i, b * i * n(b, #2:Fresh))), 
   +(b * i * n(b, #2:Fresh)), 
   -(b * i), 
   -(b * i * n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   +(pk(b, n(b, #2:Fresh))), 
   -(pk(b, n(b, #2:Fresh))),    
   nil )
|| 
nil)
< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . (3 [2]) . 11 > (
:: nil ::
[ nil | 
   -(#1:NNSet), 
   -(#1:NNSet * n(a, #2:Fresh)), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #3:Fresh))), 
   +(b * i * n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:NNSet * n(a, #2:Fresh)), 
   +(#1:NNSet * n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #2:Fresh) ; a), 
   +(pk(b, n(a, #2:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #2:Fresh)), 
   -(a), 
   +(n(a, #2:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(i, n(a, #2:Fresh) ; a)) | 
   -(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   +(pk(i, b * i * n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b, n(a, #2:Fresh) ; a)), 
   +(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   -(pk(b, n(b, #3:Fresh))), nil] )
|| 
pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh)) !inI,
pk(b, n(a, #2:Fresh) ; a) !inI,
pk(b, n(b, #3:Fresh)) !inI,
pk(i, b * i * n(b, #3:Fresh)) !inI,
(n(a, #2:Fresh) ; a) !inI,
n(a, #2:Fresh) !inI,
n(b, #3:Fresh) !inI,
(b * i) !inI,
(#1:NNSet * n(a, #2:Fresh)) !inI,
(b * i * n(b, #3:Fresh)) !inI,
(#0:Msg ; #1:NNSet * n(a, #2:Fresh)) inI,
irr(#1:NNSet * n(a, #2:Fresh)),
irr(b * i * n(b, #3:Fresh)),
inst(#1:NNSet)
|| 
-(#0:Msg ; #1:NNSet * n(a, #2:Fresh)), 
+(#1:NNSet * n(a, #2:Fresh)), 
-(#1:NNSet), 
-(#1:NNSet * n(a, #2:Fresh)), 
+(n(a, #2:Fresh)), 
-(n(a, #2:Fresh)), 
-(a), 
+(n(a, #2:Fresh) ; a), 
-(n(a, #2:Fresh) ; a), 
+(pk(b, n(a, #2:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #2:Fresh) ; a)), 
+(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
-(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
+(pk(i, b * i * n(b, #3:Fresh))), 
-(pk(i, b * i * n(b, #3:Fresh))), 
+(b * i * n(b, #3:Fresh)), 
-(b * i), 
-(b * i * n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(n(b, #3:Fresh)), 
+(pk(b, n(b, #3:Fresh))), 
-(pk(b, n(b, #3:Fresh)))
|| 
ghost( #1:NNSet,
   :: nil ::
   [ nil | 
      -(#1:NNSet), 
      -(#1:NNSet * n(a, #2:Fresh)), 
      +(n(a, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pk(i, b * i * n(b, #3:Fresh))), 
      +(b * i * n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #2:Fresh) ; a), 
      +(pk(b, n(a, #2:Fresh) ; a)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #2:Fresh)), 
      -(a), 
      +(n(a, #2:Fresh) ; a), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      +(pk(b, n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(b * i), 
      -(b * i * n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(pk(i, n(a, #2:Fresh) ; a)) | 
      -(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
      +(pk(i, b * i * n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh ::
   [ nil | 
      -(pk(b, n(a, #2:Fresh) ; a)), 
      +(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
      -(pk(b, n(b, #3:Fresh))), nil] ,    
   pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh)) !inI,
   pk(b, n(a, #2:Fresh) ; a) !inI,
   pk(b, n(b, #3:Fresh)) !inI,
   pk(i, b * i * n(b, #3:Fresh)) !inI,
   (n(a, #2:Fresh) ; a) !inI,
   n(a, #2:Fresh) !inI,
   n(b, #3:Fresh) !inI,
   (b * i) !inI,
   (b * i * n(b, #3:Fresh)) !inI,
   (#1:NNSet * n(a, #2:Fresh)) inI,
   irr(#1:NNSet * n(a, #2:Fresh)),
   irr(b * i * n(b, #3:Fresh)),
   inst(#1:NNSet),    
   -(#1:NNSet), 
   -(#1:NNSet * n(a, #2:Fresh)), 
   +(n(a, #2:Fresh)), 
   -(n(a, #2:Fresh)), 
   -(a), 
   +(n(a, #2:Fresh) ; a), 
   -(n(a, #2:Fresh) ; a), 
   +(pk(b, n(a, #2:Fresh) ; a)), 
   generatedByIntruder(b * i), 
   -(pk(b, n(a, #2:Fresh) ; a)), 
   +(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   -(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   +(pk(i, b * i * n(b, #3:Fresh))), 
   -(pk(i, b * i * n(b, #3:Fresh))), 
   +(b * i * n(b, #3:Fresh)), 
   -(b * i), 
   -(b * i * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), 
   -(pk(b, n(b, #3:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(10) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 2 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; a)), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(i, n(a, #0:Fresh) ; a)), 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; a) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
irr(b * i * n(b, #1:Fresh))
|| 
+(pk(i, n(a, #0:Fresh) ; a)), 
-(pk(i, n(a, #0:Fresh) ; a)), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . 8 . 2 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
   +(n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(a, #0:Fresh) ; a)) | 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(#3:Name, n(a, #0:Fresh) ; i)), 
   +(pk(i, n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
(n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
pk(#3:Name, n(a, #0:Fresh) ; i) inI,
irr(b * i * n(b, #1:Fresh))
|| 
-(pk(#3:Name, n(a, #0:Fresh) ; i)), 
+(pk(i, n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
-(pk(i, n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh))), 
+(n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
-(n(a, #0:Fresh) ; #3:Name * n(#3:Name, #2:Fresh)), 
+(n(a, #0:Fresh)), 
-(n(a, #0:Fresh)), 
-(a), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . (3 [2]) . 4 . 8 > (
:: nil ::
[ nil | 
   -(#2:NNSet), 
   -(#2:NNSet * n(a, #3:Fresh)), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:NNSet * n(a, #3:Fresh))), 
   +(#2:NNSet * n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #4:Fresh))), 
   +(b * i * n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #3:Fresh) ; a), 
   +(pk(b, n(a, #3:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #3:Fresh)), 
   -(a), 
   +(n(a, #3:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #4:Fresh)), 
   +(pk(b, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #4:Fresh)), 
   +(n(b, #4:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(#1:Name, #0:Fresh) ; #1:Name)) | 
   -(pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(a, #3:Fresh))), 
   +(pk(i, #2:NNSet * n(a, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(i, n(a, #3:Fresh) ; a)) | 
   -(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   +(pk(i, b * i * n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(b, n(a, #3:Fresh) ; a)), 
   +(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   -(pk(b, n(b, #4:Fresh))), nil] )
|| 
pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh)) !inI,
pk(b, n(a, #3:Fresh) ; a) !inI,
pk(b, n(b, #4:Fresh)) !inI,
pk(i, #2:NNSet * n(a, #3:Fresh)) !inI,
pk(i, b * i * n(b, #4:Fresh)) !inI,
(n(a, #3:Fresh) ; a) !inI,
n(a, #3:Fresh) !inI,
n(b, #4:Fresh) !inI,
(b * i) !inI,
(#2:NNSet * n(a, #3:Fresh)) !inI,
(b * i * n(b, #4:Fresh)) !inI,
pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(a, #3:Fresh)) inI,
irr(#2:NNSet * n(a, #3:Fresh)),
irr(b * i * n(b, #4:Fresh)),
inst(#2:NNSet)
|| 
-(pk(#1:Name, n(#1:Name, #0:Fresh) ; i * #2:NNSet * n(a, #3:Fresh))), 
+(pk(i, #2:NNSet * n(a, #3:Fresh))), 
-(pk(i, #2:NNSet * n(a, #3:Fresh))), 
+(#2:NNSet * n(a, #3:Fresh)), 
-(#2:NNSet), 
-(#2:NNSet * n(a, #3:Fresh)), 
+(n(a, #3:Fresh)), 
-(n(a, #3:Fresh)), 
-(a), 
+(n(a, #3:Fresh) ; a), 
-(n(a, #3:Fresh) ; a), 
+(pk(b, n(a, #3:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #3:Fresh) ; a)), 
+(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
-(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
+(pk(i, b * i * n(b, #4:Fresh))), 
-(pk(i, b * i * n(b, #4:Fresh))), 
+(b * i * n(b, #4:Fresh)), 
-(b * i), 
-(b * i * n(b, #4:Fresh)), 
+(n(b, #4:Fresh)), 
-(n(b, #4:Fresh)), 
+(pk(b, n(b, #4:Fresh))), 
-(pk(b, n(b, #4:Fresh)))
|| 
ghost( #2:NNSet,
   :: nil ::
   [ nil | 
      -(#2:NNSet), 
      -(#2:NNSet * n(a, #3:Fresh)), 
      +(n(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pk(i, b * i * n(b, #4:Fresh))), 
      +(b * i * n(b, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #3:Fresh) ; a), 
      +(pk(b, n(a, #3:Fresh) ; a)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #3:Fresh)), 
      -(a), 
      +(n(a, #3:Fresh) ; a), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #4:Fresh)), 
      +(pk(b, n(b, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(b * i), 
      -(b * i * n(b, #4:Fresh)), 
      +(n(b, #4:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      +(pk(i, n(a, #3:Fresh) ; a)) | 
      -(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
      +(pk(i, b * i * n(b, #4:Fresh))), nil]  & 
   :: #4:Fresh ::
   [ nil | 
      -(pk(b, n(a, #3:Fresh) ; a)), 
      +(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
      -(pk(b, n(b, #4:Fresh))), nil] ,    
   pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh)) !inI,
   pk(b, n(a, #3:Fresh) ; a) !inI,
   pk(b, n(b, #4:Fresh)) !inI,
   pk(i, b * i * n(b, #4:Fresh)) !inI,
   (n(a, #3:Fresh) ; a) !inI,
   n(a, #3:Fresh) !inI,
   n(b, #4:Fresh) !inI,
   (b * i) !inI,
   (b * i * n(b, #4:Fresh)) !inI,
   (#2:NNSet * n(a, #3:Fresh)) inI,
   irr(#2:NNSet * n(a, #3:Fresh)),
   irr(b * i * n(b, #4:Fresh)),
   inst(#2:NNSet),    
   -(#2:NNSet), 
   -(#2:NNSet * n(a, #3:Fresh)), 
   +(n(a, #3:Fresh)), 
   -(n(a, #3:Fresh)), 
   -(a), 
   +(n(a, #3:Fresh) ; a), 
   -(n(a, #3:Fresh) ; a), 
   +(pk(b, n(a, #3:Fresh) ; a)), 
   generatedByIntruder(b * i), 
   -(pk(b, n(a, #3:Fresh) ; a)), 
   +(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   -(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   +(pk(i, b * i * n(b, #4:Fresh))), 
   -(pk(i, b * i * n(b, #4:Fresh))), 
   +(b * i * n(b, #4:Fresh)), 
   -(b * i), 
   -(b * i * n(b, #4:Fresh)), 
   +(n(b, #4:Fresh)), 
   -(n(b, #4:Fresh)), 
   +(pk(b, n(b, #4:Fresh))), 
   -(pk(b, n(b, #4:Fresh))),    
   nil )
|| 
nil)
(< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . (3 [2]) . 4 . 10 > (
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #4:Fresh))), 
   +(b * i * n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, i * #2:NNSet * n(a, #3:Fresh))), 
   +(i * #2:NNSet * n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #3:Fresh) ; a), 
   +(pk(b, n(a, #3:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #3:Fresh)), 
   -(a), 
   +(n(a, #3:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #4:Fresh)), 
   +(pk(b, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #4:Fresh)), 
   +(n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(i * #2:NNSet), 
   -(i * #2:NNSet * n(a, #3:Fresh)), 
   +(n(a, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(i, n(#1:Name, #0:Fresh) ; #1:Name)) | 
   -(pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(a, #3:Fresh))), 
   +(pk(i, i * #2:NNSet * n(a, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(i, n(a, #3:Fresh) ; a)) | 
   -(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   +(pk(i, b * i * n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(b, n(a, #3:Fresh) ; a)), 
   +(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   -(pk(b, n(b, #4:Fresh))), nil] )
|| 
pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh)) !inI,
pk(b, n(a, #3:Fresh) ; a) !inI,
pk(b, n(b, #4:Fresh)) !inI,
pk(i, b * i * n(b, #4:Fresh)) !inI,
pk(i, i * #2:NNSet * n(a, #3:Fresh)) !inI,
(n(a, #3:Fresh) ; a) !inI,
n(a, #3:Fresh) !inI,
n(b, #4:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #4:Fresh)) !inI,
(i * #2:NNSet * n(a, #3:Fresh)) !inI,
pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(a, #3:Fresh)) inI,
irr(b * i * n(b, #4:Fresh)),
irr(i * #2:NNSet * n(a, #3:Fresh)),
inst(#2:NNSet)
|| 
-(pk(#1:Name, n(#1:Name, #0:Fresh) ; #2:NNSet * n(a, #3:Fresh))), 
+(pk(i, i * #2:NNSet * n(a, #3:Fresh))), 
-(pk(i, i * #2:NNSet * n(a, #3:Fresh))), 
+(i * #2:NNSet * n(a, #3:Fresh)), 
-(i * #2:NNSet), 
-(i * #2:NNSet * n(a, #3:Fresh)), 
+(n(a, #3:Fresh)), 
-(n(a, #3:Fresh)), 
-(a), 
+(n(a, #3:Fresh) ; a), 
-(n(a, #3:Fresh) ; a), 
+(pk(b, n(a, #3:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #3:Fresh) ; a)), 
+(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
-(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
+(pk(i, b * i * n(b, #4:Fresh))), 
-(pk(i, b * i * n(b, #4:Fresh))), 
+(b * i * n(b, #4:Fresh)), 
-(b * i), 
-(b * i * n(b, #4:Fresh)), 
+(n(b, #4:Fresh)), 
-(n(b, #4:Fresh)), 
+(pk(b, n(b, #4:Fresh))), 
-(pk(b, n(b, #4:Fresh)))
|| 
ghost( i * #2:NNSet,
   :: nil ::
   [ nil | 
      -(pk(i, b * i * n(b, #4:Fresh))), 
      +(b * i * n(b, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #3:Fresh) ; a), 
      +(pk(b, n(a, #3:Fresh) ; a)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #3:Fresh)), 
      -(a), 
      +(n(a, #3:Fresh) ; a), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #4:Fresh)), 
      +(pk(b, n(b, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(b * i), 
      -(b * i * n(b, #4:Fresh)), 
      +(n(b, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(i * #2:NNSet), 
      -(i * #2:NNSet * n(a, #3:Fresh)), 
      +(n(a, #3:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      +(pk(i, n(a, #3:Fresh) ; a)) | 
      -(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
      +(pk(i, b * i * n(b, #4:Fresh))), nil]  & 
   :: #4:Fresh ::
   [ nil | 
      -(pk(b, n(a, #3:Fresh) ; a)), 
      +(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
      -(pk(b, n(b, #4:Fresh))), nil] ,    
   pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh)) !inI,
   pk(b, n(a, #3:Fresh) ; a) !inI,
   pk(b, n(b, #4:Fresh)) !inI,
   pk(i, b * i * n(b, #4:Fresh)) !inI,
   (n(a, #3:Fresh) ; a) !inI,
   n(a, #3:Fresh) !inI,
   n(b, #4:Fresh) !inI,
   (b * i) !inI,
   (b * i * n(b, #4:Fresh)) !inI,
   (i * #2:NNSet * n(a, #3:Fresh)) inI,
   irr(b * i * n(b, #4:Fresh)),
   irr(i * #2:NNSet * n(a, #3:Fresh)),
   inst(i * #2:NNSet),    
   -(i * #2:NNSet), 
   -(i * #2:NNSet * n(a, #3:Fresh)), 
   +(n(a, #3:Fresh)), 
   -(n(a, #3:Fresh)), 
   -(a), 
   +(n(a, #3:Fresh) ; a), 
   -(n(a, #3:Fresh) ; a), 
   +(pk(b, n(a, #3:Fresh) ; a)), 
   generatedByIntruder(b * i), 
   -(pk(b, n(a, #3:Fresh) ; a)), 
   +(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   -(pk(a, n(a, #3:Fresh) ; b * n(b, #4:Fresh))), 
   +(pk(i, b * i * n(b, #4:Fresh))), 
   -(pk(i, b * i * n(b, #4:Fresh))), 
   +(b * i * n(b, #4:Fresh)), 
   -(b * i), 
   -(b * i * n(b, #4:Fresh)), 
   +(n(b, #4:Fresh)), 
   -(n(b, #4:Fresh)), 
   +(pk(b, n(b, #4:Fresh))), 
   -(pk(b, n(b, #4:Fresh))),    
   nil )
|| 
nil)
< 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 3 . (3 [2]) . 11 . 3 > (
:: nil ::
[ nil | 
   -(#1:NNSet), 
   -(#1:NNSet * n(a, #2:Fresh)), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #0:Msg ; #1:NNSet * n(a, #2:Fresh))), 
   +(#0:Msg ; #1:NNSet * n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #3:Fresh))), 
   +(b * i * n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:NNSet * n(a, #2:Fresh)), 
   +(#1:NNSet * n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #2:Fresh) ; a), 
   +(pk(b, n(a, #2:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #2:Fresh)), 
   -(a), 
   +(n(a, #2:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(i, n(a, #2:Fresh) ; a)) | 
   -(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   +(pk(i, b * i * n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b, n(a, #2:Fresh) ; a)), 
   +(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   -(pk(b, n(b, #3:Fresh))), nil] )
|| 
pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh)) !inI,
pk(b, n(a, #2:Fresh) ; a) !inI,
pk(b, n(b, #3:Fresh)) !inI,
pk(i, b * i * n(b, #3:Fresh)) !inI,
(#0:Msg ; #1:NNSet * n(a, #2:Fresh)) !inI,
(n(a, #2:Fresh) ; a) !inI,
n(a, #2:Fresh) !inI,
n(b, #3:Fresh) !inI,
(b * i) !inI,
(#1:NNSet * n(a, #2:Fresh)) !inI,
(b * i * n(b, #3:Fresh)) !inI,
pk(i, #0:Msg ; #1:NNSet * n(a, #2:Fresh)) inI,
irr(#1:NNSet * n(a, #2:Fresh)),
irr(b * i * n(b, #3:Fresh)),
inst(#1:NNSet)
|| 
-(pk(i, #0:Msg ; #1:NNSet * n(a, #2:Fresh))), 
+(#0:Msg ; #1:NNSet * n(a, #2:Fresh)), 
-(#0:Msg ; #1:NNSet * n(a, #2:Fresh)), 
+(#1:NNSet * n(a, #2:Fresh)), 
-(#1:NNSet), 
-(#1:NNSet * n(a, #2:Fresh)), 
+(n(a, #2:Fresh)), 
-(n(a, #2:Fresh)), 
-(a), 
+(n(a, #2:Fresh) ; a), 
-(n(a, #2:Fresh) ; a), 
+(pk(b, n(a, #2:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #2:Fresh) ; a)), 
+(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
-(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
+(pk(i, b * i * n(b, #3:Fresh))), 
-(pk(i, b * i * n(b, #3:Fresh))), 
+(b * i * n(b, #3:Fresh)), 
-(b * i), 
-(b * i * n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(n(b, #3:Fresh)), 
+(pk(b, n(b, #3:Fresh))), 
-(pk(b, n(b, #3:Fresh)))
|| 
ghost( #1:NNSet,
   :: nil ::
   [ nil | 
      -(#1:NNSet), 
      -(#1:NNSet * n(a, #2:Fresh)), 
      +(n(a, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pk(i, b * i * n(b, #3:Fresh))), 
      +(b * i * n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #2:Fresh) ; a), 
      +(pk(b, n(a, #2:Fresh) ; a)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(a, #2:Fresh)), 
      -(a), 
      +(n(a, #2:Fresh) ; a), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      +(pk(b, n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(b * i), 
      -(b * i * n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(pk(i, n(a, #2:Fresh) ; a)) | 
      -(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
      +(pk(i, b * i * n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh ::
   [ nil | 
      -(pk(b, n(a, #2:Fresh) ; a)), 
      +(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
      -(pk(b, n(b, #3:Fresh))), nil] ,    
   pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh)) !inI,
   pk(b, n(a, #2:Fresh) ; a) !inI,
   pk(b, n(b, #3:Fresh)) !inI,
   pk(i, b * i * n(b, #3:Fresh)) !inI,
   (n(a, #2:Fresh) ; a) !inI,
   n(a, #2:Fresh) !inI,
   n(b, #3:Fresh) !inI,
   (b * i) !inI,
   (b * i * n(b, #3:Fresh)) !inI,
   (#1:NNSet * n(a, #2:Fresh)) inI,
   irr(#1:NNSet * n(a, #2:Fresh)),
   irr(b * i * n(b, #3:Fresh)),
   inst(#1:NNSet),    
   -(#1:NNSet), 
   -(#1:NNSet * n(a, #2:Fresh)), 
   +(n(a, #2:Fresh)), 
   -(n(a, #2:Fresh)), 
   -(a), 
   +(n(a, #2:Fresh) ; a), 
   -(n(a, #2:Fresh) ; a), 
   +(pk(b, n(a, #2:Fresh) ; a)), 
   generatedByIntruder(b * i), 
   -(pk(b, n(a, #2:Fresh) ; a)), 
   +(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   -(pk(a, n(a, #2:Fresh) ; b * n(b, #3:Fresh))), 
   +(pk(i, b * i * n(b, #3:Fresh))), 
   -(pk(i, b * i * n(b, #3:Fresh))), 
   +(b * i * n(b, #3:Fresh)), 
   -(b * i), 
   -(b * i * n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(n(b, #3:Fresh)), 
   +(pk(b, n(b, #3:Fresh))), 
   -(pk(b, n(b, #3:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(11) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 11 . (3 [2]) . 4 . 10 . 1 . 3 . 2 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, n(a, #0:Fresh) ; a)), 
   +(n(a, #0:Fresh) ; a), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b * i * n(b, #1:Fresh))), 
   +(b * i * n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; a), 
   +(pk(b, n(a, #0:Fresh) ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(b, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b * i), 
   -(b * i * n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(i, n(a, #0:Fresh) ; a)), 
   -(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   +(pk(i, b * i * n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(b, n(a, #0:Fresh) ; a)), 
   +(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
   -(pk(b, n(b, #1:Fresh))), nil] )
|| 
pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh)) !inI,
pk(b, n(a, #0:Fresh) ; a) !inI,
pk(b, n(b, #1:Fresh)) !inI,
pk(i, n(a, #0:Fresh) ; a) !inI,
pk(i, b * i * n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; a) !inI,
n(b, #1:Fresh) !inI,
(b * i) !inI,
(b * i * n(b, #1:Fresh)) !inI,
irr(b * i * n(b, #1:Fresh))
|| 
+(pk(i, n(a, #0:Fresh) ; a)), 
-(pk(i, n(a, #0:Fresh) ; a)), 
+(n(a, #0:Fresh) ; a), 
-(n(a, #0:Fresh) ; a), 
+(pk(b, n(a, #0:Fresh) ; a)), 
generatedByIntruder(b * i), 
-(pk(b, n(a, #0:Fresh) ; a)), 
+(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
-(pk(a, n(a, #0:Fresh) ; b * n(b, #1:Fresh))), 
+(pk(i, b * i * n(b, #1:Fresh))), 
-(pk(i, b * i * n(b, #1:Fresh))), 
+(b * i * n(b, #1:Fresh)), 
-(b * i), 
-(b * i * n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(b, n(b, #1:Fresh))), 
-(pk(b, n(b, #1:Fresh)))
|| 
nil
|| 
nil
Maude> Bye.
Wed Dec  5 02:05:12 CET 2012
Santiagos-MacBook-Pro:prototype-20121204 sescobar$ 
