Santiagos-MacBook-Pro:prototype-20121204 sescobar$ examples/Kao-Chow_Repeated_Authentication_Ticket-command 
Wed Dec  5 11:39:54 CET 2012
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude alpha96b built: Nov  9 2012 18:20:01
	    Copyright 1997-2011 SRI International
		   Wed Dec  5 11:39:54 2012
Maude> 
	    Maude-NPA Version:  Dec 4 2012 with direct composition
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           for getting the unification algorithm
 red genGrammars .            for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern X
 red summary(X,Y).            for summary of analysis steps
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 541259547 in 843657ms cpu (845172ms real) (641563 rewrites/second)
result GrammarList: (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq t(#3:UName, #4:Fresh)), (#0:Msg notLeq e(#5:Sessionkey, #6:Nonce ; #7:Sessionkey)), (#0:Msg notLeq e(mkey(#8:UName, s), #8:UName ; #9:UName ; #10:Nonce ;
    seskey(#8:UName, #9:UName, n(s, #11:Fresh)) ; seskey(#8:UName, #9:UName, n(s, #12:Fresh)))), (#0:Msg notLeq #13:UName ; #14:Nonce ; seskey(#15:UName, #13:UName, n(s, #16:Fresh)) ; seskey(#15:UName, #13:UName, n(s, #17:Fresh))),
    (#0:Msg notLeq #18:UName ; t(#18:UName, #19:Fresh) ; #20:Sessionkey), (#0:Msg notLeq #21:UName ; n(#22:UName, #23:Fresh)), (#0:Msg notLeq #24:Nonce ; seskey(#25:UName, #26:UName, n(s, #27:Fresh)) ; seskey(#25:UName, #26:UName,
    n(s, #28:Fresh))), (#0:Msg notLeq t(#29:UName, #30:Fresh) ; #31:Sessionkey), (#0:Msg notLeq e(#32:Sessionkey, #33:Nonce ; #34:Sessionkey) ; n(#35:UName, #36:Fresh) ; e(mkey(#35:UName, s), #37:UName ; #35:UName ; t(#35:UName,
    #38:Fresh) ; #34:Sessionkey)), #0:Msg notLeq seskey(#39:UName, #40:UName, n(s, #41:Fresh)) => (#0:Msg ; #42:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq t(#3:UName, #4:Fresh)), (#0:Msg notLeq e(#5:Sessionkey, #6:Nonce ; #7:Sessionkey)), (#0:Msg notLeq e(mkey(#8:UName, s), #8:UName ; #9:UName ; #10:Nonce ;
    seskey(#8:UName, #9:UName, n(s, #11:Fresh)) ; seskey(#8:UName, #9:UName, n(s, #12:Fresh)))), (#0:Msg notLeq #13:UName ; #14:Nonce ; seskey(#15:UName, #13:UName, n(s, #16:Fresh)) ; seskey(#15:UName, #13:UName, n(s, #17:Fresh))),
    (#0:Msg notLeq #18:UName ; t(#18:UName, #19:Fresh) ; #20:Sessionkey), (#0:Msg notLeq #21:UName ; n(#22:UName, #23:Fresh)), (#0:Msg notLeq #24:Nonce ; seskey(#25:UName, #26:UName, n(s, #27:Fresh)) ; seskey(#25:UName, #26:UName,
    n(s, #28:Fresh))), (#0:Msg notLeq t(#29:UName, #30:Fresh) ; #31:Sessionkey), (#0:Msg notLeq e(#32:Sessionkey, #33:Nonce ; #34:Sessionkey) ; n(#35:UName, #36:Fresh) ; e(mkey(#35:UName, s), #37:UName ; #35:UName ; t(#35:UName,
    #38:Fresh) ; #34:Sessionkey)), #0:Msg notLeq seskey(#39:UName, #40:UName, n(s, #41:Fresh)) => (#42:UName ; #0:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq t(#3:UName, #4:Fresh)), (#0:Msg notLeq e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Sessionkey)), (#0:Msg notLeq e(mkey(#9:UName, s), #10:UName ; #9:UName ; t(
    #9:UName, #11:Fresh) ; #12:Sessionkey)), (#0:Msg notLeq e(mkey(#13:UName, s), #14:UName ; #13:UName ; #15:Nonce ; seskey(#14:UName, #13:UName, n(s, #16:Fresh)) ; seskey(#14:UName, #13:UName, n(s, #17:Fresh)))), (#0:Msg notLeq
    #18:UName ; #19:Nonce ; seskey(#20:UName, #18:UName, n(s, #21:Fresh)) ; seskey(#20:UName, #18:UName, n(s, #22:Fresh))), (#0:Msg notLeq #23:UName ; t(#23:UName, #24:Fresh) ; #25:Sessionkey), (#0:Msg notLeq #26:UName ; n(
    #27:UName, #28:Fresh)), (#0:Msg notLeq #29:Nonce ; seskey(#30:UName, #31:UName, n(s, #32:Fresh)) ; seskey(#30:UName, #31:UName, n(s, #33:Fresh))), (#0:Msg notLeq n(#34:UName, #35:Fresh) ; e(mkey(#34:UName, s), #36:UName ;
    #34:UName ; t(#34:UName, #37:Fresh) ; #38:Sessionkey)), (#0:Msg notLeq t(#39:UName, #40:Fresh) ; #41:Sessionkey), (#0:Msg notLeq e(#42:Sessionkey, #43:Nonce ; #44:Sessionkey) ; n(#45:UName, #46:Fresh) ; e(mkey(#45:UName, s),
    #47:UName ; #45:UName ; t(#45:UName, #48:Fresh) ; #44:Sessionkey)), (#0:Msg notLeq seskey(#49:UName, #50:UName, n(s, #51:Fresh)) ; seskey(#49:UName, #50:UName, n(s, #52:Fresh))), #0:Msg notLeq seskey(#53:UName, #54:UName, n(s,
    #55:Fresh)) => (#0:Msg ; #56:Sessionkey) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq t(#3:UName, #4:Fresh)), (#0:Msg notLeq e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Sessionkey)), (#0:Msg notLeq e(mkey(#9:UName, s), #10:UName ; #9:UName ; t(
    #9:UName, #11:Fresh) ; #12:Sessionkey)), (#0:Msg notLeq e(mkey(#13:UName, s), #14:UName ; #13:UName ; #15:Nonce ; seskey(#14:UName, #13:UName, n(s, #16:Fresh)) ; seskey(#14:UName, #13:UName, n(s, #17:Fresh)))), (#0:Msg notLeq
    #18:UName ; #19:Nonce ; seskey(#20:UName, #18:UName, n(s, #21:Fresh)) ; seskey(#20:UName, #18:UName, n(s, #22:Fresh))), (#0:Msg notLeq #23:UName ; t(#23:UName, #24:Fresh) ; #25:Sessionkey), (#0:Msg notLeq #26:UName ; n(
    #27:UName, #28:Fresh)), (#0:Msg notLeq #29:Nonce ; seskey(#30:UName, #31:UName, n(s, #32:Fresh)) ; seskey(#30:UName, #31:UName, n(s, #33:Fresh))), (#0:Msg notLeq n(#34:UName, #35:Fresh) ; e(mkey(#34:UName, s), #36:UName ;
    #34:UName ; t(#34:UName, #37:Fresh) ; #38:Sessionkey)), (#0:Msg notLeq t(#39:UName, #40:Fresh) ; #41:Sessionkey), (#0:Msg notLeq e(#42:Sessionkey, #43:Nonce ; #44:Sessionkey) ; n(#45:UName, #46:Fresh) ; e(mkey(#45:UName, s),
    #47:UName ; #45:UName ; t(#45:UName, #48:Fresh) ; #44:Sessionkey)), (#0:Msg notLeq seskey(#49:UName, #50:UName, n(s, #51:Fresh)) ; seskey(#49:UName, #50:UName, n(s, #52:Fresh))), #0:Msg notLeq seskey(#53:UName, #54:UName, n(s,
    #55:Fresh)) => (#0:Msg ; #56:Sessionkey ; #57:Sessionkey) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq t(#3:UName, #4:Fresh)), (#0:Msg notLeq e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Sessionkey)), (#0:Msg notLeq e(mkey(#9:UName, s), #10:UName ; #9:UName ; t(
    #9:UName, #11:Fresh) ; #12:Sessionkey)), (#0:Msg notLeq e(mkey(#13:UName, s), #14:UName ; #13:UName ; #15:Nonce ; seskey(#14:UName, #13:UName, n(s, #16:Fresh)) ; seskey(#14:UName, #13:UName, n(s, #17:Fresh)))), (#0:Msg notLeq
    #18:UName ; #19:Nonce ; seskey(#20:UName, #18:UName, n(s, #21:Fresh)) ; seskey(#20:UName, #18:UName, n(s, #22:Fresh))), (#0:Msg notLeq #23:UName ; t(#23:UName, #24:Fresh) ; #25:Sessionkey), (#0:Msg notLeq #26:UName ; n(
    #27:UName, #28:Fresh)), (#0:Msg notLeq #29:Nonce ; seskey(#30:UName, #31:UName, n(s, #32:Fresh)) ; seskey(#30:UName, #31:UName, n(s, #33:Fresh))), (#0:Msg notLeq n(#34:UName, #35:Fresh) ; e(mkey(#34:UName, s), #36:UName ;
    #34:UName ; t(#34:UName, #37:Fresh) ; #38:Sessionkey)), (#0:Msg notLeq t(#39:UName, #40:Fresh) ; #41:Sessionkey), (#0:Msg notLeq e(#42:Sessionkey, #43:Nonce ; #44:Sessionkey) ; n(#45:UName, #46:Fresh) ; e(mkey(#45:UName, s),
    #47:UName ; #45:UName ; t(#45:UName, #48:Fresh) ; #44:Sessionkey)), (#0:Msg notLeq seskey(#49:UName, #50:UName, n(s, #51:Fresh)) ; seskey(#49:UName, #50:UName, n(s, #52:Fresh))), #0:Msg notLeq seskey(#53:UName, #54:UName, n(s,
    #55:Fresh)) => (#56:Msg ; #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq mkey(#1:UName, s)), (#0:Msg notLeq e(#2:Sessionkey, #3:Nonce ; #4:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #4:Sessionkey)), #0:Msg
    notLeq seskey(#9:UName, #10:UName, n(s, #11:Fresh)) => (#12:Sessionkey ; #0:Msg) inL . ; 
grl #0:Key notInI, (#0:Key notLeq mkey(#1:UName, s)), (#0:Key notLeq e(#2:Sessionkey, #3:Nonce ; #4:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #4:Sessionkey)), #0:Key
    notLeq seskey(#9:UName, #10:UName, n(s, #11:Fresh)) => e(#0:Key, #12:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq #1:UName ; #2:UName ; #3:Nonce ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #5:Fresh))), (#0:Msg notLeq #6:UName ; #7:UName ; t(#7:UName, #8:Fresh) ;
    #9:Sessionkey), #0:Msg notLeq #10:Nonce ; #11:Sessionkey => e(#12:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl (mkey(#0:Name, #1:Name) notLeq mkey(i, #2:Name)), mkey(#0:Name, #1:Name) notLeq mkey(#3:Name, i) => mkey(#0:Name, #1:Name) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #4:Nonce => n(#0:Name, #1:Fresh) inL . inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq #4:Nonce => n(#0:Name, #1:Fresh) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Nonce notInI, #0:Nonce notLeq n(s, #1:Fresh) => seskey(#2:Name, #3:Name, #0:Nonce) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq #5:Sessionkey => seskey(#0:Name, #1:Name, #2:Nonce) inL . inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq #5:Sessionkey => seskey(#0:Name, #1:Name, #2:Nonce) inL .)
| errorInconsistentExceptionsInGrammarRule 
grl t(#0:Name, #1:Fresh) notLeq #4:Nonce => t(#0:Name, #1:Fresh) inL . inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl t(#0:Name, #1:Fresh) notLeq #4:Nonce => t(#0:Name, #1:Fresh) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3896 in 30ms cpu (35ms real) (129806 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh,r':Fresh ::
[ nil, 
   -(MA:Msg ; e(mkey(B:UName, s), A:UName ; B:UName ; NA:Nonce ; SK:Sessionkey ; Kt:Sessionkey)), 
   +(MA:Msg ; e(Kt:Sessionkey, NA:Nonce ; SK:Sessionkey) ; n(B:UName, r:Fresh) ; e(mkey(B:UName, s), A:UName ; B:UName ; t(B:UName, r':Fresh) ; SK:Sessionkey)), 
   -(e(Kt:Sessionkey, NA:Nonce ; SK:Sessionkey) ; e(mkey(B:UName, s), A:UName ; B:UName ; t(B:UName, r':Fresh) ; SK:Sessionkey)) | nil] 
|| empty
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 23684768 in 33326ms cpu (33367ms real) (710678 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 20616330 in 30224ms cpu (30284ms real) (682115 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 38834781 in 56911ms cpu (57046ms real) (682366 rewrites/second)
result Summary: States>> 9 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 89109303 in 125788ms cpu (126106ms real) (708405 rewrites/second)
result Summary: States>> 21 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 3 > (
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: #2:Fresh,#6:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; #5:Nonce ; #3:Sessionkey ; #4:Sessionkey)), 
   +(#7:Msg ; e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; n(#0:UName, #6:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) | 
   -(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil] )
|| 
(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) !inI,
e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey) inI
|| 
-(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey)), 
+(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey))
|| 
ghost( e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
      -(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey)), 
      +(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
   :: #2:Fresh,#6:Fresh ::
   [ nil, 
      -(#7:Msg ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; #5:Nonce ; #3:Sessionkey ; #4:Sessionkey)), 
      +(#7:Msg ; e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; n(#0:UName, #6:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) | 
      -(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil] ,    
   (e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) !inI,
   e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey) inI,    
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, #5:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)),    
   nil )
|| 
nil)
< 1 . 6 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: #8:Fresh,#9:Fresh ::
[ nil, 
   -(#10:Msg ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(#10:Msg ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#6:UName, #9:Fresh) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) | 
   -(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), nil] )
|| 
(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)) inI,
inst(#2:UName)
|| 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 3 . 4 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey), 
   +(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; #6:Nonce ; #3:Sessionkey ; #7:Sessionkey)), 
   +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) | 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey) !inI,
(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey), 
+(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
+(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey))
|| 
ghost( e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
      -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
      +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(#5:Msg ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; #6:Nonce ; #3:Sessionkey ; #7:Sessionkey)), 
      +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) | 
      -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), nil] ,    
   (e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)) !inI,
   e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey) inI,    
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #2:Fresh) ; #3:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
:: #3:Fresh,#5:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; #7:Nonce ; #4:Sessionkey ; #8:Sessionkey)), 
   +(#6:Msg ; e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)) | 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), nil] )
|| 
e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey) !inI,
(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)) !inI,
(#0:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)) inI
|| 
-(#0:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
+(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey))
|| 
ghost( e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
      -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
      +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
   :: #3:Fresh,#5:Fresh ::
   [ nil, 
      -(#6:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; #7:Nonce ; #4:Sessionkey ; #8:Sessionkey)), 
      +(#6:Msg ; e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)) | 
      -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), nil] ,    
   (e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)) !inI,
   e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey) inI,    
   -(e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #3:Fresh) ; #4:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 6 . 3 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)), nil] )
|| 
(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)) inI,
inst(#1:UName),
inst(#2:UName),
inst(#3:Sessionkey),
inst(#4:Sessionkey)
|| 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil)
< 1 . 6 . 7 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
   -(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #8:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(#10:Msg ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey)), 
   +(#10:Msg ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #9:Fresh) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), nil] )
|| 
(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)) !inI,
e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) inI,
inst(#8:UName)
|| 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #8:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 3 . 4 . 2 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey), 
   +(e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
   -(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey)), 
   +(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), nil]  & 
:: #1:Fresh,#0:Fresh ::
[ nil, 
   -(#2:Msg ; e(mkey(i, s), #3:UName ; i ; #4:Nonce ; #5:Sessionkey ; #6:Sessionkey)), 
   +(#2:Msg ; e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; n(i, #1:Fresh) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)) | 
   -(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey) !inI,
(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)) !inI,
(#3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey), 
+(e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
-(e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
-(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey)), 
+(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
-(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey))
|| 
ghost( e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
      -(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey)), 
      +(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), nil]  & 
   :: #1:Fresh,#0:Fresh ::
   [ nil, 
      -(#2:Msg ; e(mkey(i, s), #3:UName ; i ; #4:Nonce ; #5:Sessionkey ; #6:Sessionkey)), 
      +(#2:Msg ; e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; n(i, #1:Fresh) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)) | 
      -(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), nil] ,    
   (e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)) !inI,
   e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey) inI,    
   -(e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
   -(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey)), 
   +(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)), 
   -(e(#6:Sessionkey, #4:Nonce ; #5:Sessionkey) ; e(mkey(i, s), #3:UName ; i ; t(i, #0:Fresh) ; #5:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 4 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   +(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#2:UName, s)), 
   -(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), 
   +(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
:: #3:Fresh,#5:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; #7:Nonce ; #4:Sessionkey ; #8:Sessionkey)), 
   +(#6:Msg ; e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)) | 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil] )
|| 
e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) !inI,
(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) !inI,
(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)) !inI,
mkey(#2:UName, s) inI,
e(#0:Key, #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) inI
|| 
-(#0:Key), 
-(e(#0:Key, #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
+(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), 
-(mkey(#2:UName, s)), 
-(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), 
+(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
+(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
      +(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), nil]  & 
   :: nil ::
   [ nil | 
      -(mkey(#2:UName, s)), 
      -(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), 
      +(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
   :: nil ::
   [ nil | 
      -(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
      -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
      +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
   :: #3:Fresh,#5:Fresh ::
   [ nil, 
      -(#6:Msg ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; #7:Nonce ; #4:Sessionkey ; #8:Sessionkey)), 
      +(#6:Msg ; e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)) | 
      -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil] ,    
   e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) !inI,
   (#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) !inI,
   (e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)) !inI,
   mkey(#2:UName, s) inI,
   e(#0:Key, #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   +(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), 
   -(mkey(#2:UName, s)), 
   -(#1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey), 
   +(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)),    
   nil ),

ghost( e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
      -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
      +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil]  & 
   :: #3:Fresh,#5:Fresh ::
   [ nil, 
      -(#6:Msg ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; #7:Nonce ; #4:Sessionkey ; #8:Sessionkey)), 
      +(#6:Msg ; e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)) | 
      -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), nil] ,    
   (e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)) !inI,
   e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey) inI,    
   -(e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #4:Sessionkey) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #3:Fresh) ; #4:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 10 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   +(e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   -(#3:UName), 
   +(#3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; #6:Nonce ; #2:Sessionkey ; #7:Sessionkey)), 
   +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) | 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(#3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) inI
|| 
-(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(#3:UName), 
+(#3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(mkey(#0:UName, s)), 
-(#3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
+(e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
+(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey))
|| 
ghost( e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
      -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
      +(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
   :: #1:Fresh,#4:Fresh ::
   [ nil, 
      -(#5:Msg ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; #6:Nonce ; #2:Sessionkey ; #7:Sessionkey)), 
      +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) | 
      -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil] ,    
   (e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) !inI,
   e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,    
   -(e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #3:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 5 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
   +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; #8:Nonce ; #5:Sessionkey ; #9:Sessionkey)), 
   +(#7:Msg ; e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; n(#2:UName, #6:Fresh) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) | 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil] )
|| 
e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey) !inI,
(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) inI
|| 
-(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
+(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
+(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey))
|| 
ghost( e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
      -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
      +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
   :: #4:Fresh,#6:Fresh ::
   [ nil, 
      -(#7:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; #8:Nonce ; #5:Sessionkey ; #9:Sessionkey)), 
      +(#7:Msg ; e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; n(#2:UName, #6:Fresh) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) | 
      -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil] ,    
   (e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
   e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey) inI,    
   -(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
   +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 5 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
   -(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey)), 
   +(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
   +(e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #9:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(#11:Msg ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; #12:Nonce ; #9:Sessionkey ; #13:Sessionkey)), 
   +(#11:Msg ; e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; n(#6:UName, #10:Fresh) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)) | 
   -(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), nil] )
|| 
e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)) !inI,
(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #9:Sessionkey)) inI,
inst(#9:Sessionkey)
|| 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #9:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
+(e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
-(e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
-(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey)), 
+(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
-(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey))
|| 
ghost( e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
      -(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey)), 
      +(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), nil]  & 
   :: #8:Fresh,#10:Fresh ::
   [ nil, 
      -(#11:Msg ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; #12:Nonce ; #9:Sessionkey ; #13:Sessionkey)), 
      +(#11:Msg ; e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; n(#6:UName, #10:Fresh) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)) | 
      -(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), nil] ,    
   (e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)) !inI,
   e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey) inI,    
   -(e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
   -(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey)), 
   +(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)), 
   -(e(#13:Sessionkey, #12:Nonce ; #9:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #9:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 4 > (
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   -(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #6:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
   +(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)), nil]  & 
:: #7:Fresh,#8:Fresh ::
[ nil | 
   -(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
   -(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)), nil] )
|| 
(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)) !inI,
e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) inI,
e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) inI,
inst(#2:UName),
inst(#6:UName),
inst(#4:Sessionkey),
inst(#5:Sessionkey)
|| 
-(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
+(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 7 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
   +(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s,
    #3:Fresh)))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
   -(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s,
    #3:Fresh)))), nil] )
|| 
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))) !inI,
(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))))
    !inI,
(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) inI,
inst(#1:UName),
inst(#2:UName)
|| 
-(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
+(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
-(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))))
|| 
nil
|| 
nil)
(< 1 . 6 . 7 . 9 > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), 
   -(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #4:Sessionkey)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #9:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #4:Sessionkey)), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(#11:Msg ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey)), 
   +(#11:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#6:UName, #10:Fresh) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)) | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), nil] )
|| 
(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #4:Sessionkey)) !inI,
e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey) inI,
(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)) inI,
inst(#9:UName)
|| 
-(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #9:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #4:Sessionkey)), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #4:Sessionkey))
|| 
nil
|| 
nil)
< 1 . 6 . 7 . 13 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
   -(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -((e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) ; #8:Msg), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #9:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), nil]  & 
:: #7:Fresh,#10:Fresh ::
[ nil, 
   -(#11:Msg ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey)), 
   +(#11:Msg ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #10:Fresh) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), nil] )
|| 
(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)) !inI,
e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) inI,
((e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) ; #8:Msg) inI,
inst(#9:UName)
|| 
-((e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)) ; #8:Msg), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #9:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; #4:Nonce ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName,
    #7:Fresh) ; #3:Sessionkey)), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #6:UName ; #5:UName ; t(#5:UName, #7:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 3 . 4 . 2 . 2 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   +(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), 
   +(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(i, s), #1:UName ; i ; #6:Nonce ; #3:Sessionkey ; #7:Sessionkey)), 
   +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; n(i, #4:Fresh) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)) | 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) !inI,
(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) !inI,
(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)) !inI,
e(#0:Key, #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) inI
|| 
-(#0:Key), 
-(e(#0:Key, #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
+(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), 
+(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
-(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
+(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      +(mkey(i, s)), nil]  & 
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
      +(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), nil]  & 
   :: nil ::
   [ nil | 
      -(mkey(i, s)), 
      -(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), 
      +(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil]  & 
   :: nil ::
   [ nil | 
      -(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
      -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
      +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(#5:Msg ; e(mkey(i, s), #1:UName ; i ; #6:Nonce ; #3:Sessionkey ; #7:Sessionkey)), 
      +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; n(i, #4:Fresh) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)) | 
      -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil] ,    
   mkey(i, s) !inI,
   e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) !inI,
   (#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) !inI,
   (e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)) !inI,
   e(#0:Key, #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   +(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), 
   +(mkey(i, s)), 
   -(mkey(i, s)), 
   -(#1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey), 
   +(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   -(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)),    
   nil ),

ghost( e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
      -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
      +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(#5:Msg ; e(mkey(i, s), #1:UName ; i ; #6:Nonce ; #3:Sessionkey ; #7:Sessionkey)), 
      +(#5:Msg ; e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; n(i, #4:Fresh) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)) | 
      -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), nil] ,    
   (e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)) !inI,
   e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey) inI,    
   -(e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #3:Sessionkey) ; e(mkey(i, s), #1:UName ; i ; t(i, #2:Fresh) ; #3:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 2 . 5 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey), 
   +(e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
   -(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey)), 
   +(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(i ; t(i, #0:Fresh) ; #1:Sessionkey), 
   -(#2:UName), 
   +(#2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey), nil]  & 
:: #3:Fresh,#0:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(i, s), #2:UName ; i ; #5:Nonce ; #1:Sessionkey ; #6:Sessionkey)), 
   +(#4:Msg ; e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; n(i, #3:Fresh) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)) | 
   -(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey) !inI,
(#2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey) !inI,
(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)) !inI,
(i ; t(i, #0:Fresh) ; #1:Sessionkey) inI
|| 
-(i ; t(i, #0:Fresh) ; #1:Sessionkey), 
-(#2:UName), 
+(#2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey), 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey), 
+(e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
-(e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
-(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey)), 
+(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
-(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey))
|| 
ghost( e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
      -(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey)), 
      +(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), nil]  & 
   :: #3:Fresh,#0:Fresh ::
   [ nil, 
      -(#4:Msg ; e(mkey(i, s), #2:UName ; i ; #5:Nonce ; #1:Sessionkey ; #6:Sessionkey)), 
      +(#4:Msg ; e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; n(i, #3:Fresh) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)) | 
      -(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), nil] ,    
   (e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)) !inI,
   e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey) inI,    
   -(e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
   -(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey)), 
   +(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)), 
   -(e(#6:Sessionkey, #5:Nonce ; #1:Sessionkey) ; e(mkey(i, s), #2:UName ; i ; t(i, #0:Fresh) ; #1:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 4 . 5 > (
:: nil ::
[ nil | 
   -(#1:Key), 
   -(e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#3:UName, s)), 
   -(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), 
   +(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
   +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; #8:Nonce ; #5:Sessionkey ; #9:Sessionkey)), 
   +(#7:Msg ; e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; n(#3:UName, #6:Fresh) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) | 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil] )
|| 
e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) !inI,
e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) !inI,
(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) !inI,
(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
mkey(#3:UName, s) inI,
(#0:Msg ; e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) inI
|| 
-(#0:Msg ; e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
+(e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
-(#1:Key), 
-(e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
+(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), 
-(mkey(#3:UName, s)), 
-(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), 
+(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
+(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey))
|| 
ghost( #1:Key,
   :: nil ::
   [ nil | 
      -(#1:Key), 
      -(e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
      +(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), nil]  & 
   :: nil ::
   [ nil | 
      -(mkey(#3:UName, s)), 
      -(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), 
      +(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
   :: nil ::
   [ nil | 
      -(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
      -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
      +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
   :: #4:Fresh,#6:Fresh ::
   [ nil, 
      -(#7:Msg ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; #8:Nonce ; #5:Sessionkey ; #9:Sessionkey)), 
      +(#7:Msg ; e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; n(#3:UName, #6:Fresh) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) | 
      -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil] ,    
   e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) !inI,
   (#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) !inI,
   (e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
   mkey(#3:UName, s) inI,
   e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) inI,    
   -(#1:Key), 
   -(e(#1:Key, #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), 
   -(mkey(#3:UName, s)), 
   -(#2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey), 
   +(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
   +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)),    
   nil ),

ghost( e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
      -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
      +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
   :: #4:Fresh,#6:Fresh ::
   [ nil, 
      -(#7:Msg ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; #8:Nonce ; #5:Sessionkey ; #9:Sessionkey)), 
      +(#7:Msg ; e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; n(#3:UName, #6:Fresh) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) | 
      -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), nil] ,    
   (e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
   e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey) inI,    
   -(e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey)), 
   +(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#9:Sessionkey, #8:Nonce ; #5:Sessionkey) ; e(mkey(#3:UName, s), #2:UName ; #3:UName ; t(#3:UName, #4:Fresh) ; #5:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 10 . 8 > (
:: nil ::
[ nil | 
   -(mkey(#1:UName, s)), 
   -(#6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
   +(e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
   +(#1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(#1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
   -(#6:UName), 
   +(#6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; #7:Nonce ; #3:Sessionkey ; #8:Sessionkey)), 
   +(#5:Msg ; e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; n(#1:UName, #4:Fresh) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)) | 
   -(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), nil] )
|| 
e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey) !inI,
(#1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey) !inI,
(#6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey) !inI,
(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)) !inI,
mkey(#1:UName, s) inI,
(#0:Msg ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey) inI
|| 
-(#0:Msg ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
+(#1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
-(#1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
-(#6:UName), 
+(#6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
-(mkey(#1:UName, s)), 
-(#6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey), 
+(e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey)), 
+(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey))
|| 
ghost( e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
      -(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey)), 
      +(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(#5:Msg ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; #7:Nonce ; #3:Sessionkey ; #8:Sessionkey)), 
      +(#5:Msg ; e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; n(#1:UName, #4:Fresh) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)) | 
      -(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), nil] ,    
   (e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)) !inI,
   e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey) inI,    
   -(e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #3:Sessionkey) ; e(mkey(#1:UName, s), #6:UName ; #1:UName ; t(#1:UName, #2:Fresh) ; #3:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 10 . 9 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   +(e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   -(#5:UName), 
   +(#5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   -(#0:UName), 
   +(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; #6:Nonce ; #2:Sessionkey ; #7:Sessionkey)), 
   +(#4:Msg ; e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; n(#0:UName, #3:Fresh) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) | 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(#5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
(t(#0:UName, #1:Fresh) ; #2:Sessionkey) inI
|| 
-(t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(#0:UName), 
+(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(#5:UName), 
+(#5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(mkey(#0:UName, s)), 
-(#5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
+(e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
+(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey))
|| 
ghost( e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
      -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
      +(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(#4:Msg ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; #6:Nonce ; #2:Sessionkey ; #7:Sessionkey)), 
      +(#4:Msg ; e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; n(#0:UName, #3:Fresh) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) | 
      -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil] ,    
   (e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) !inI,
   e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,    
   -(e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey)), 
   +(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#7:Sessionkey, #6:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #5:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 4 . 10 . 11 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   +(e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   -(#6:UName), 
   +(#6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -((#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) ; #3:Msg), 
   +(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; #7:Nonce ; #2:Sessionkey ; #8:Sessionkey)), 
   +(#5:Msg ; e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) | 
   -(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(#6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
((#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) ; #3:Msg) inI
|| 
-((#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) ; #3:Msg), 
+(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(#0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(#6:UName), 
+(#6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
-(mkey(#0:UName, s)), 
-(#6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey), 
+(e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey)), 
+(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey))
|| 
ghost( e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
      -(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey)), 
      +(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
   :: #1:Fresh,#4:Fresh ::
   [ nil, 
      -(#5:Msg ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; #7:Nonce ; #2:Sessionkey ; #8:Sessionkey)), 
      +(#5:Msg ; e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) | 
      -(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil] ,    
   (e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)) !inI,
   e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,    
   -(e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey)), 
   +(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(#8:Sessionkey, #7:Nonce ; #2:Sessionkey) ; e(mkey(#0:UName, s), #6:UName ; #0:UName ; t(#0:UName, #1:Fresh) ; #2:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 5 . 5 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey)), 
   +(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   +(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -((#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) ; #6:Msg), 
   +(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
:: #4:Fresh,#7:Fresh ::
[ nil, 
   -(#8:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; #9:Nonce ; #5:Sessionkey ; #10:Sessionkey)), 
   +(#8:Msg ; e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; n(#2:UName, #7:Fresh) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) | 
   -(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil] )
|| 
e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey) !inI,
(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
((#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) ; #6:Msg) inI
|| 
-((#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) ; #6:Msg), 
+(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(#0:Msg ; #1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
+(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(#1:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey)), 
+(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
-(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey))
|| 
ghost( e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
      -(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey)), 
      +(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil]  & 
   :: #4:Fresh,#7:Fresh ::
   [ nil, 
      -(#8:Msg ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; #9:Nonce ; #5:Sessionkey ; #10:Sessionkey)), 
      +(#8:Msg ; e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; n(#2:UName, #7:Fresh) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) | 
      -(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), nil] ,    
   (e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)) !inI,
   e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey) inI,    
   -(e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey)), 
   +(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)), 
   -(e(#10:Sessionkey, #9:Nonce ; #5:Sessionkey) ; e(mkey(#2:UName, s), #3:UName ; #2:UName ; t(#2:UName, #4:Fresh) ; #5:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 5 . 5 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
   -(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey)), 
   +(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
   +(#2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
   +(e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
   +(#1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil]  & 
:: #5:Fresh,#7:Fresh ::
[ nil, 
   -(#8:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; #9:Nonce ; #6:Sessionkey ; #10:Sessionkey)), 
   +(#8:Msg ; e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; n(#3:UName, #7:Fresh) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) | 
   -(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil] )
|| 
e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey) !inI,
(#1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) !inI,
(#2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) !inI,
(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) !inI,
(#0:Msg ; #1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) inI
|| 
-(#0:Msg ; #1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
+(#1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
-(#1:Msg ; #2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
+(#2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
-(#2:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
+(e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
-(e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
-(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey)), 
+(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
-(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey))
|| 
ghost( e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
      -(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey)), 
      +(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil]  & 
   :: #5:Fresh,#7:Fresh ::
   [ nil, 
      -(#8:Msg ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; #9:Nonce ; #6:Sessionkey ; #10:Sessionkey)), 
      +(#8:Msg ; e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; n(#3:UName, #7:Fresh) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) | 
      -(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), nil] ,    
   (e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)) !inI,
   e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey) inI,    
   -(e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
   -(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey)), 
   +(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)), 
   -(e(#10:Sessionkey, #9:Nonce ; #6:Sessionkey) ; e(mkey(#3:UName, s), #4:UName ; #3:UName ; t(#3:UName, #5:Fresh) ; #6:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 3 . 5 . 5 . 7 > (
:: nil ::
[ nil | 
   -(e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
   -(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey)), 
   +(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
   +(e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
   +(#6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(
    #7:UName, #9:Fresh) ; #10:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil]  & 
:: #9:Fresh,#11:Fresh ::
[ nil, 
   -(#12:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; #13:Nonce ; #10:Sessionkey ; #14:Sessionkey)), 
   +(#12:Msg ; e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; n(#7:UName, #11:Fresh) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)) | 
   -(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil] )
|| 
e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey) !inI,
(#6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)) !inI,
(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)) !inI,
(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(
    #7:UName, #9:Fresh) ; #10:Sessionkey)) inI,
inst(#10:Sessionkey)
|| 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(
    #7:UName, #9:Fresh) ; #10:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
+(#6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
-(#6:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
+(e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
-(e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
-(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey)), 
+(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
-(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey))
|| 
ghost( e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey),
   :: nil ::
   [ nil | 
      -(e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
      -(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey)), 
      +(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil]  & 
   :: #9:Fresh,#11:Fresh ::
   [ nil, 
      -(#12:Msg ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; #13:Nonce ; #10:Sessionkey ; #14:Sessionkey)), 
      +(#12:Msg ; e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; n(#7:UName, #11:Fresh) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)) | 
      -(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), nil] ,    
   (e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)) !inI,
   e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey) inI,    
   -(e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
   -(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey)), 
   +(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)), 
   -(e(#14:Sessionkey, #13:Nonce ; #10:Sessionkey) ; e(mkey(#7:UName, s), #8:UName ; #7:UName ; t(#7:UName, #9:Fresh) ; #10:Sessionkey)),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 7 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
   +(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s,
    #3:Fresh)))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
   -(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s,
    #3:Fresh)))), nil] )
|| 
(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))) !inI,
(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))))
    !inI,
inst(#1:UName),
inst(#2:UName)
|| 
+(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)), 
-(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh)))), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #2:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ;
    seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; n(#2:UName, #5:Fresh) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
+(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)))), 
-(e(seskey(#1:UName, #2:UName, n(s, #4:Fresh)), n(#1:UName, #0:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))) ; e(mkey(#2:UName, s), #1:UName ; #2:UName ; t(#2:UName, #6:Fresh) ; seskey(#1:UName, #2:UName, n(s, #3:Fresh))))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 7 . 6 > (
:: nil ::
[ nil | 
   -(#0:UName ; n(#1:UName, #2:Fresh)), 
   -(#1:UName), 
   +(#1:UName ; #0:UName ; n(#1:UName, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #0:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)))), 
   +(e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s,
    #3:Fresh)))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(#1:UName ; #0:UName ; n(#1:UName, #2:Fresh)), 
   +(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh)))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh)))), 
   +(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)))), 
   -(e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s,
    #3:Fresh)))), nil] )
|| 
(#1:UName ; #0:UName ; n(#1:UName, #2:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh)))) !inI,
(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)))) !inI,
(e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))))
    !inI,
(#0:UName ; n(#1:UName, #2:Fresh)) inI,
inst(#1:UName),
inst(#0:UName)
|| 
-(#0:UName ; n(#1:UName, #2:Fresh)), 
-(#1:UName), 
+(#1:UName ; #0:UName ; n(#1:UName, #2:Fresh)), 
-(#1:UName ; #0:UName ; n(#1:UName, #2:Fresh)), 
+(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh)))), 
-(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh)))), 
+(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)))), 
-(e(mkey(#1:UName, s), #1:UName ; #0:UName ; n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)) ; seskey(#1:UName, #0:UName, n(s, #4:Fresh))) ; e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ;
    seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)))), 
+(e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh)))), 
-(e(seskey(#1:UName, #0:UName, n(s, #4:Fresh)), n(#1:UName, #2:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; seskey(#1:UName, #0:UName, n(s, #3:Fresh))))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {1}) . 4 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey), 
   +(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #5:Fresh) ; #2:Sessionkey)), 
   +(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #5:Fresh) ; #2:Sessionkey)), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #5:Fresh) ; #2:Sessionkey)), 
   -(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #5:Fresh) ; #2:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) !inI,
(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #5:Fresh) ; #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #5:Fresh) ; #2:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
(#0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) inI,
inst(#0:UName),
inst(#2:Sessionkey),
inst(#3:Sessionkey)
|| 
-(mkey(#0:UName, s)), 
-(#0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey), 
+(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #5:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #4:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #5:Fresh) ; #2:Sessionkey)), 
+(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #5:Fresh) ; #2:Sessionkey)), 
-(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #5:Fresh) ; #2:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {1}) . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   -(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(
    #1:UName, #6:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(#1:UName, #6:Fresh) ; #3:Sessionkey)), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(
    #1:UName, #6:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(#1:UName, #6:Fresh) ; #3:Sessionkey)), nil] )
|| 
e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(#1:UName, #6:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(
    #1:UName, #6:Fresh) ; #3:Sessionkey)) !inI,
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)) inI,
inst(#1:UName),
inst(#3:Sessionkey),
inst(#4:Sessionkey)
|| 
-(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(
    #1:UName, #6:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #1:UName ; n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; n(#1:UName, #5:Fresh) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(
    #1:UName, #6:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(#1:UName, #6:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#1:UName, s), #1:UName ; #1:UName ; t(#1:UName, #6:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {1}) . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; #4:Msg), 
   +(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #6:Fresh) ; #2:Sessionkey)), 
   +(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; #2:Sessionkey)), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #6:Fresh) ; #2:Sessionkey)), 
   -(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; #2:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) !inI,
(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #6:Fresh) ; #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; #4:Msg) inI,
inst(#0:UName),
inst(#2:Sessionkey),
inst(#3:Sessionkey)
|| 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; #4:Msg), 
+(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #6:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #0:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; n(#0:UName, #5:Fresh) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(
    #0:UName, #6:Fresh) ; #2:Sessionkey)), 
+(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; #2:Sessionkey)), 
-(e(#3:Sessionkey, n(#0:UName, #1:Fresh) ; #2:Sessionkey) ; e(mkey(#0:UName, s), #0:UName ; #0:UName ; t(#0:UName, #6:Fresh) ; #2:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {2}) . 6 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey), 
   +(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   -(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #6:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
   +(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)), nil]  & 
:: #7:Fresh,#8:Fresh ::
[ nil | 
   -(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
   -(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) !inI,
(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) inI,
(#1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) inI,
inst(#2:UName),
inst(#6:UName),
inst(#4:Sessionkey),
inst(#5:Sessionkey),
e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) != e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey), 
+(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #6:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #7:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #8:Fresh) ; #4:Sessionkey)), 
+(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey)), 
-(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #8:Fresh) ; #4:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {2}) . 7 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
mkey(#0:UName, s) inI,
e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) inI,
(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) inI,
inst(#1:UName),
inst(#0:UName),
inst(#3:Sessionkey),
inst(#4:Sessionkey),
e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) != e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)
|| 
-(mkey(#0:UName, s)), 
-(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#5:UName, #6:Fresh) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(
    #5:UName, #8:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#5:UName, s), #7:UName ; #5:UName ; t(#5:UName, #8:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {2}) . 8 > (
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
   -(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
   +(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
   +(e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(#3:UName ; #7:UName ; n(#3:UName, #4:Fresh)) | 
   -(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; n(#1:UName, #8:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(
    #1:UName, #9:Fresh) ; #5:Sessionkey)), 
   +(e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #9:Fresh) ; #5:Sessionkey)), nil]  & 
:: #8:Fresh,#9:Fresh ::
[ nil | 
   -(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
   +(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; n(#1:UName, #8:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(
    #1:UName, #9:Fresh) ; #5:Sessionkey)), 
   -(e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #9:Fresh) ; #5:Sessionkey)), nil] )
|| 
e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) !inI,
(e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #9:Fresh) ; #5:Sessionkey)) !inI,
(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)) !inI,
(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; n(#1:UName, #8:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(
    #1:UName, #9:Fresh) ; #5:Sessionkey)) !inI,
e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) inI,
(#0:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)) inI,
inst(#3:UName),
inst(#7:UName),
inst(#5:Sessionkey),
inst(#6:Sessionkey),
e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) != e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)
|| 
-(#0:Msg ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
+(e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
-(e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
-(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
+(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
-(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey)), 
+(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; n(#1:UName, #8:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(
    #1:UName, #9:Fresh) ; #5:Sessionkey)), 
-(e(mkey(#3:UName, s), #3:UName ; #7:UName ; n(#3:UName, #4:Fresh) ; #5:Sessionkey ; #6:Sessionkey) ; e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; n(#1:UName, #8:Fresh) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(
    #1:UName, #9:Fresh) ; #5:Sessionkey)), 
+(e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #9:Fresh) ; #5:Sessionkey)), 
-(e(#6:Sessionkey, n(#3:UName, #4:Fresh) ; #5:Sessionkey) ; e(mkey(#1:UName, s), #2:UName ; #1:UName ; t(#1:UName, #9:Fresh) ; #5:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {2}) . 9 > (
:: nil ::
[ nil | 
   -(e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #3:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #4:Sessionkey)), 
   +(e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #4:Sessionkey)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #4:Sessionkey)), 
   -(e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #4:Sessionkey)), nil] )
|| 
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) !inI,
(e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #4:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #4:Sessionkey)) !inI,
e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) inI,
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)) inI,
inst(#1:UName),
inst(#2:UName),
inst(#4:Sessionkey),
inst(#5:Sessionkey),
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) != e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)
|| 
-(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #4:Sessionkey)), 
+(e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #4:Sessionkey)), 
-(e(#5:Sessionkey, n(#1:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #4:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {2}) . 10 > (
:: nil ::
[ nil | 
   -(e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; #5:Msg), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #3:Sessionkey)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #3:Sessionkey)), 
   -(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #3:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #3:Sessionkey)) !inI,
e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; #5:Msg) inI,
inst(#1:UName),
inst(#0:UName),
inst(#3:Sessionkey),
inst(#4:Sessionkey),
e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) != e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)
|| 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; #5:Msg), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; n(#6:UName, #7:Fresh) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(
    #6:UName, #9:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#0:UName, #2:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #8:UName ; #6:UName ; t(#6:UName, #9:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . (4 {2}) . 11 > (
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   -(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; #6:Msg), 
   +(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #7:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #8:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #9:Fresh) ; #4:Sessionkey)), 
   +(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #9:Fresh) ; #4:Sessionkey)), nil]  & 
:: #8:Fresh,#9:Fresh ::
[ nil | 
   -(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #8:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #9:Fresh) ; #4:Sessionkey)), 
   -(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #9:Fresh) ; #4:Sessionkey)), nil] )
|| 
e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) !inI,
(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #9:Fresh) ; #4:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #8:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #9:Fresh) ; #4:Sessionkey)) !inI,
e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) inI,
(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; #6:Msg) inI,
inst(#2:UName),
inst(#7:UName),
inst(#4:Sessionkey),
inst(#5:Sessionkey),
e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) != e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)
|| 
-(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; #6:Msg), 
+(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #8:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #9:Fresh) ; #4:Sessionkey)), 
-(e(mkey(#2:UName, s), #2:UName ; #7:UName ; n(#2:UName, #3:Fresh) ; #4:Sessionkey ; #5:Sessionkey) ; e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; n(#0:UName, #8:Fresh) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(
    #0:UName, #9:Fresh) ; #4:Sessionkey)), 
+(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #9:Fresh) ; #4:Sessionkey)), 
-(e(#5:Sessionkey, n(#2:UName, #3:Fresh) ; #4:Sessionkey) ; e(mkey(#0:UName, s), #1:UName ; #0:UName ; t(#0:UName, #9:Fresh) ; #4:Sessionkey))
|| 
nil
|| 
nil)
< 1 . 6 . 7 . 9 . 15 > (
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: #9:Fresh ::
[ nil, 
   +(#10:UName ; #11:UName ; n(#10:UName, #9:Fresh)) | 
   -(e(mkey(#10:UName, s), #10:UName ; #11:UName ; n(#10:UName, #9:Fresh) ; #12:Sessionkey ; #13:Sessionkey) ; e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; #14:Nonce ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
   +(e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), nil]  & 
:: #8:Fresh,#15:Fresh ::
[ nil, 
   -(#16:Msg ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
   +(#16:Msg ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; n(#6:UName, #15:Fresh) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) | 
   -(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), nil] )
|| 
(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)) !inI,
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) inI,
(e(mkey(#10:UName, s), #10:UName ; #11:UName ; n(#10:UName, #9:Fresh) ; #12:Sessionkey ; #13:Sessionkey) ; e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; #14:Nonce ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)) inI,
inst(#2:UName),
inst(#12:Sessionkey)
|| 
-(e(mkey(#10:UName, s), #10:UName ; #11:UName ; n(#10:UName, #9:Fresh) ; #12:Sessionkey ; #13:Sessionkey) ; e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; #14:Nonce ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
+(e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(#13:Sessionkey, n(#10:UName, #9:Fresh) ; #12:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ; #3:Sessionkey ; #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; #5:Nonce ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName,
    #8:Fresh) ; #3:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #0:Fresh) ; #3:Sessionkey) ; e(mkey(#6:UName, s), #7:UName ; #6:UName ; t(#6:UName, #8:Fresh) ; #3:Sessionkey))
|| 
nil
|| 
nil
Maude> Bye.
Wed Dec  5 11:58:08 CET 2012
Santiagos-MacBook-Pro:prototype-20121204 sescobar$ 
