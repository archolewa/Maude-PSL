ender:prototype-20121204 sescobar$ examples/ltv-C-wep2-asy-command 
Wed Dec  5 10:29:07 CET 2012
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude alpha96b built: Nov  9 2012 18:20:01
	    Copyright 1997-2011 SRI International
		   Wed Dec  5 10:29:07 2012
Maude> 
	    Maude-NPA Version:  Dec 4 2012 with direct composition
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           for getting the unification algorithm
 red genGrammars .            for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern X
 red summary(X,Y).            for summary of analysis steps
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 31217883 in 41707ms cpu (42062ms real) (748498 rewrites/second)
result GrammarList: (errorNoHeuristicApplied {
grl #0:Vector inL => pair(#0:Vector, #1:Msg) inL .,
	'#1:Msg <- '_*_['`[_`,_`]['n['#3:Name,'#5:Fresh],'c['n['#3:Name,'#5:Fresh]]],'rc4['#0:Vector,'k['#3:Name,'#4:Name]]],
grl #0:Vector inL => emptyMsgSet inL .,none,
grl (#2:Msg * #0:Vector) notInI, (#0:Vector notLeq #3:Name), (#0:Vector notLeq c(#4:Nonce)), (#0:Vector notLeq k(#5:Name, i)), (#0:Vector notLeq rc4(#6:Vector, k(#7:Name, #8:Name))), (#0:Vector notLeq pair(#9:Vector, rc4(#9:Vector, k(
    #10:Name, #11:Name)) * [n(#10:Name, #12:Fresh),c(n(#10:Name, #12:Fresh))])), (#2:Msg * #0:Vector) notLeq #13:Msg * #14:Msg => emptyMsgSet inL .} usingGrammar 
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Vector inL => pair(#0:Vector, #1:Msg) inL . ; 
grl #0:Nonce inL => [#0:Nonce,c(#1:Nonce)] inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq #1:Name), (#0:Msg notLeq c(#2:Nonce)), (#0:Msg notLeq k(#3:Name, i)), (#0:Msg notLeq rc4(#4:Vector, k(#5:Name, #6:Name))), (#0:Msg notLeq pair(#7:Vector, rc4(#7:Vector, k(#8:Name, #9:Name)) * [n(
    #8:Name, #10:Fresh),c(n(#8:Name, #10:Fresh))])), #0:Msg notLeq #11:Msg * #12:Msg => (#0:Msg * #13:Msg) inL . ; 
grl (#1:Msg * #0:Msg) notInI, (#0:Msg notLeq #2:Name), (#0:Msg notLeq c(#3:Nonce)), (#0:Msg notLeq k(#4:Name, i)), (#0:Msg notLeq rc4(#5:Vector, k(#6:Name, #7:Name))), (#0:Msg notLeq pair(#8:Vector, rc4(#8:Vector, k(#9:Name, #10:Name))
    * [n(#9:Name, #11:Fresh),c(n(#9:Name, #11:Fresh))])), (#1:Msg * #0:Msg) notLeq #12:Msg * #13:Msg => #0:Msg inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg * #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg * #2:Msg) inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Nonce notInI, #0:Nonce notLeq n(#1:Name, #2:Fresh) => [#0:Nonce,#3:CheckNonce] inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:CheckNonce notInI, #0:CheckNonce notLeq c(n(#1:Name, #2:Fresh)) => [#3:Nonce,#0:CheckNonce] inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl [#0:Nonce,#1:CheckNonce] notLeq [n(#2:Name, #3:Fresh),c(n(#2:Name, #3:Fresh))] => [#0:Nonce,#1:CheckNonce] inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Nonce notInI => c(#0:Nonce) inL .)
| (errorNoHeuristicApplied {
grl empty => c(#1:Nonce) inL .,none,
grl empty => #1:Nonce inL .,none,
grl empty => #1:Nonce inL .} usingGrammar 
grl empty => c(#1:Nonce) inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl k(#0:Name, #1:Name) notLeq k(#2:Name, i) => k(#0:Name, #1:Name) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq n(#3:Name, #4:Fresh) => n(#0:Name, #1:Fresh) inL . inGrammar 
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Nonce inL => [#0:Nonce,c(#1:Nonce)] inL . ; 
grl n(#0:Name, #1:Fresh) notLeq n(#3:Name, #4:Fresh) => n(#0:Name, #1:Fresh) inL .)
| (errorNoHeuristicApplied {
grl #50:Vector notInI => pair(#50:Vector, #60:Msg) inL .,
	'#60:Msg <- '_*_['`[_`,_`]['n['#62:Name,'#64:Fresh],'c['n['#62:Name,'#64:Fresh]]],'rc4['#50:Vector,'k['#62:Name,'#63:Name]]],
grl #50:Vector notInI => emptyMsgSet inL .,none,
grl #50:Vector notInI => emptyMsgSet inL .} usingGrammar 
grl #50:Vector notInI => pair(#50:Vector, #60:Msg) inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Msg notInI, #0:Msg notLeq rc4(#1:Vector, k(#2:Name, #3:Name)) * [n(#2:Name, #4:Fresh),c(n(#2:Name, #4:Fresh))] => pair(#5:Vector, #0:Msg) inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl pair(#0:Vector, #1:Msg) notLeq pair(#2:Vector, rc4(#2:Vector, k(#3:Name, #4:Name)) * [n(#3:Name, #5:Fresh),c(n(#3:Name, #5:Fresh))]) => pair(#0:Vector, #1:Msg) inL .)
| (errorNoHeuristicApplied {
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL .,
	'#0:Msg <- '_*_['`[_`,_`]['n['#3:Name,'#5:Fresh],'c['n['#3:Name,'#5:Fresh]]],'rc4['#1:Vector,'k['#3:Name,'#4:Name]]],
grl (rc4(#1:Vector, k(#3:Name, #4:Name)) * [n(#3:Name, #5:Fresh),c(n(#3:Name, #5:Fresh))]) inL => emptyMsgSet inL .,none,
grl #1:Vector notInI => emptyMsgSet inL .} usingGrammar 
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Vector notInI => rc4(#0:Vector, #1:Key) inL .)
| (
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl #0:Key notInI, #0:Key notLeq k(#1:Name, #2:Name) => rc4(#3:Vector, #0:Key) inL .)
| 
grl #0:Msg inL => pair(#1:Vector, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg * #0:Msg) inL . ; 
grl rc4(#0:Vector, #1:Key) notLeq rc4(#2:Vector, k(#3:Name, #4:Name)) => rc4(#0:Vector, #1:Key) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3216 in 39ms cpu (39ms real) (82294 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, r:Fresh),c(n(a, r:Fresh))])) | nil] 
|| 
n(a, r:Fresh) inI
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 256420 in 569ms cpu (572ms real) (450472 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 678661 in 1419ms cpu (1426ms real) (478189 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 607819 in 1213ms cpu (1220ms real) (500926 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 818096 in 1429ms cpu (1443ms real) (572363 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 2231775 in 4116ms cpu (4145ms real) (542098 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 3603235 in 14298ms cpu (14353ms real) (252003 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 4530303 in 11955ms cpu (12040ms real) (378920 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(8) .
rewrites: 3377703 in 8837ms cpu (8880ms real) (382202 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(9) .
rewrites: 838631 in 1293ms cpu (1303ms real) (648233 rewrites/second)
result Summary: States>> 3 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(10) .
rewrites: 1070024 in 1849ms cpu (1859ms real) (578402 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(11) .
rewrites: 609 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(12) .
rewrites: 576 in 0ms cpu (0ms real) (2909090 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(13) .
rewrites: 576 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(14) .
rewrites: 576 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(15) .
rewrites: 576 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(16) .
rewrites: 576 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(17) .
rewrites: 576 in 0ms cpu (0ms real) (3113513 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(18) .
rewrites: 576 in 2ms cpu (2ms real) (255206 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(19) .
rewrites: 576 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(20) .
rewrites: 576 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(21) .
rewrites: 576 in 0ms cpu (0ms real) (44307692 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 > (
:: nil ::
[ nil | 
   -([n(a, #0:Fresh),c(#1:Nonce)]), 
   +(n(a, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])) | nil] )
|| 
n(a, #0:Fresh) !inI,
[n(a, #0:Fresh),c(#1:Nonce)] inI
|| 
-([n(a, #0:Fresh),c(#1:Nonce)]), 
+(n(a, #0:Fresh))
|| 
nil
|| 
nil)
< 1 . (3 [2]) > (
:: nil ::
[ nil | 
   -(%5:Msg), 
   -(%5:Msg * n(a, #1:Fresh)), 
   +(n(a, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] )
|| 
n(a, #1:Fresh) !inI,
(%5:Msg * n(a, #1:Fresh)) inI,
irr(%5:Msg * n(a, #1:Fresh)),
inst(%5:Msg)
|| 
-(%5:Msg), 
-(%5:Msg * n(a, #1:Fresh)), 
+(n(a, #1:Fresh))
|| 
ghost( %5:Msg,
   :: nil ::
   [ nil | 
      -(%5:Msg), 
      -(%5:Msg * n(a, #1:Fresh)), 
      +(n(a, #1:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] ,    
   n(a, #1:Fresh) !inI,
   (%5:Msg * n(a, #1:Fresh)) inI,
   irr(%5:Msg * n(a, #1:Fresh)),
   inst(%5:Msg),    
   -(%5:Msg), 
   -(%5:Msg * n(a, #1:Fresh)), 
   +(n(a, #1:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 1 . (3 [2]) > (
:: nil ::
[ nil | 
   -(%7:Msg), 
   -(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]), 
   +([n(a, #1:Fresh),c(#2:Nonce)]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #1:Fresh),c(#2:Nonce)]), 
   +(n(a, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] )
|| 
[n(a, #1:Fresh),c(#2:Nonce)] !inI,
n(a, #1:Fresh) !inI,
(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]) inI,
irr(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]),
inst(%7:Msg),
inst(#2:Nonce)
|| 
-(%7:Msg), 
-(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]), 
+([n(a, #1:Fresh),c(#2:Nonce)]), 
-([n(a, #1:Fresh),c(#2:Nonce)]), 
+(n(a, #1:Fresh))
|| 
ghost( %7:Msg,
   :: nil ::
   [ nil | 
      -(%7:Msg), 
      -(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]), 
      +([n(a, #1:Fresh),c(#2:Nonce)]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #1:Fresh),c(#2:Nonce)]), 
      +(n(a, #1:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] ,    
   [n(a, #1:Fresh),c(#2:Nonce)] !inI,
   n(a, #1:Fresh) !inI,
   (%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]) inI,
   irr(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]),
   inst(%7:Msg),
   inst(#2:Nonce),    
   -(%7:Msg), 
   -(%7:Msg * [n(a, #1:Fresh),c(#2:Nonce)]), 
   +([n(a, #1:Fresh),c(#2:Nonce)]), 
   -([n(a, #1:Fresh),c(#2:Nonce)]), 
   +(n(a, #1:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystem: < 1 . 1 . (3 [2]) . 3 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]), 
   +([n(a, #2:Fresh),c(#3:Nonce)]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(#3:Nonce)]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(#0:Vector, #1:Msg * [n(a, #2:Fresh),c(#3:Nonce)])), 
   +(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])) | nil] )
|| 
[n(a, #2:Fresh),c(#3:Nonce)] !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]) !inI,
pair(#0:Vector, #1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]) inI,
irr(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]),
inst(#1:Msg),
inst(#3:Nonce)
|| 
-(pair(#0:Vector, #1:Msg * [n(a, #2:Fresh),c(#3:Nonce)])), 
+(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]), 
-(#1:Msg), 
-(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]), 
+([n(a, #2:Fresh),c(#3:Nonce)]), 
-([n(a, #2:Fresh),c(#3:Nonce)]), 
+(n(a, #2:Fresh))
|| 
ghost( #1:Msg,
   :: nil ::
   [ nil | 
      -(#1:Msg), 
      -(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]), 
      +([n(a, #2:Fresh),c(#3:Nonce)]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #2:Fresh),c(#3:Nonce)]), 
      +(n(a, #2:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])) | nil] ,    
   [n(a, #2:Fresh),c(#3:Nonce)] !inI,
   n(a, #2:Fresh) !inI,
   (#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]) inI,
   irr(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]),
   inst(#1:Msg),
   inst(#3:Nonce),    
   -(#1:Msg), 
   -(#1:Msg * [n(a, #2:Fresh),c(#3:Nonce)]), 
   +([n(a, #2:Fresh),c(#3:Nonce)]), 
   -([n(a, #2:Fresh),c(#3:Nonce)]), 
   +(n(a, #2:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 4 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
   +([n(a, #3:Fresh),c(#4:Nonce)]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(#4:Nonce)]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
   +(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg * pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
   -(#0:Msg), 
   +(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])) | nil] )
|| 
[n(a, #3:Fresh),c(#4:Nonce)] !inI,
pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]) !inI,
(#0:Msg * pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])) inI,
irr(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]),
inst(#2:Msg),
inst(#4:Nonce)
|| 
-(#0:Msg * pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
-(#0:Msg), 
+(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
-(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
+(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
-(#2:Msg), 
-(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
+([n(a, #3:Fresh),c(#4:Nonce)]), 
-([n(a, #3:Fresh),c(#4:Nonce)]), 
+(n(a, #3:Fresh))
|| 
ghost( #0:Msg,
   :: nil ::
   [ nil | 
      -(#2:Msg), 
      -(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
      +([n(a, #3:Fresh),c(#4:Nonce)]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #3:Fresh),c(#4:Nonce)]), 
      +(n(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
      +(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), nil]  & 
   :: nil ::
   [ nil | 
      -(#0:Msg * pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
      -(#0:Msg), 
      +(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])) | nil] ,    
   [n(a, #3:Fresh),c(#4:Nonce)] !inI,
   pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]) !inI,
   n(a, #3:Fresh) !inI,
   (#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]) !inI,
   (#0:Msg * pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])) inI,
   irr(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]),
   inst(#2:Msg),
   inst(#4:Nonce),    
   -(#0:Msg * pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
   -(#0:Msg), 
   +(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
   -(pair(#1:Vector, #2:Msg * [n(a, #3:Fresh),c(#4:Nonce)])), 
   +(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
   -(#2:Msg), 
   -(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
   +([n(a, #3:Fresh),c(#4:Nonce)]), 
   -([n(a, #3:Fresh),c(#4:Nonce)]), 
   +(n(a, #3:Fresh)),    
   nil ),

ghost( #2:Msg,
   :: nil ::
   [ nil | 
      -(#2:Msg), 
      -(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
      +([n(a, #3:Fresh),c(#4:Nonce)]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #3:Fresh),c(#4:Nonce)]), 
      +(n(a, #3:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])) | nil] ,    
   [n(a, #3:Fresh),c(#4:Nonce)] !inI,
   n(a, #3:Fresh) !inI,
   (#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]) inI,
   irr(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]),
   inst(#2:Msg),
   inst(#4:Nonce),    
   -(#2:Msg), 
   -(#2:Msg * [n(a, #3:Fresh),c(#4:Nonce)]), 
   +([n(a, #3:Fresh),c(#4:Nonce)]), 
   -([n(a, #3:Fresh),c(#4:Nonce)]), 
   +(n(a, #3:Fresh)),    
   nil )
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 > (
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
   +([n(a, #0:Fresh),c(n(a, #0:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
   +(n(a, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])) | nil] )
|| 
[n(a, #0:Fresh),c(n(a, #0:Fresh))] !inI,
n(a, #0:Fresh) !inI,
rc4(v, k(a, b)) inI,
(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) inI,
irr(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])
|| 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
+([n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
-([n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
+(n(a, #0:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 > (
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(#0:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] )
|| 
[n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
n(a, #1:Fresh) !inI,
(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
rc4(v, k(a, b)) inI,
pair(#0:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) inI,
irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])
|| 
-(pair(#0:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
-([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+(n(a, #1:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . (5 [2]) > (
:: nil ::
[ nil | 
   -(%3:Msg), 
   -(%3:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
n(a, #1:Fresh) !inI,
(%3:Msg * rc4(v, k(a, b))) inI,
(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) inI,
irr(%3:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]),
inst(%3:Msg)
|| 
-(%3:Msg), 
-(%3:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
-([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+(n(a, #1:Fresh))
|| 
ghost( %3:Msg,
   :: nil ::
   [ nil | 
      -(%3:Msg), 
      -(%3:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
      +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
      +(n(a, #1:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
   n(a, #1:Fresh) !inI,
   (%3:Msg * rc4(v, k(a, b))) inI,
   (rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) inI,
   irr(%3:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]),
   inst(%3:Msg),    
   -(%3:Msg), 
   -(%3:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 > (
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
   +([n(a, #0:Fresh),c(n(a, #0:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
[n(a, #0:Fresh),c(n(a, #0:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #0:Fresh) !inI,
(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
rc4(v, k(a, b)) inI,
irr(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])
|| 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
+([n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
-([n(a, #0:Fresh),c(n(a, #0:Fresh))]), 
+(n(a, #0:Fresh))
|| 
nil
|| 
nil)
(< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . (5 [2]) > (
:: nil ::
[ nil | 
   -(%3:Msg), 
   -(%3:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(#2:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
n(a, #1:Fresh) !inI,
(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
pair(#2:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) inI,
(%3:Msg * rc4(v, k(a, b))) inI,
irr(%3:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]),
inst(%3:Msg)
|| 
-(%3:Msg), 
-(%3:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
-(pair(#2:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
-([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+(n(a, #1:Fresh))
|| 
ghost( %3:Msg,
   :: nil ::
   [ nil | 
      -(%3:Msg), 
      -(%3:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
      +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
      +(n(a, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(#2:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
      +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])) | nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
   n(a, #1:Fresh) !inI,
   (rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
   pair(#2:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) inI,
   (%3:Msg * rc4(v, k(a, b))) inI,
   irr(%3:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]),
   inst(%3:Msg),    
   -(%3:Msg), 
   -(%3:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   -(pair(#2:Vector, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)),    
   nil )
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . (5 [2] {1}) . 3 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(#0:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])) | nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
pair(#0:Vector, #1:Msg * rc4(v, k(a, b))) inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg),
(#1:Msg * rc4(v, k(a, b))) != rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]
|| 
-(pair(#0:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
ghost( #1:Msg,
   :: nil ::
   [ nil | 
      -(#1:Msg), 
      -(#1:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
      +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
      +(n(a, #2:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])) | nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
   n(a, #2:Fresh) !inI,
   (#1:Msg * rc4(v, k(a, b))) inI,
   (rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) inI,
   irr(#1:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
   inst(#1:Msg),    
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) > (
:: nil ::
[ nil | 
   -(%3:Msg), 
   -(%3:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
n(a, #1:Fresh) !inI,
(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
(%3:Msg * rc4(v, k(a, b))) inI,
irr(%3:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]),
inst(%3:Msg)
|| 
-(%3:Msg), 
-(%3:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
-([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
+(n(a, #1:Fresh))
|| 
ghost( %3:Msg,
   :: nil ::
   [ nil | 
      -(%3:Msg), 
      -(%3:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
      +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
      +(n(a, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
      +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), nil]  & 
   :: #1:Fresh ::
   [ nil | 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #1:Fresh),c(n(a, #1:Fresh))] !inI,
   pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
   n(a, #1:Fresh) !inI,
   (rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]) !inI,
   (%3:Msg * rc4(v, k(a, b))) inI,
   irr(%3:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]),
   inst(%3:Msg),    
   -(%3:Msg), 
   -(%3:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   -([n(a, #1:Fresh),c(n(a, #1:Fresh))]), 
   +(n(a, #1:Fresh)),    
   nil )
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . (5 [2] {1}) . 4 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#0:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])) | nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) inI,
pair(#0:Vector, #1:Msg * rc4(v, k(a, b))) inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg),
pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) != #1:Msg * rc4(v, k(a, b))
|| 
-(pair(#0:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
-(pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
ghost( #1:Msg,
   :: nil ::
   [ nil | 
      -(#1:Msg), 
      -(#1:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
      +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
      +(n(a, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
      +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])) | nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
   n(a, #2:Fresh) !inI,
   (rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
   pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) inI,
   (#1:Msg * rc4(v, k(a, b))) inI,
   irr(#1:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
   inst(#1:Msg),    
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   -(pair(#3:Vector, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(8) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#0:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(#0:Vector, #1:Msg * rc4(v, k(a, b))) inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
-(pair(#0:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
ghost( #1:Msg,
   :: nil ::
   [ nil | 
      -(#1:Msg), 
      -(#1:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
      +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
      +(n(a, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
      +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
   :: #2:Fresh ::
   [ nil | 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
   pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
   n(a, #2:Fresh) !inI,
   (rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
   (#1:Msg * rc4(v, k(a, b))) inI,
   irr(#1:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
   inst(#1:Msg),    
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(9) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
(< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 3 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg * pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
   -(#0:Msg), 
   +(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil] )
|| 
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(#1:Vector, #2:Msg * rc4(v, k(a, b))) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
(#0:Msg * pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))) inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
-(#0:Msg * pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
-(#0:Msg), 
+(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
-(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
ghost( #0:Msg,
   :: nil ::
   [ nil | 
      -(#2:Msg), 
      -(#2:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
      +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
      +(n(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
      +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
      +(#2:Msg * rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(#0:Msg * pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
      -(#0:Msg), 
      +(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), nil]  & 
   :: #3:Fresh ::
   [ nil | 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
   pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
   pair(#1:Vector, #2:Msg * rc4(v, k(a, b))) !inI,
   n(a, #3:Fresh) !inI,
   (#2:Msg * rc4(v, k(a, b))) !inI,
   (rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
   (#0:Msg * pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))) inI,
   irr(#2:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
   inst(#2:Msg),    
   -(#0:Msg * pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
   -(#0:Msg), 
   +(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
   -(pair(#1:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)),    
   nil ),

ghost( #2:Msg,
   :: nil ::
   [ nil | 
      -(#2:Msg), 
      -(#2:Msg * rc4(v, k(a, b))), 
      +(rc4(v, k(a, b))), nil]  & 
   :: nil ::
   [ nil | 
      -(rc4(v, k(a, b))), 
      -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
      +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
   :: nil ::
   [ nil | 
      -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
      +(n(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
      +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
   :: #3:Fresh ::
   [ nil | 
      +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil] ,    
   rc4(v, k(a, b)) !inI,
   [n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
   pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
   n(a, #3:Fresh) !inI,
   (rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
   (#2:Msg * rc4(v, k(a, b))) inI,
   irr(#2:Msg * rc4(v, k(a, b))),
   irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
   inst(#2:Msg),    
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   resuscitated(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)),    
   nil )
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])) | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(10) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(11) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(12) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(13) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(14) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(15) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(16) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(17) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(18) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(19) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(20) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(21) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Msg), 
   -(#1:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +([n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
   +(n(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
   +(#1:Msg * rc4(v, k(a, b))), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#1:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #2:Fresh),c(n(a, #2:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #2:Fresh) !inI,
(#1:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]) !inI,
irr(#1:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]),
inst(#1:Msg)
|| 
generatedByIntruder(#1:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#3:Vector, #1:Msg * rc4(v, k(a, b)))), 
+(#1:Msg * rc4(v, k(a, b))), 
-(#1:Msg), 
-(#1:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
-([n(a, #2:Fresh),c(n(a, #2:Fresh))]), 
+(n(a, #2:Fresh))
|| 
nil
|| 
nil)
< 1 . 1 . (3 [2]) . 3 . 2 . 0 . 4 . 1 . (3 [2]) . 2 . 4 . 1 > (
:: nil ::
[ nil | 
   -(#2:Msg), 
   -(#2:Msg * rc4(v, k(a, b))), 
   +(rc4(v, k(a, b))), nil]  & 
:: nil ::
[ nil | 
   -(rc4(v, k(a, b))), 
   -(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +([n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
   +(n(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
   +(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), nil]  & 
:: nil ::
[ nil | 
   -(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
   +(#2:Msg * rc4(v, k(a, b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
   +(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), nil] )
|| 
#2:Msg !inI,
rc4(v, k(a, b)) !inI,
[n(a, #3:Fresh),c(n(a, #3:Fresh))] !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))]) !inI,
n(a, #3:Fresh) !inI,
(#2:Msg * rc4(v, k(a, b))) !inI,
(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]) !inI,
irr(#2:Msg * rc4(v, k(a, b))),
irr(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]),
inst(#2:Msg)
|| 
+(pair(v, rc4(v, k(a, #1:Name)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
generatedByIntruder(#2:Msg), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #0:Fresh),c(n(a, #0:Fresh))])), 
-(pair(#4:Vector, #2:Msg * rc4(v, k(a, b)))), 
+(#2:Msg * rc4(v, k(a, b))), 
-(#2:Msg), 
-(#2:Msg * rc4(v, k(a, b))), 
+(rc4(v, k(a, b))), 
+(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
-(pair(v, rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))])), 
+(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
resuscitated(rc4(v, k(a, b))), 
-(rc4(v, k(a, b))), 
-(rc4(v, k(a, b)) * [n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
-([n(a, #3:Fresh),c(n(a, #3:Fresh))]), 
+(n(a, #3:Fresh))
|| 
nil
|| 
nil
Maude> Bye.
Wed Dec  5 10:30:37 CET 2012
ender:prototype-20121204 sescobar$ 
