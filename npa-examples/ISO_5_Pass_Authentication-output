Santiagos-MacBook-Pro:prototype-20121204 sescobar$ examples/ISO_5_Pass_Authentication-command 
Wed Dec  5 10:37:41 CET 2012
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude alpha96b built: Nov  9 2012 18:20:01
	    Copyright 1997-2011 SRI International
		   Wed Dec  5 10:37:41 2012
Maude> 
	    Maude-NPA Version:  Dec 4 2012 with direct composition
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           for getting the unification algorithm
 red genGrammars .            for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern X
 red summary(X,Y).            for summary of analysis steps
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 67031926 in 93270ms cpu (93701ms real) (718685 rewrites/second)
result GrammarList: (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#9:UName, #7:UName, n(#10:UName, #11:Fresh)) ;
    #9:UName)), (#0:Msg notLeq e(mkey(s, #12:UName), #13:Nonce ; seskey(#12:UName, #14:UName, n(#15:UName, #16:Fresh)) ; #14:UName)), (#0:Msg notLeq #17:Nonce ; #18:UName ; n(#18:UName, #19:Fresh)), #0:Msg notLeq seskey(#20:UName,
    #21:UName, n(#22:UName, #23:Fresh)) => (#0:Msg ; #24:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#9:UName, #7:UName, n(#10:UName, #11:Fresh)) ;
    #9:UName)), (#0:Msg notLeq e(mkey(s, #12:UName), #13:Nonce ; seskey(#12:UName, #14:UName, n(#15:UName, #16:Fresh)) ; #14:UName)), (#0:Msg notLeq #17:Nonce ; #18:UName ; n(#18:UName, #19:Fresh)), #0:Msg notLeq seskey(#20:UName,
    #21:UName, n(#22:UName, #23:Fresh)) => (#24:UName ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#9:UName, #7:UName, n(#10:UName, #11:Fresh)) ;
    #9:UName)), (#0:Msg notLeq e(mkey(s, #12:UName), #13:Nonce ; seskey(#12:UName, #14:UName, n(#15:UName, #16:Fresh)) ; #14:UName)), (#0:Msg notLeq #17:Nonce ; #18:UName ; n(#18:UName, #19:Fresh)), #0:Msg notLeq seskey(#20:UName,
    #21:UName, n(#22:UName, #23:Fresh)) => (e(mkey(s, #24:UName), n(#24:UName, #25:Fresh) ; #26:Sessionkey ; #27:UName) ; #0:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#7:UName, #9:UName, n(#10:UName, #11:Fresh)) ;
    #9:UName)), (#0:Msg notLeq #12:UName ; n(#12:UName, #13:Fresh)), (#0:Msg notLeq #14:Nonce ; #15:UName ; n(#15:UName, #16:Fresh)), (#0:Msg notLeq seskey(#17:UName, #18:UName, n(#19:UName, #20:Fresh)) ; #17:UName), #0:Msg notLeq
    seskey(#21:UName, #22:UName, n(#23:UName, #24:Fresh)) ; #22:UName => (#0:Msg ; n(#25:UName, #26:Fresh)) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq n(#1:UName, #2:Fresh)), (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#7:UName, #9:UName, n(#10:UName, #11:Fresh)) ;
    #9:UName)), (#0:Msg notLeq #12:UName ; n(#12:UName, #13:Fresh)), (#0:Msg notLeq #14:Nonce ; #15:UName ; n(#15:UName, #16:Fresh)), (#0:Msg notLeq seskey(#17:UName, #18:UName, n(#19:UName, #20:Fresh)) ; #17:UName), #0:Msg notLeq
    seskey(#21:UName, #22:UName, n(#23:UName, #24:Fresh)) ; #22:UName => (#25:Msg ; #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq mkey(s, #1:UName)), #0:Msg notLeq seskey(#2:UName, #3:UName, n(#4:UName, #5:Fresh)) => (#0:Msg ; #6:UName) inL . ; 
grl #0:Key notInI, (#0:Key notLeq mkey(s, #1:UName)), #0:Key notLeq seskey(#2:UName, #3:UName, n(#4:UName, #5:Fresh)) => e(#0:Key, #6:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq #1:Nonce ; seskey(#2:UName, #3:UName, n(#4:UName, #5:Fresh)) ; #2:UName), (#0:Msg notLeq #6:Nonce ; seskey(#7:UName, #8:UName, n(#9:UName, #10:Fresh)) ; #8:UName), #0:Msg notLeq n(#11:UName,
    #12:Fresh) ; #13:Nonce => e(#14:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl (mkey(#0:Name, #1:Name) notLeq mkey(i, s)), mkey(#0:Name, #1:Name) notLeq mkey(i, #2:UName) => mkey(#0:Name, #1:Name) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl mr(#0:Name, #1:Fresh) notLeq #7:Nonce => mr(#0:Name, #1:Fresh) inL . inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl mr(#0:Name, #1:Fresh) notLeq #7:Nonce => mr(#0:Name, #1:Fresh) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #7:Nonce => n(#0:Name, #1:Fresh) inL . inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq #7:Nonce => n(#0:Name, #1:Fresh) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI => p(#0:Msg) inL .)
| (
grl empty => p(#0:Msg) inL . ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Nonce notInI, #0:Nonce notLeq n(#1:UName, #2:Fresh) => seskey(#3:Name, #4:Name, #0:Nonce) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq seskey(#3:UName, #4:UName, n(#5:UName, #6:Fresh)) => seskey(#0:Name, #1:Name, #2:Nonce) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Nonce notInI => txt(#1:Name, #2:Name, #0:Nonce) inL .)
| 
grl empty => txt(#0:Name, #1:Name, #2:Nonce) inL . ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3727 in 29ms cpu (38ms real) (125395 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh,r':Fresh ::
[ nil, 
   -(a ; NA:Nonce), 
   +(a ; NA:Nonce ; b ; n(b, r':Fresh)), 
   -(e(mkey(b, s), n(b, r':Fresh) ; SK:Sessionkey ; a) ; MA:Msg), 
   +(MA:Msg ; e(SK:Sessionkey, n(b, r:Fresh) ; NA:Nonce)), 
   -(e(SK:Sessionkey, NA:Nonce ; n(b, r:Fresh))) | nil] 
|| empty
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 6605995 in 10682ms cpu (10705ms real) (618409 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 10715000 in 19416ms cpu (19498ms real) (551837 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 16755091 in 31917ms cpu (32062ms real) (524947 rewrites/second)
result Summary: States>> 15 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 49711517 in 78085ms cpu (78405ms real) (636625 rewrites/second)
result Summary: States>> 23 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 75449308 in 141710ms cpu (142439ms real) (532419 rewrites/second)
result Summary: States>> 32 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 3 > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
   +(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #2:Nonce), 
   +(a ; #2:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; #2:Nonce)) | 
   -(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil] )
|| 
e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh)) !inI,
(#0:Msg ; e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))) inI
|| 
-(#0:Msg ; e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
+(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
-(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 > (
:: nil ::
[ nil | 
   -(#0:Nonce ; n(b, #1:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #0:Nonce), 
   +(a ; #0:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
   +(#4:Msg ; e(#2:Sessionkey, n(b, #1:Fresh) ; #0:Nonce)) | 
   -(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil] )
|| 
e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)) !inI,
(#0:Nonce ; n(b, #1:Fresh)) inI
|| 
-(#0:Nonce ; n(b, #1:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), 
-(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)))
|| 
ghost( #2:Sessionkey,
   :: nil ::
   [ nil | 
      -(#0:Nonce ; n(b, #1:Fresh)), 
      -(#2:Sessionkey), 
      +(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #0:Nonce), 
      +(a ; #0:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
      +(#4:Msg ; e(#2:Sessionkey, n(b, #1:Fresh) ; #0:Nonce)) | 
      -(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)) !inI,
   (#0:Nonce ; n(b, #1:Fresh)) inI,    
   -(#0:Nonce ; n(b, #1:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), 
   -(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . 5 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg), 
   +(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
   -(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] )
|| 
e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg) inI
|| 
-(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg), 
+(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
-(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)))
|| 
nil
|| 
nil)
< 1 . 6 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) | 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) inI
|| 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#3:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
   +(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#1:Fresh ::
[ nil, 
   -(a ; n(b, #0:Fresh)), 
   +(a ; n(b, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #3:Msg), 
   +(#3:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
   -(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh)) !inI,
(#3:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #3:Msg) inI
|| 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #3:Msg), 
+(#3:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
-(#3:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
+(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(#1:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#4:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
   -(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] )
|| 
e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Nonce ; n(b, #2:Fresh)) !inI,
e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) inI
|| 
-(#0:Key), 
-(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
+(#1:Nonce ; n(b, #2:Fresh)), 
-(#1:Nonce ; n(b, #2:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
-(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
      +(#1:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Nonce ; n(b, #2:Fresh)), 
      -(#4:Sessionkey), 
      +(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #1:Nonce), 
      +(a ; #1:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
      +(#5:Msg ; e(#4:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
      -(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
   (#1:Nonce ; n(b, #2:Fresh)) !inI,
   e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(#1:Nonce ; n(b, #2:Fresh)), 
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
   -(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #4:Sessionkey,
   :: nil ::
   [ nil | 
      -(#1:Nonce ; n(b, #2:Fresh)), 
      -(#4:Sessionkey), 
      +(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #1:Nonce), 
      +(a ; #1:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
      +(#5:Msg ; e(#4:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
      -(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
   (#1:Nonce ; n(b, #2:Fresh)) inI,    
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
   -(e(#4:Sessionkey, #1:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#2:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
   -(e(mkey(b, s), n(b, #2:Fresh) ; #3:Sessionkey ; a) ; #4:Msg), 
   +(#4:Msg ; e(#3:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
|| 
e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) inI
|| 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#3:Sessionkey), 
+(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
|| 
ghost( #1:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #0:Fresh)), 
      -(#1:Nonce), 
      +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Nonce ; n(b, #0:Fresh)), 
      -(#3:Sessionkey), 
      +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
   :: #0:Fresh,#2:Fresh ::
   [ nil, 
      -(a ; #1:Nonce), 
      +(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
      -(e(mkey(b, s), n(b, #2:Fresh) ; #3:Sessionkey ; a) ; #4:Msg), 
      +(#4:Msg ; e(#3:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
      -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] ,    
   e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
   (#1:Nonce ; n(b, #0:Fresh)) !inI,
   n(b, #0:Fresh) inI,    
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))),    
   nil ),

ghost( #3:Sessionkey,
   :: nil ::
   [ nil | 
      -(#1:Nonce ; n(b, #0:Fresh)), 
      -(#3:Sessionkey), 
      +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
   :: #0:Fresh,#2:Fresh ::
   [ nil, 
      -(a ; #1:Nonce), 
      +(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
      -(e(mkey(b, s), n(b, #2:Fresh) ; #3:Sessionkey ; a) ; #4:Msg), 
      +(#4:Msg ; e(#3:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
      -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] ,    
   e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
   (#1:Nonce ; n(b, #0:Fresh)) inI,    
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))),    
   nil )
|| 
nil)
(< 1 . 6 . 3 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)) inI,
inst(#1:UName),
inst(#3:UName),
inst(#2:Sessionkey)
|| 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
< 1 . 6 . 5 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
|| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI
|| 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 18 in 0ms cpu (0ms real) (109756 rewrites/second)
result IdSystemSet: (< 1 . 3 . 1 . 2 > (
:: nil ::
[ nil | 
   -(#0:Msg), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   +(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; n(b, #3:Fresh)), 
   +(a ; n(b, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), 
   +(#0:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   -(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
#0:Msg !inI,
e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh)) !inI,
(#0:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) inI
|| 
generatedByIntruder(#0:Msg), 
-(#0:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), 
+(#0:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(#0:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
+(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 7 > (
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce) ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
   +(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#1:Fresh ::
[ nil, 
   -(a ; n(b, #0:Fresh)), 
   +(a ; n(b, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), 
   +(e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce) ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
   -(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), nil]  & 
:: #5:Fresh,#7:Fresh ::
[ nil, 
   -(#8:UName ; #6:Nonce), 
   +(#8:UName ; #6:Nonce ; #4:UName ; n(#4:UName, #7:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #7:Fresh) ; #3:Sessionkey ; #8:UName) ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), nil] )
|| 
e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh)) !inI,
(e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce) ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #7:Fresh) ; #3:Sessionkey ; #8:UName) ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)) inI
|| 
-(e(mkey(s, #4:UName), n(#4:UName, #7:Fresh) ; #3:Sessionkey ; #8:UName) ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)), 
+(e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce) ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
-(e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce) ; e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
+(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, n(b, #0:Fresh) ; n(b, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 8 > (
:: nil ::
[ nil | 
   -(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(b, #4:Fresh)), 
   +(a ; n(b, #4:Fresh) ; b ; n(b, #2:Fresh)) | 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
   +(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))) !inI,
(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)) !inI,
(a ; #1:Nonce ; b ; n(b, #2:Fresh)) inI
|| 
-(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
+(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 . 2 . 2 > (
:: nil ::
[ nil | 
   -(#2:Sessionkey), 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
   +(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) | 
   -(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) inI,
inst(#6:Sessionkey)
|| 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(#2:Sessionkey), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
+(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
-(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
|| 
ghost( #2:Sessionkey,
   :: nil ::
   [ nil | 
      -(#2:Sessionkey), 
      -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
      +(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      -(a ; n(#1:UName, #0:Fresh)), 
      +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)), 
      -(e(mkey(b, s), n(b, #5:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) | 
      -(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] ,    
   e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
   (n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
   e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) inI,    
   -(#2:Sessionkey), 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
   +(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
   -(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
   -(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      -(a ; n(#1:UName, #0:Fresh)), 
      +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)), 
      -(e(mkey(b, s), n(b, #5:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) | 
      -(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] ,    
   e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
   (n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) inI,    
   -(n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
   -(e(#6:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 2 . 4 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(#1:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg), 
   +(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
   -(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] )
|| 
e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Nonce ; n(b, #2:Fresh)) !inI,
(e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg) inI
|| 
-(e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg), 
+(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
+(#1:Nonce ; n(b, #2:Fresh)), 
-(#1:Nonce ; n(b, #2:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
-(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
      +(#1:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #1:Nonce), 
      +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
      -(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
   (#1:Nonce ; n(b, #2:Fresh)) !inI,
   e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(#1:Nonce ; n(b, #2:Fresh)), 
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#1:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #1:Nonce), 
      +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
      -(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
   (#1:Nonce ; n(b, #2:Fresh)) inI,    
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #1:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 2 . 6 > (
:: nil ::
[ nil | 
   -(#1:Key), 
   -(e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
   +(#2:Nonce ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
   +(e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Nonce ; n(b, #3:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #2:Nonce), 
   +(a ; #2:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #3:Fresh) ; #2:Nonce)) | 
   -(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil] )
|| 
e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh)) !inI,
e(#1:Key, #2:Nonce ; n(b, #3:Fresh)) !inI,
(#2:Nonce ; n(b, #3:Fresh)) !inI,
(#0:Msg ; e(#1:Key, #2:Nonce ; n(b, #3:Fresh))) inI
|| 
-(#0:Msg ; e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
+(e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
-(#1:Key), 
-(e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
+(#2:Nonce ; n(b, #3:Fresh)), 
-(#2:Nonce ; n(b, #3:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
-(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh)))
|| 
ghost( #1:Key,
   :: nil ::
   [ nil | 
      -(#1:Key), 
      -(e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
      +(#2:Nonce ; n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#2:Nonce ; n(b, #3:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #2:Nonce), 
      +(a ; #2:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #3:Fresh) ; #2:Nonce)) | 
      -(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil] ,    
   e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh)) !inI,
   (#2:Nonce ; n(b, #3:Fresh)) !inI,
   e(#1:Key, #2:Nonce ; n(b, #3:Fresh)) inI,    
   -(#1:Key), 
   -(e(#1:Key, #2:Nonce ; n(b, #3:Fresh))), 
   +(#2:Nonce ; n(b, #3:Fresh)), 
   -(#2:Nonce ; n(b, #3:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
   -(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#2:Nonce ; n(b, #3:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #2:Nonce), 
      +(a ; #2:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #3:Fresh) ; #2:Nonce)) | 
      -(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil] ,    
   e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh)) !inI,
   (#2:Nonce ; n(b, #3:Fresh)) inI,    
   -(#2:Nonce ; n(b, #3:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
   -(e(#5:Sessionkey, #2:Nonce ; n(b, #3:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Nonce ; n(b, #0:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh,#2:Fresh ::
[ nil, 
   -(a ; #3:Nonce), 
   +(a ; #3:Nonce ; b ; n(b, #2:Fresh)), 
   -(e(mkey(b, s), n(b, #2:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#4:Sessionkey, n(b, #0:Fresh) ; #3:Nonce)) | 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), nil] )
|| 
n(b, #0:Fresh) !inI,
e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh)) !inI,
(#3:Nonce ; n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #1:Msg) inI
|| 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
-(#3:Nonce), 
+(#3:Nonce ; n(b, #0:Fresh)), 
-(#3:Nonce ; n(b, #0:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), 
-(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh)))
|| 
ghost( #3:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #0:Fresh)), 
      -(#3:Nonce), 
      +(#3:Nonce ; n(b, #0:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#3:Nonce ; n(b, #0:Fresh)), 
      -(#4:Sessionkey), 
      +(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), nil]  & 
   :: #0:Fresh,#2:Fresh ::
   [ nil, 
      -(a ; #3:Nonce), 
      +(a ; #3:Nonce ; b ; n(b, #2:Fresh)), 
      -(e(mkey(b, s), n(b, #2:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
      +(#5:Msg ; e(#4:Sessionkey, n(b, #0:Fresh) ; #3:Nonce)) | 
      -(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), nil] ,    
   e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh)) !inI,
   (#3:Nonce ; n(b, #0:Fresh)) !inI,
   n(b, #0:Fresh) inI,    
   -(n(b, #0:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #0:Fresh)), 
   -(#3:Nonce ; n(b, #0:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))),    
   nil ),

ghost( #4:Sessionkey,
   :: nil ::
   [ nil | 
      -(#3:Nonce ; n(b, #0:Fresh)), 
      -(#4:Sessionkey), 
      +(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), nil]  & 
   :: #0:Fresh,#2:Fresh ::
   [ nil, 
      -(a ; #3:Nonce), 
      +(a ; #3:Nonce ; b ; n(b, #2:Fresh)), 
      -(e(mkey(b, s), n(b, #2:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
      +(#5:Msg ; e(#4:Sessionkey, n(b, #0:Fresh) ; #3:Nonce)) | 
      -(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), nil] ,    
   e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh)) !inI,
   (#3:Nonce ; n(b, #0:Fresh)) inI,    
   -(#3:Nonce ; n(b, #0:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))), 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #0:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 > (
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Nonce ; n(b, #1:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#2:Fresh ::
[ nil, 
   -(a ; #3:Nonce), 
   +(a ; #3:Nonce ; b ; n(b, #2:Fresh)), 
   -(e(mkey(b, s), n(b, #2:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#4:Sessionkey, n(b, #1:Fresh) ; #3:Nonce)) | 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil] )
|| 
n(b, #1:Fresh) !inI,
e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)) !inI,
(#3:Nonce ; n(b, #1:Fresh)) !inI,
(#0:Msg ; n(b, #1:Fresh)) inI
|| 
-(#0:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(#3:Nonce), 
+(#3:Nonce ; n(b, #1:Fresh)), 
-(#3:Nonce ; n(b, #1:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), 
-(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)))
|| 
ghost( #3:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      -(#3:Nonce), 
      +(#3:Nonce ; n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#3:Nonce ; n(b, #1:Fresh)), 
      -(#4:Sessionkey), 
      +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#2:Fresh ::
   [ nil, 
      -(a ; #3:Nonce), 
      +(a ; #3:Nonce ; b ; n(b, #2:Fresh)), 
      -(e(mkey(b, s), n(b, #2:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
      +(#5:Msg ; e(#4:Sessionkey, n(b, #1:Fresh) ; #3:Nonce)) | 
      -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)) !inI,
   (#3:Nonce ; n(b, #1:Fresh)) !inI,
   n(b, #1:Fresh) inI,    
   -(n(b, #1:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #1:Fresh)), 
   -(#3:Nonce ; n(b, #1:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))),    
   nil ),

ghost( #4:Sessionkey,
   :: nil ::
   [ nil | 
      -(#3:Nonce ; n(b, #1:Fresh)), 
      -(#4:Sessionkey), 
      +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#2:Fresh ::
   [ nil, 
      -(a ; #3:Nonce), 
      +(a ; #3:Nonce ; b ; n(b, #2:Fresh)), 
      -(e(mkey(b, s), n(b, #2:Fresh) ; #4:Sessionkey ; a) ; #5:Msg), 
      +(#5:Msg ; e(#4:Sessionkey, n(b, #1:Fresh) ; #3:Nonce)) | 
      -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)) !inI,
   (#3:Nonce ; n(b, #1:Fresh)) inI,    
   -(#3:Nonce ; n(b, #1:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 4 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
inst(#0:UName),
inst(#3:UName),
inst(#2:Sessionkey)
|| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 > (
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) inI,
inst(#1:UName)
|| 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 5 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #4:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
|| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #4:Msg) inI
|| 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #4:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #5:UName) ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 > (
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
   -(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
   +(e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(#3:UName ; n(#3:UName, #4:Fresh)) | 
   -(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
   +(e(#1:Sessionkey, n(#3:UName, #4:Fresh) ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#3:UName, #4:Fresh)), 
   +(a ; n(#3:UName, #4:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #1:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))) | 
   -(e(#1:Sessionkey, n(#3:UName, #4:Fresh) ; n(b, #2:Fresh))), nil] )
|| 
e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh)) !inI,
e(#1:Sessionkey, n(#3:UName, #4:Fresh) ; n(b, #2:Fresh)) !inI,
(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))) !inI,
e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName) inI,
(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))) inI
|| 
-(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
+(e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
-(e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
-(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName)), 
+(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
-(e(mkey(s, #3:UName), n(#3:UName, #4:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #2:Fresh) ; n(#3:UName, #4:Fresh))), 
+(e(#1:Sessionkey, n(#3:UName, #4:Fresh) ; n(b, #2:Fresh))), 
-(e(#1:Sessionkey, n(#3:UName, #4:Fresh) ; n(b, #2:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 9 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) | 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI
|| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 10 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) | 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg) inI
|| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
< 1 . 6 . 5 . 13 > (
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) | 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) inI,
(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) inI
|| 
-(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 3 . 1 . 2 . 3 > (
:: nil ::
[ nil | 
   -(#4:Msg), 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   +(e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), nil]  & 
:: #0:Fresh,#3:Fresh ::
[ nil, 
   -(a ; n(b, #3:Fresh)), 
   +(a ; n(b, #3:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #4:Msg), 
   +(#4:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   -(e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
#4:Msg !inI,
e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh)) !inI,
e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) !inI,
(#4:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #4:Msg) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg) inI
|| 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
generatedByIntruder(#4:Msg), 
-(#4:Msg), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #4:Msg), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #4:Msg), 
+(#4:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(#4:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
+(e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(#1:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 2 . 6 > (
:: nil ::
[ nil | 
   -(#4:Msg), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   +(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; n(b, #3:Fresh)), 
   +(a ; n(b, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
   +(#4:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   -(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
#4:Msg !inI,
e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh)) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) !inI,
(#4:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #4:Msg) !inI,
(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)) inI
|| 
-(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
generatedByIntruder(#4:Msg), 
-(#4:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
+(#4:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(#4:Msg ; e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
+(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(#2:Sessionkey, n(b, #3:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 7 . 8 > (
:: nil ::
[ nil | 
   -(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   +(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(b ; n(b, #1:Fresh) ; a ; n(a, #2:Fresh)), 
   +(e(mkey(a, s), n(a, #2:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(b, #4:Fresh)), 
   +(a ; n(b, #4:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), 
   +(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   -(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   -(b ; #6:Nonce), 
   +(b ; #6:Nonce ; a ; n(a, #2:Fresh)) | 
   -(e(mkey(a, s), n(a, #2:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), nil] )
|| 
e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #2:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce)) !inI,
(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))) !inI,
(b ; n(b, #1:Fresh) ; a ; n(a, #2:Fresh)) inI
|| 
-(b ; n(b, #1:Fresh) ; a ; n(a, #2:Fresh)), 
+(e(mkey(a, s), n(a, #2:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
-(e(mkey(a, s), n(a, #2:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), 
+(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
+(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 8 . 6 > (
:: nil ::
[ nil | 
   -(#0:Nonce ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; #0:Nonce ; b ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(a ; #0:Nonce ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), nil]  & 
:: #1:Fresh,#2:Fresh ::
[ nil, 
   -(a ; n(b, #2:Fresh)), 
   +(a ; n(b, #2:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
   +(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), nil] )
|| 
e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh)) !inI,
(a ; #0:Nonce ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)) !inI,
(#0:Nonce ; b ; n(b, #1:Fresh)) inI
|| 
-(#0:Nonce ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; #0:Nonce ; b ; n(b, #1:Fresh)), 
-(a ; #0:Nonce ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
+(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
-(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 . 3 . 3 . 4 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #4:Nonce), 
   +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] )
|| 
n(b, #1:Fresh) !inI,
e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
(#4:Nonce ; n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
e(#0:Key, n(b, #1:Fresh) ; #2:Msg) inI
|| 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(#4:Nonce), 
+(#4:Nonce ; n(b, #1:Fresh)), 
-(#4:Nonce ; n(b, #1:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
-(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
      +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #1:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh) ; #2:Msg), 
      +(n(b, #1:Fresh)), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] ,    
   n(b, #1:Fresh) !inI,
   e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
   (#4:Nonce ; n(b, #1:Fresh)) !inI,
   (n(b, #1:Fresh) ; #2:Msg) !inI,
   e(#0:Key, n(b, #1:Fresh) ; #2:Msg) inI,    
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), 
   -(n(b, #1:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #1:Fresh)), 
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))),    
   nil ),

ghost( #4:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #1:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
   (#4:Nonce ; n(b, #1:Fresh)) !inI,
   n(b, #1:Fresh) inI,    
   -(n(b, #1:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #1:Fresh)), 
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #1:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
   (#4:Nonce ; n(b, #1:Fresh)) inI,    
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 3 . 6 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Nonce ; n(b, #0:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: #0:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #4:Nonce), 
   +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #0:Fresh) ; #4:Nonce)) | 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), nil] )
|| 
n(b, #0:Fresh) !inI,
e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh)) !inI,
(#4:Nonce ; n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #1:Msg) !inI,
((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg) inI
|| 
-((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
-(#4:Nonce), 
+(#4:Nonce ; n(b, #0:Fresh)), 
-(#4:Nonce ; n(b, #0:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), 
-(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh)))
|| 
ghost( #4:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #0:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #0:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #0:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), nil]  & 
   :: #0:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #0:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh)) !inI,
   (#4:Nonce ; n(b, #0:Fresh)) !inI,
   n(b, #0:Fresh) inI,    
   -(n(b, #0:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #0:Fresh)), 
   -(#4:Nonce ; n(b, #0:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #0:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), nil]  & 
   :: #0:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #0:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh)) !inI,
   (#4:Nonce ; n(b, #0:Fresh)) inI,    
   -(#4:Nonce ; n(b, #0:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #0:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 3 . 8 > (
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #4:Nonce), 
   +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] )
|| 
n(b, #1:Fresh) !inI,
e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
(#4:Nonce ; n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
(#0:Msg ; n(b, #1:Fresh) ; #2:Msg) inI
|| 
-(#0:Msg ; n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(#4:Nonce), 
+(#4:Nonce ; n(b, #1:Fresh)), 
-(#4:Nonce ; n(b, #1:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
-(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)))
|| 
ghost( #4:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #1:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
   (#4:Nonce ; n(b, #1:Fresh)) !inI,
   n(b, #1:Fresh) inI,    
   -(n(b, #1:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #1:Fresh)), 
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #1:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #1:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh)) !inI,
   (#4:Nonce ; n(b, #1:Fresh)) inI,    
   -(#4:Nonce ; n(b, #1:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #4:Nonce), 
   +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] )
|| 
n(b, #2:Fresh) !inI,
e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Msg ; n(b, #2:Fresh)) !inI,
(#4:Nonce ; n(b, #2:Fresh)) !inI,
e(#0:Key, #1:Msg ; n(b, #2:Fresh)) inI
|| 
-(#0:Key), 
-(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
+(#1:Msg ; n(b, #2:Fresh)), 
-(#1:Msg ; n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
-(#4:Nonce), 
+(#4:Nonce ; n(b, #2:Fresh)), 
-(#4:Nonce ; n(b, #2:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
-(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
      +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Msg ; n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] ,    
   n(b, #2:Fresh) !inI,
   e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
   (#1:Msg ; n(b, #2:Fresh)) !inI,
   (#4:Nonce ; n(b, #2:Fresh)) !inI,
   e(#0:Key, #1:Msg ; n(b, #2:Fresh)) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(#1:Msg ; n(b, #2:Fresh)), 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #2:Fresh)), 
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #4:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
   (#4:Nonce ; n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) inI,    
   -(n(b, #2:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #2:Fresh)), 
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
   (#4:Nonce ; n(b, #2:Fresh)) inI,    
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 . 7 > (
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; n(b, #2:Fresh)), 
   +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #4:Nonce), 
   +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] )
|| 
n(b, #2:Fresh) !inI,
e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Msg ; n(b, #2:Fresh)) !inI,
(#4:Nonce ; n(b, #2:Fresh)) !inI,
(#0:Msg ; #1:Msg ; n(b, #2:Fresh)) inI
|| 
-(#0:Msg ; #1:Msg ; n(b, #2:Fresh)), 
+(#1:Msg ; n(b, #2:Fresh)), 
-(#1:Msg ; n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
-(#4:Nonce), 
+(#4:Nonce ; n(b, #2:Fresh)), 
-(#4:Nonce ; n(b, #2:Fresh)), 
-(#5:Sessionkey), 
+(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
-(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #4:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#4:Nonce), 
      +(#4:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
   (#4:Nonce ; n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) inI,    
   -(n(b, #2:Fresh)), 
   -(#4:Nonce), 
   +(#4:Nonce ; n(b, #2:Fresh)), 
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #5:Sessionkey,
   :: nil ::
   [ nil | 
      -(#4:Nonce ; n(b, #2:Fresh)), 
      -(#5:Sessionkey), 
      +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      -(a ; #4:Nonce), 
      +(a ; #4:Nonce ; b ; n(b, #3:Fresh)), 
      -(e(mkey(b, s), n(b, #3:Fresh) ; #5:Sessionkey ; a) ; #6:Msg), 
      +(#6:Msg ; e(#5:Sessionkey, n(b, #2:Fresh) ; #4:Nonce)) | 
      -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh)) !inI,
   (#4:Nonce ; n(b, #2:Fresh)) inI,    
   -(#4:Nonce ; n(b, #2:Fresh)), 
   -(#5:Sessionkey), 
   +(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))), 
   -(e(#5:Sessionkey, #4:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 4 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
inst(#0:UName),
inst(#3:UName),
inst(#2:Sessionkey)
|| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg) inI,
inst(#0:UName),
inst(#3:UName),
inst(#2:Sessionkey)
|| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 8 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) inI,
(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) inI,
inst(#1:UName),
inst(#4:UName),
inst(#3:Sessionkey)
|| 
-(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 10 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #0:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg) inI,
inst(#4:UName),
inst(#5:UName),
inst(#1:Sessionkey)
|| 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 12 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) inI,
(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)) inI,
inst(#4:UName),
inst(#5:UName),
inst(#2:Sessionkey)
|| 
-(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 2 > (
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI,
(a ; n(a, #0:Fresh)) inI,
inst(#1:UName)
|| 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 7 > (
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)) !inI,
(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) inI,
inst(#2:UName)
|| 
-(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 5 . 10 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) ; #7:Msg), 
   +(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) | 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) !inI,
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) ; #7:Msg) inI
|| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) ; #7:Msg), 
+(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 5 . 12 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) ; #8:Msg), 
   +(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) | 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) !inI,
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) ; #8:Msg) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg) inI
|| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) ; #8:Msg), 
+(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 5 . 14 > (
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) ; #8:Msg), 
   +(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) | 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) !inI,
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) inI,
(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) ; #8:Msg) inI
|| 
-(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) ; #8:Msg), 
+(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 1 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh)) !inI,
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) !inI,
e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg) inI
|| 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
+(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 10 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) | 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) !inI,
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
(#7:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI
|| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(#7:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 12 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) | 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) !inI,
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(#8:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg) inI
|| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(#8:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
< 1 . 6 . 5 . 8 . 14 > (
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) | 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) !inI,
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) inI,
(#8:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) inI
|| 
-(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(#8:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 3 . 1 . 2 . 3 . 8 > (
:: nil ::
[ nil | 
   -(#5:Msg), 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(b, #4:Fresh)), 
   +(a ; n(b, #4:Fresh) ; b ; n(b, #2:Fresh)) | 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), 
   +(#5:Msg ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
#5:Msg !inI,
e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) !inI,
e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)) !inI,
(#5:Msg ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))) !inI,
(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg) !inI,
(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)) !inI,
(a ; #1:Nonce ; b ; n(b, #2:Fresh)) inI
|| 
-(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a)), 
generatedByIntruder(#5:Msg), 
-(#5:Msg), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), 
+(#5:Msg ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(#5:Msg ; e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 2 . 6 . 4 > (
:: nil ::
[ nil | 
   -(#5:Msg), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   +(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(a, s), #2:Nonce ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(b ; n(b, #1:Fresh) ; a ; #2:Nonce), 
   +(e(mkey(a, s), #2:Nonce ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(b, #4:Fresh)), 
   +(a ; n(b, #4:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), 
   +(#5:Msg ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
   -(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
#5:Msg !inI,
e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) !inI,
e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)) !inI,
(#5:Msg ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))) !inI,
(e(mkey(a, s), #2:Nonce ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg) !inI,
(b ; n(b, #1:Fresh) ; a ; #2:Nonce) inI
|| 
-(b ; n(b, #1:Fresh) ; a ; #2:Nonce), 
+(e(mkey(a, s), #2:Nonce ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
-(e(mkey(a, s), #2:Nonce ; seskey(b, a, n(#3:UName, #0:Fresh)) ; b) ; e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
generatedByIntruder(#5:Msg), 
-(#5:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(b, a, n(#3:UName, #0:Fresh)) ; a) ; #5:Msg), 
+(#5:Msg ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(#5:Msg ; e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
+(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(b, a, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 7 . 8 . 3 > (
:: nil ::
[ nil | 
   -(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh)) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), 
   +(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(b ; n(b, #0:Fresh) ; a ; n(a, #5:Fresh)), 
   +(e(mkey(a, s), n(a, #5:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a)), nil]  & 
:: #0:Fresh,#1:Fresh ::
[ nil, 
   -(a ; n(b, #1:Fresh)), 
   +(a ; n(b, #1:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh))), 
   +(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh)) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), 
   -(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil | 
   -(b ; n(b, #0:Fresh)), 
   +(b ; n(b, #0:Fresh) ; a ; n(a, #5:Fresh)), 
   -(e(mkey(a, s), n(a, #5:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh))), nil] )
|| 
e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh)) !inI,
(b ; n(b, #0:Fresh) ; a ; n(a, #5:Fresh)) !inI,
(e(mkey(a, s), n(a, #5:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a)) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh))) !inI,
(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh)) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))) !inI,
(b ; n(b, #0:Fresh)) inI
|| 
-(b ; n(b, #0:Fresh)), 
+(b ; n(b, #0:Fresh) ; a ; n(a, #5:Fresh)), 
-(b ; n(b, #0:Fresh) ; a ; n(a, #5:Fresh)), 
+(e(mkey(a, s), n(a, #5:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a)), 
-(e(mkey(a, s), n(a, #5:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh))), 
-(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#2:UName, #3:Fresh)) ; a) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh))), 
+(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh)) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), 
-(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(a, #4:Fresh) ; n(b, #0:Fresh)) ; e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), 
+(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh))), 
-(e(seskey(b, a, n(#2:UName, #3:Fresh)), n(b, #1:Fresh) ; n(b, #1:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 7 . 8 . 7 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; a ; n(a, #1:Fresh)), 
   -(b), 
   +(b ; n(b, #0:Fresh) ; a ; n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
   +(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(b ; n(b, #0:Fresh) ; a ; n(a, #1:Fresh)), 
   +(e(mkey(a, s), n(a, #1:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a)), nil]  & 
:: #0:Fresh,#2:Fresh ::
[ nil, 
   -(a ; n(b, #2:Fresh)), 
   +(a ; n(b, #2:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), 
   +(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
   -(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(b ; #6:Nonce), 
   +(b ; #6:Nonce ; a ; n(a, #1:Fresh)) | 
   -(e(mkey(a, s), n(a, #1:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), nil] )
|| 
e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh)) !inI,
(b ; n(b, #0:Fresh) ; a ; n(a, #1:Fresh)) !inI,
(e(mkey(a, s), n(a, #1:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a)) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce)) !inI,
(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))) !inI,
(n(b, #0:Fresh) ; a ; n(a, #1:Fresh)) inI
|| 
-(n(b, #0:Fresh) ; a ; n(a, #1:Fresh)), 
-(b), 
+(b ; n(b, #0:Fresh) ; a ; n(a, #1:Fresh)), 
-(b ; n(b, #0:Fresh) ; a ; n(a, #1:Fresh)), 
+(e(mkey(a, s), n(a, #1:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a)), 
-(e(mkey(a, s), n(a, #1:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; b) ; e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; seskey(b, a, n(#3:UName, #4:Fresh)) ; a) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce)), 
+(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
-(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(a, #5:Fresh) ; #6:Nonce) ; e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
+(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
-(e(seskey(b, a, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 8 . 6 . 4 > (
:: nil ::
[ nil | 
   -(b ; n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; b ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; b ; n(b, #0:Fresh)), 
   -(a), 
   +(a ; #1:Nonce ; b ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(a ; #1:Nonce ; b ; n(b, #0:Fresh)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), nil]  & 
:: #0:Fresh,#2:Fresh ::
[ nil, 
   -(a ; n(b, #2:Fresh)), 
   +(a ; n(b, #2:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
   +(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), nil] )
|| 
#1:Nonce !inI,
e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh)) !inI,
(a ; #1:Nonce ; b ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; b ; n(b, #0:Fresh)) !inI,
(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)) !inI,
(b ; n(b, #0:Fresh)) inI
|| 
generatedByIntruder(#1:Nonce), 
-(b ; n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; b ; n(b, #0:Fresh)), 
-(#1:Nonce ; b ; n(b, #0:Fresh)), 
-(a), 
+(a ; #1:Nonce ; b ; n(b, #0:Fresh)), 
-(a ; #1:Nonce ; b ; n(b, #0:Fresh)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
+(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
-(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #2:Fresh) ; n(b, #2:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 8 . 6 . 5 > (
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Nonce ; b ; n(b, #2:Fresh)), 
   +(#1:Nonce ; b ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; b ; n(b, #2:Fresh)), 
   -(a), 
   +(a ; #1:Nonce ; b ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   +(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   -(a ; n(b, #3:Fresh)), 
   +(a ; n(b, #3:Fresh) ; b ; n(b, #2:Fresh)) | 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), 
   +(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   -(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; #1:Nonce ; b ; n(b, #2:Fresh)) !inI,
(#1:Nonce ; b ; n(b, #2:Fresh)) !inI,
(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)) !inI,
(#0:Msg ; #1:Nonce ; b ; n(b, #2:Fresh)) inI
|| 
-(#0:Msg ; #1:Nonce ; b ; n(b, #2:Fresh)), 
+(#1:Nonce ; b ; n(b, #2:Fresh)), 
-(#1:Nonce ; b ; n(b, #2:Fresh)), 
-(a), 
+(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
-(a ; #1:Nonce ; b ; n(b, #2:Fresh)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), 
+(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(mkey(a, s), #1:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
+(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 3 . 1 . 8 . 6 . 6 > (
:: nil ::
[ nil | 
   -(#0:Nonce ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; #0:Nonce ; b ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   +(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -((#0:Nonce ; b ; n(b, #1:Fresh)) ; #2:Msg), 
   +(#0:Nonce ; b ; n(b, #1:Fresh)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(a ; #0:Nonce ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; n(b, #3:Fresh)), 
   +(a ; n(b, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), 
   +(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
   -(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; #0:Nonce ; b ; n(b, #1:Fresh)) !inI,
(#0:Nonce ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)) !inI,
((#0:Nonce ; b ; n(b, #1:Fresh)) ; #2:Msg) inI
|| 
-((#0:Nonce ; b ; n(b, #1:Fresh)) ; #2:Msg), 
+(#0:Nonce ; b ; n(b, #1:Fresh)), 
-(#0:Nonce ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; #0:Nonce ; b ; n(b, #1:Fresh)), 
-(a ; #0:Nonce ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #5:Fresh)) ; a) ; e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b)), 
+(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(mkey(a, s), #0:Nonce ; seskey(a, b, n(#4:UName, #5:Fresh)) ; b) ; e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
+(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#4:UName, #5:Fresh)), n(b, #3:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 . 3 . 3 . 4 . 4 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Nonce ; n(b, #1:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg) ; #3:Msg), 
   +(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #5:Nonce), 
   +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #1:Fresh) ; #5:Nonce)) | 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil] )
|| 
n(b, #1:Fresh) !inI,
e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh)) !inI,
e(#0:Key, n(b, #1:Fresh) ; #2:Msg) !inI,
(#5:Nonce ; n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
(e(#0:Key, n(b, #1:Fresh) ; #2:Msg) ; #3:Msg) inI
|| 
-(e(#0:Key, n(b, #1:Fresh) ; #2:Msg) ; #3:Msg), 
+(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(#5:Nonce), 
+(#5:Nonce ; n(b, #1:Fresh)), 
-(#5:Nonce ; n(b, #1:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), 
-(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
      +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #1:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh) ; #2:Msg), 
      +(n(b, #1:Fresh)), nil]  & 
   :: #1:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #1:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil] ,    
   n(b, #1:Fresh) !inI,
   e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh)) !inI,
   (#5:Nonce ; n(b, #1:Fresh)) !inI,
   (n(b, #1:Fresh) ; #2:Msg) !inI,
   e(#0:Key, n(b, #1:Fresh) ; #2:Msg) inI,    
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), 
   -(n(b, #1:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #1:Fresh)), 
   -(#5:Nonce ; n(b, #1:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))),    
   nil ),

ghost( #5:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #1:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #1:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #1:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh)) !inI,
   (#5:Nonce ; n(b, #1:Fresh)) !inI,
   n(b, #1:Fresh) inI,    
   -(n(b, #1:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #1:Fresh)), 
   -(#5:Nonce ; n(b, #1:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #1:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil]  & 
   :: #1:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #1:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh)) !inI,
   (#5:Nonce ; n(b, #1:Fresh)) inI,    
   -(#5:Nonce ; n(b, #1:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #1:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 3 . 4 . 6 > (
:: nil ::
[ nil | 
   -(#1:Key), 
   -(e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
   +(n(b, #2:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
   +(e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh) ; #3:Msg), 
   +(n(b, #2:Fresh)), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #5:Nonce), 
   +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] )
|| 
n(b, #2:Fresh) !inI,
e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
e(#1:Key, n(b, #2:Fresh) ; #3:Msg) !inI,
(#5:Nonce ; n(b, #2:Fresh)) !inI,
(n(b, #2:Fresh) ; #3:Msg) !inI,
(#0:Msg ; e(#1:Key, n(b, #2:Fresh) ; #3:Msg)) inI
|| 
-(#0:Msg ; e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
+(e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
-(#1:Key), 
-(e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
+(n(b, #2:Fresh) ; #3:Msg), 
-(n(b, #2:Fresh) ; #3:Msg), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
-(#5:Nonce), 
+(#5:Nonce ; n(b, #2:Fresh)), 
-(#5:Nonce ; n(b, #2:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
-(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #1:Key,
   :: nil ::
   [ nil | 
      -(#1:Key), 
      -(e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
      +(n(b, #2:Fresh) ; #3:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh) ; #3:Msg), 
      +(n(b, #2:Fresh)), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   n(b, #2:Fresh) !inI,
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) !inI,
   (n(b, #2:Fresh) ; #3:Msg) !inI,
   e(#1:Key, n(b, #2:Fresh) ; #3:Msg) inI,    
   -(#1:Key), 
   -(e(#1:Key, n(b, #2:Fresh) ; #3:Msg)), 
   +(n(b, #2:Fresh) ; #3:Msg), 
   -(n(b, #2:Fresh) ; #3:Msg), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #5:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) inI,    
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) inI,    
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 . 2 . 4 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh)) ; #3:Msg), 
   +(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #5:Nonce), 
   +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] )
|| 
n(b, #2:Fresh) !inI,
e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
e(#0:Key, #1:Msg ; n(b, #2:Fresh)) !inI,
(#1:Msg ; n(b, #2:Fresh)) !inI,
(#5:Nonce ; n(b, #2:Fresh)) !inI,
(e(#0:Key, #1:Msg ; n(b, #2:Fresh)) ; #3:Msg) inI
|| 
-(e(#0:Key, #1:Msg ; n(b, #2:Fresh)) ; #3:Msg), 
+(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
+(#1:Msg ; n(b, #2:Fresh)), 
-(#1:Msg ; n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
-(#5:Nonce), 
+(#5:Nonce ; n(b, #2:Fresh)), 
-(#5:Nonce ; n(b, #2:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
-(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
      +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Msg ; n(b, #2:Fresh)), 
      +(n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   n(b, #2:Fresh) !inI,
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#1:Msg ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) !inI,
   e(#0:Key, #1:Msg ; n(b, #2:Fresh)) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(#1:Msg ; n(b, #2:Fresh)), 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), 
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #5:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) inI,    
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) inI,    
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 . 2 . 6 > (
:: nil ::
[ nil | 
   -(#1:Key), 
   -(e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
   +(#2:Msg ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
   +(e(#1:Key, #2:Msg ; n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #5:Nonce), 
   +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] )
|| 
n(b, #3:Fresh) !inI,
e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
e(#1:Key, #2:Msg ; n(b, #3:Fresh)) !inI,
(#2:Msg ; n(b, #3:Fresh)) !inI,
(#5:Nonce ; n(b, #3:Fresh)) !inI,
(#0:Msg ; e(#1:Key, #2:Msg ; n(b, #3:Fresh))) inI
|| 
-(#0:Msg ; e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
+(e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
-(#1:Key), 
-(e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
+(#2:Msg ; n(b, #3:Fresh)), 
-(#2:Msg ; n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(n(b, #3:Fresh)), 
-(#5:Nonce), 
+(#5:Nonce ; n(b, #3:Fresh)), 
-(#5:Nonce ; n(b, #3:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
-(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)))
|| 
ghost( #1:Key,
   :: nil ::
   [ nil | 
      -(#1:Key), 
      -(e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
      +(#2:Msg ; n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#2:Msg ; n(b, #3:Fresh)), 
      +(n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #3:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] ,    
   n(b, #3:Fresh) !inI,
   e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
   (#2:Msg ; n(b, #3:Fresh)) !inI,
   (#5:Nonce ; n(b, #3:Fresh)) !inI,
   e(#1:Key, #2:Msg ; n(b, #3:Fresh)) inI,    
   -(#1:Key), 
   -(e(#1:Key, #2:Msg ; n(b, #3:Fresh))), 
   +(#2:Msg ; n(b, #3:Fresh)), 
   -(#2:Msg ; n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), 
   -(n(b, #3:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #3:Fresh)), 
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))),    
   nil ),

ghost( #5:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #3:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
   (#5:Nonce ; n(b, #3:Fresh)) !inI,
   n(b, #3:Fresh) inI,    
   -(n(b, #3:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #3:Fresh)), 
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #3:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
   (#5:Nonce ; n(b, #3:Fresh)) inI,    
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 . 7 . 4 > (
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; n(b, #2:Fresh)), 
   +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -((#0:Msg ; #1:Msg ; n(b, #2:Fresh)) ; #3:Msg), 
   +(#0:Msg ; #1:Msg ; n(b, #2:Fresh)), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #5:Nonce), 
   +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] )
|| 
n(b, #2:Fresh) !inI,
e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
(#0:Msg ; #1:Msg ; n(b, #2:Fresh)) !inI,
(#1:Msg ; n(b, #2:Fresh)) !inI,
(#5:Nonce ; n(b, #2:Fresh)) !inI,
((#0:Msg ; #1:Msg ; n(b, #2:Fresh)) ; #3:Msg) inI
|| 
-((#0:Msg ; #1:Msg ; n(b, #2:Fresh)) ; #3:Msg), 
+(#0:Msg ; #1:Msg ; n(b, #2:Fresh)), 
-(#0:Msg ; #1:Msg ; n(b, #2:Fresh)), 
+(#1:Msg ; n(b, #2:Fresh)), 
-(#1:Msg ; n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
-(n(b, #2:Fresh)), 
-(#5:Nonce), 
+(#5:Nonce ; n(b, #2:Fresh)), 
-(#5:Nonce ; n(b, #2:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
-(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)))
|| 
ghost( #5:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #2:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) !inI,
   n(b, #2:Fresh) inI,    
   -(n(b, #2:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #2:Fresh)), 
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #2:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #2:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh)) !inI,
   (#5:Nonce ; n(b, #2:Fresh)) inI,    
   -(#5:Nonce ; n(b, #2:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 3 . 5 . 7 . 6 > (
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; #2:Msg ; n(b, #3:Fresh)), 
   +(#1:Msg ; #2:Msg ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; #2:Msg ; n(b, #3:Fresh)), 
   +(#2:Msg ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #3:Fresh)), 
   +(n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #5:Nonce), 
   +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] )
|| 
n(b, #3:Fresh) !inI,
e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
(#1:Msg ; #2:Msg ; n(b, #3:Fresh)) !inI,
(#2:Msg ; n(b, #3:Fresh)) !inI,
(#5:Nonce ; n(b, #3:Fresh)) !inI,
(#0:Msg ; #1:Msg ; #2:Msg ; n(b, #3:Fresh)) inI
|| 
-(#0:Msg ; #1:Msg ; #2:Msg ; n(b, #3:Fresh)), 
+(#1:Msg ; #2:Msg ; n(b, #3:Fresh)), 
-(#1:Msg ; #2:Msg ; n(b, #3:Fresh)), 
+(#2:Msg ; n(b, #3:Fresh)), 
-(#2:Msg ; n(b, #3:Fresh)), 
+(n(b, #3:Fresh)), 
-(n(b, #3:Fresh)), 
-(#5:Nonce), 
+(#5:Nonce ; n(b, #3:Fresh)), 
-(#5:Nonce ; n(b, #3:Fresh)), 
-(#6:Sessionkey), 
+(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
-(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)))
|| 
ghost( #5:Nonce,
   :: nil ::
   [ nil | 
      -(n(b, #3:Fresh)), 
      -(#5:Nonce), 
      +(#5:Nonce ; n(b, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #3:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
   (#5:Nonce ; n(b, #3:Fresh)) !inI,
   n(b, #3:Fresh) inI,    
   -(n(b, #3:Fresh)), 
   -(#5:Nonce), 
   +(#5:Nonce ; n(b, #3:Fresh)), 
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))),    
   nil ),

ghost( #6:Sessionkey,
   :: nil ::
   [ nil | 
      -(#5:Nonce ; n(b, #3:Fresh)), 
      -(#6:Sessionkey), 
      +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil]  & 
   :: #3:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; #5:Nonce), 
      +(a ; #5:Nonce ; b ; n(b, #4:Fresh)), 
      -(e(mkey(b, s), n(b, #4:Fresh) ; #6:Sessionkey ; a) ; #7:Msg), 
      +(#7:Msg ; e(#6:Sessionkey, n(b, #3:Fresh) ; #5:Nonce)) | 
      -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), nil] ,    
   e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh)) !inI,
   (#5:Nonce ; n(b, #3:Fresh)) inI,    
   -(#5:Nonce ; n(b, #3:Fresh)), 
   -(#6:Sessionkey), 
   +(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))), 
   -(e(#6:Sessionkey, #5:Nonce ; n(b, #3:Fresh))),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 4 . 5 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(i ; n(i, #0:Fresh)) | 
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(i, #0:Fresh))), 
   +(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(i, #0:Fresh)), 
   +(a ; n(i, #0:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(i, #0:Fresh))), 
   -(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
mkey(i, s) !inI,
e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #3:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)) !inI,
(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(i, #0:Fresh))) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) inI,
(n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) inI,
inst(#2:UName),
inst(#1:Sessionkey)
|| 
+(mkey(i, s)), 
-(n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(i, #0:Fresh))), 
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey, n(b, #3:Fresh) ; n(i, #0:Fresh))), 
+(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 5 . 6 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
   -(mkey(s, #1:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
mkey(s, #1:UName) inI,
e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) inI,
e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) inI,
inst(#1:UName),
inst(#4:UName),
inst(#3:Sessionkey)
|| 
-(#0:Key), 
-(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
-(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
-(mkey(s, #1:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
      +(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), nil]  & 
   :: nil ::
   [ nil | 
      -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
      -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a)), 
      +(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
   :: nil ::
   [ nil | 
      -(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
      -(mkey(s, #1:UName)), 
      +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(#1:UName ; n(#1:UName, #2:Fresh)) | 
      -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
      +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      -(a ; n(#1:UName, #2:Fresh)), 
      +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)) | 
      -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
      +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
      -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] ,    
   e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
   e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
   (n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
   (e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) !inI,
   (e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
   mkey(s, #1:UName) inI,
   e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) inI,
   e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) inI,
   inst(#1:UName),
   inst(#4:UName),
   inst(#3:Sessionkey),    
   -(#0:Key), 
   -(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
   -(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
   -(mkey(s, #1:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 4 . 5 . 13 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #1:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
n(#2:UName, #3:Fresh) inI,
mkey(s, #2:UName) inI,
e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) inI,
inst(#1:UName),
inst(#2:UName),
inst(#0:Sessionkey)
|| 
-(#0:Sessionkey ; #1:UName), 
-(n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh)))
|| 
ghost( #0:Sessionkey ; #1:UName,
   :: nil ::
   [ nil | 
      -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
      -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a)), 
      +(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), nil]  & 
   :: nil ::
   [ nil | 
      -(#0:Sessionkey ; #1:UName), 
      -(n(#2:UName, #3:Fresh)), 
      +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), nil]  & 
   :: nil ::
   [ nil | 
      -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), 
      -(mkey(s, #2:UName)), 
      +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      +(#2:UName ; n(#2:UName, #3:Fresh)) | 
      -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
      +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))), nil]  & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      -(a ; n(#2:UName, #3:Fresh)), 
      +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #5:Fresh)) | 
      -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
      +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
      -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))), nil] ,    
   e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh)) !inI,
   e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) !inI,
   (n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) !inI,
   (e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)) !inI,
   (e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
   n(#2:UName, #3:Fresh) inI,
   mkey(s, #2:UName) inI,
   e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) inI,
   inst(#1:UName),
   inst(#2:UName),
   inst(#0:Sessionkey),    
   -(#0:Sessionkey ; #1:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #1:UName) ; e(#0:Sessionkey, n(b, #4:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #4:Fresh))),    
   nil )
|| 
nil)
(< 1 . 6 . 3 . 4 . 5 . 15 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName), 
   -(mkey(s, #4:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #0:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
mkey(s, #4:UName) inI,
(n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg) inI,
inst(#4:UName),
inst(#5:UName),
inst(#1:Sessionkey)
|| 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
-(n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName), 
-(mkey(s, #4:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 5 . 17 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName), 
   -(mkey(s, #4:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
mkey(s, #4:UName) inI,
(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)) inI,
(n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) inI,
inst(#4:UName),
inst(#5:UName),
inst(#2:Sessionkey)
|| 
-(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
-(n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName), 
-(mkey(s, #4:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 6 . 12 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; #7:Msg), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #0:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg) inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; #7:Msg) inI,
inst(#4:UName),
inst(#5:UName),
inst(#1:Sessionkey)
|| 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; #7:Msg), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 6 . 14 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; #7:Msg), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)) inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; #7:Msg) inI,
inst(#4:UName),
inst(#5:UName),
inst(#2:Sessionkey)
|| 
-(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; #7:Msg), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 8 . 11 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
   +(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #0:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #0:Fresh)) | 
   -(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) !inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
(#7:Msg ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)) inI,
(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg) inI,
inst(#4:UName),
inst(#5:UName),
inst(#1:Sessionkey)
|| 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; #2:Msg), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
-(#7:Msg ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #0:Fresh) ; #1:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #1:Sessionkey ; #5:UName) ; e(#1:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#1:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 4 . 8 . 13 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)) inI,
(#7:Msg ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)) inI,
inst(#4:UName),
inst(#5:UName),
inst(#2:Sessionkey)
|| 
-(#0:Msg ; e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
-(#7:Msg ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(a ; n(a, #0:Fresh)), 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI,
inst(#1:UName)
|| 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 2 . 4 > (
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI,
n(a, #0:Fresh) inI,
inst(#1:UName)
|| 
-(n(a, #0:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 2 . 6 > (
:: nil ::
[ nil | 
   -(#0:Msg ; a ; n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a ; n(a, #1:Fresh)) | 
   -(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
   +(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   +(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
   -(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh)) !inI,
(a ; n(a, #1:Fresh)) !inI,
(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)) !inI,
(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))) !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)) !inI,
(#0:Msg ; a ; n(a, #1:Fresh)) inI,
inst(#2:UName)
|| 
-(#0:Msg ; a ; n(a, #1:Fresh)), 
+(a ; n(a, #1:Fresh)), 
-(a ; n(a, #1:Fresh)), 
+(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
-(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
+(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
-(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
+(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 7 . 6 > (
:: nil ::
[ nil | 
   -(#0:Msg ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
   +(n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
   -(a), 
   +(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a ; n(a, #1:Fresh)) | 
   -(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #1:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)) | 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #1:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #1:Fresh) ; n(b, #5:Fresh)) !inI,
(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)) !inI,
(n(a, #1:Fresh) ; b ; n(b, #2:Fresh)) !inI,
(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #1:Fresh))) !inI,
(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)) !inI,
(#0:Msg ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)) inI,
inst(#3:UName)
|| 
-(#0:Msg ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
+(n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
-(n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
-(a), 
+(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
-(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #1:Fresh))), 
-(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #1:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 3 . 8 . 7 . 7 > (
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) ; #2:Msg), 
   +(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)) !inI,
((n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) ; #2:Msg) inI,
inst(#3:UName)
|| 
-((n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) ; #2:Msg), 
+(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #4:Fresh)) ; b) ; e(seskey(a, b, n(#3:UName, #4:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #4:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 1 . 3 > (
:: nil ::
[ nil | 
   -(#0:Msg), 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), nil]  & 
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
   +(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#4:UName ; n(#4:UName, #3:Fresh)) | 
   -(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   +(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#4:UName, #3:Fresh)), 
   +(a ; n(#4:UName, #3:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), 
   +(#0:Msg ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
   -(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), nil] )
|| 
#0:Msg !inI,
e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh)) !inI,
e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)) !inI,
(#0:Msg ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg) !inI,
(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))) !inI,
e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) inI,
e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) inI
|| 
generatedByIntruder(#0:Msg), 
-(#0:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), 
-(e(mkey(b, s), n(b, #1:Fresh) ; #2:Sessionkey ; a) ; #0:Msg), 
+(#0:Msg ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(#0:Msg ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName)), 
+(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
-(e(mkey(s, #4:UName), n(#4:UName, #3:Fresh) ; #2:Sessionkey ; #5:UName) ; e(#2:Sessionkey, n(b, #6:Fresh) ; n(#4:UName, #3:Fresh))), 
+(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#4:UName, #3:Fresh) ; n(b, #6:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 1 . 7 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh)) !inI,
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg) inI
|| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
+(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 1 . 8 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), 
   +(e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(#11:UName ; #9:Nonce), 
   +(#11:UName ; #9:Nonce ; #7:UName ; n(#7:UName, #10:Fresh)) | 
   -(e(mkey(s, #7:UName), n(#7:UName, #10:Fresh) ; #6:Sessionkey ; #11:UName) ; e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), nil] )
|| 
e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh)) !inI,
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) !inI,
e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(e(mkey(s, #7:UName), n(#7:UName, #10:Fresh) ; #6:Sessionkey ; #11:UName) ; e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a)) inI
|| 
-(e(mkey(s, #7:UName), n(#7:UName, #10:Fresh) ; #6:Sessionkey ; #11:UName) ; e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), 
+(e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 6 . 5 . 8 . 1 . 9 > (
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh)) !inI,
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; #7:Msg) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg) inI
|| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #4:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #2:Sessionkey ; a) ; #7:Msg), 
+(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(#7:Msg ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil)
< 1 . 6 . 5 . 8 . 1 . 13 > (
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
|| 
e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) !inI,
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; #7:Msg) inI
|| 
-(#0:Msg ; e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #3:Sessionkey ; a) ; #7:Msg), 
+(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(#7:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : initials(5) .
rewrites: 358 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 6 . 3 . 8 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(a ; n(a, #0:Fresh)), 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), nil] )
|| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI,
inst(#1:UName)
|| 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
|| 
nil
|| 
nil
Maude> Bye.
Wed Dec  5 10:43:59 CET 2012
Santiagos-MacBook-Pro:prototype-20121204 sescobar$ 
