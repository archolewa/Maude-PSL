Santiagos-MacBook-Pro:prototype-20121204 sescobar$ examples/Denning-Sacco-command 
Wed Dec  5 10:29:41 CET 2012
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude alpha96b built: Nov  9 2012 18:20:01
	    Copyright 1997-2011 SRI International
		   Wed Dec  5 10:29:41 2012
Maude> 
	    Maude-NPA Version:  Dec 4 2012 with direct composition
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           for getting the unification algorithm
 red genGrammars .            for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern X
 red summary(X,Y).            for summary of analysis steps
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 12188684 in 18412ms cpu (18572ms real) (661961 rewrites/second)
result GrammarList: (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq t(s, #1:Fresh)), #0:Msg notLeq seskey(#2:UName, #3:UName, n(s, #4:Fresh)) => (#0:Msg ; #5:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq t(s, #1:Fresh)), (#0:Msg notLeq e(mkey(#2:UName, s), #3:UName ; seskey(#3:UName, #2:UName, n(s, #4:Fresh)) ; t(s, #5:Fresh))), (#0:Msg notLeq t(s, #6:Fresh) ; e(mkey(#7:UName, s), #8:UName ; seskey(
    #8:UName, #7:UName, n(s, #9:Fresh)) ; t(s, #6:Fresh))), (#0:Msg notLeq seskey(#10:UName, #11:UName, n(s, #12:Fresh)) ; t(s, #13:Fresh)), #0:Msg notLeq seskey(#14:UName, #15:UName, n(s, #16:Fresh)) ; t(s, #17:Fresh) ; e(mkey(
    #15:UName, s), #14:UName ; seskey(#14:UName, #15:UName, n(s, #16:Fresh)) ; t(s, #17:Fresh)) => (#18:Msg ; #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Key notInI, #0:Key notLeq mkey(#1:UName, s) => e(#0:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq #1:UName ; seskey(#1:UName, #2:UName, n(s, #3:Fresh)) ; t(s, #4:Fresh)), #0:Msg notLeq #5:UName ; seskey(#6:UName, #5:UName, n(s, #7:Fresh)) ; t(s, #8:Fresh) ; e(mkey(#5:UName, s), #6:UName ;
    seskey(#6:UName, #5:UName, n(s, #7:Fresh)) ; t(s, #8:Fresh)) => e(#9:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl (mkey(#0:Name, #1:Name) notLeq mkey(i, #2:Name)), mkey(#0:Name, #1:Name) notLeq mkey(#3:Name, i) => mkey(#0:Name, #1:Name) inL .)
| (
grl empty => n(#0:Name, #1:Fresh) inL . ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Nonce notInI, #0:Nonce notLeq n(s, #1:Fresh) => seskey(#2:Name, #3:Name, #0:Nonce) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq seskey(#3:UName, #4:UName, n(s, #5:Fresh)) => seskey(#0:Name, #1:Name, #2:Nonce) inL .)
| 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl t(#0:Name, #1:Fresh) notLeq t(s, #2:Fresh) => t(#0:Name, #1:Fresh) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 2980 in 34ms cpu (35ms real) (86137 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh,r':Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, r:Fresh)) ; t(s, r':Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, r:Fresh)) ; t(s, r':Fresh)))) | nil] 
|| 
seskey(a, b, n(s, r:Fresh)) inI
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 961637 in 1798ms cpu (1807ms real) (534749 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 1288754 in 2362ms cpu (2376ms real) (545414 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 4592869 in 9243ms cpu (9287ms real) (496887 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 5488098 in 11995ms cpu (12071ms real) (457518 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 9887038 in 18018ms cpu (18113ms real) (548730 rewrites/second)
result Summary: States>> 7 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 13469327 in 20160ms cpu (20239ms real) (668113 rewrites/second)
result Summary: States>> 6 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 14738126 in 22710ms cpu (22796ms real) (648942 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(8) .
rewrites: 10170227 in 15544ms cpu (15609ms real) (654273 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(9) .
rewrites: 7975629 in 11509ms cpu (11561ms real) (692979 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(10) .
rewrites: 4123511 in 5879ms cpu (5903ms real) (701391 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(11) .
rewrites: 571159 in 437ms cpu (446ms real) (1304501 rewrites/second)
result Summary: States>> 0 Solutions>> 0
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 4 > (
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #0:Fresh)) ; #1:Msg), 
   +(seskey(a, b, n(s, #0:Fresh))), nil]  & 
:: #0:Fresh,#2:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #2:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #2:Fresh)))) | nil] )
|| 
seskey(a, b, n(s, #0:Fresh)) !inI,
(seskey(a, b, n(s, #0:Fresh)) ; #1:Msg) inI
|| 
-(seskey(a, b, n(s, #0:Fresh)) ; #1:Msg), 
+(seskey(a, b, n(s, #0:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 > (
:: nil ::
[ nil | 
   -(#0:Msg ; seskey(a, b, n(s, #1:Fresh)) ; #2:Msg), 
   +(seskey(a, b, n(s, #1:Fresh)) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #1:Fresh)) ; #2:Msg), 
   +(seskey(a, b, n(s, #1:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #1:Fresh)) ; t(s, #3:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #1:Fresh)) ; t(s, #3:Fresh)))) | nil] )
|| 
(seskey(a, b, n(s, #1:Fresh)) ; #2:Msg) !inI,
seskey(a, b, n(s, #1:Fresh)) !inI,
(#0:Msg ; seskey(a, b, n(s, #1:Fresh)) ; #2:Msg) inI
|| 
-(#0:Msg ; seskey(a, b, n(s, #1:Fresh)) ; #2:Msg), 
+(seskey(a, b, n(s, #1:Fresh)) ; #2:Msg), 
-(seskey(a, b, n(s, #1:Fresh)) ; #2:Msg), 
+(seskey(a, b, n(s, #1:Fresh)))
|| 
nil
|| 
nil)
< 1 . 4 . 7 > (
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] )
|| 
(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #4:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) inI
|| 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
   +(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(seskey(a, b, n(s, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #4:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #4:Fresh)))) | nil] )
|| 
(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
seskey(a, b, n(s, #2:Fresh)) !inI,
e(#0:Key, #1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) inI
|| 
-(#0:Key), 
-(e(#0:Key, #1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
+(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(seskey(a, b, n(s, #2:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
      +(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
      +(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
      +(seskey(a, b, n(s, #2:Fresh))), nil]  & 
   :: #2:Fresh,#4:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #4:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #4:Fresh)))) | nil] ,    
   (#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
   (seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
   seskey(a, b, n(s, #2:Fresh)) !inI,
   e(#0:Key, #1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
   +(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   -(#1:Msg ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   -(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(seskey(a, b, n(s, #2:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 7 . 1 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] )
|| 
(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #4:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) inI
|| 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)))
|| 
nil
|| 
nil)
< 1 . 4 . 7 . 5 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] )
|| 
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #4:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 . 7 > (
:: nil ::
[ nil | 
   -(#1:Key), 
   -(e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
   +(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
   +(e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(seskey(a, b, n(s, #3:Fresh))), nil]  & 
:: #3:Fresh,#5:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh)))) | nil] )
|| 
e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
seskey(a, b, n(s, #3:Fresh)) !inI,
(#0:Msg ; e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)) inI
|| 
-(#0:Msg ; e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
+(e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
-(#1:Key), 
-(e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
+(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
-(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
-(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(seskey(a, b, n(s, #3:Fresh)))
|| 
ghost( #1:Key,
   :: nil ::
   [ nil | 
      -(#1:Key), 
      -(e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
      +(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
      +(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
      +(seskey(a, b, n(s, #3:Fresh))), nil]  & 
   :: #3:Fresh,#5:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh)))) | nil] ,    
   (#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
   (seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
   seskey(a, b, n(s, #3:Fresh)) !inI,
   e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) inI,    
   -(#1:Key), 
   -(e(#1:Key, #2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
   +(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   -(#2:Msg ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   -(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(seskey(a, b, n(s, #3:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 8 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] )
|| 
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#8:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 7 . 1 . 2 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] )
|| 
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #4:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(seskey(a, b, n(s, #3:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(i ; #0:UName) | 
   -(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
   +(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
:: #3:Fresh,#5:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
seskey(a, b, n(s, #3:Fresh)) !inI,
(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
-(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
+(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
-(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(seskey(a, b, n(s, #3:Fresh)))
|| 
nil
|| 
nil)
< 1 . 4 . 7 . 5 . 10 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   -(#1:UName), 
   +(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] )
|| 
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #4:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) inI
|| 
-(#2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(#1:UName), 
+(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 . 7 . 6 > (
:: nil ::
[ nil | 
   -(#2:Key), 
   -(e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(#1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] )
|| 
e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
(#1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)) !inI,
(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #4:Fresh)) !inI,
(#0:Msg ; #1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)) inI
|| 
-(#0:Msg ; #1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(#1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
-(#1:Msg ; e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
-(#2:Key), 
-(e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
+(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #4:Fresh)))
|| 
ghost( #2:Key,
   :: nil ::
   [ nil | 
      -(#2:Key), 
      -(e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
      +(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
      +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
      +(seskey(a, b, n(s, #4:Fresh))), nil]  & 
   :: #4:Fresh,#6:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #4:Fresh)) ; t(s, #6:Fresh)))) | nil] ,    
   (#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
   (seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) !inI,
   seskey(a, b, n(s, #4:Fresh)) !inI,
   e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg) inI,    
   -(#2:Key), 
   -(e(#2:Key, #3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg)), 
   +(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   -(#3:Msg ; seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   -(seskey(a, b, n(s, #4:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #4:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 7 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
   +(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #7:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) inI
|| 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#5:Key), 
-(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)))
|| 
ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
      +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
   :: #7:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #7:Fresh)) !inI,
   e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) inI,    
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 8 . 1 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] )
|| 
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#8:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 8 . 6 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] )
|| 
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#8:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 7 . 1 . 2 . 2 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   +(i ; #2:UName), 
   -(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg)), 
   +(seskey(a, b, n(s, #0:Fresh)) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg), 
   +(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #0:Fresh)) ; #5:Msg), 
   +(seskey(a, b, n(s, #0:Fresh))), nil]  & 
:: #0:Fresh,#1:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg) !inI,
(seskey(a, b, n(s, #0:Fresh)) ; #5:Msg) !inI,
seskey(a, b, n(s, #0:Fresh)) !inI,
(#2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg), 
+(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg)), 
+(i ; #2:UName), 
-(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; seskey(a, b, n(s, #0:Fresh)) ; #5:Msg)), 
+(seskey(a, b, n(s, #0:Fresh)) ; #5:Msg), 
-(seskey(a, b, n(s, #0:Fresh)) ; #5:Msg), 
+(seskey(a, b, n(s, #0:Fresh)))
|| 
nil
|| 
nil)
(< 1 . 4 . 7 . 1 . 2 . 8 > (
:: nil ::
[ nil | 
   +(#6:UName ; #4:UName), 
   -(e(mkey(#6:UName, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
   +(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#6:UName, s)), 
   -(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(e(mkey(#6:UName, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   -(#4:UName), 
   +(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(seskey(a, b, n(s, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #5:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #5:Fresh)))) | nil] )
|| 
e(mkey(#6:UName, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
seskey(a, b, n(s, #2:Fresh)) !inI,
mkey(#6:UName, s) inI,
(#0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) inI
|| 
-(#0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(#4:UName), 
+(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(mkey(#6:UName, s)), 
-(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(e(mkey(#6:UName, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
+(#6:UName ; #4:UName), 
-(e(mkey(#6:UName, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
+(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(seskey(a, b, n(s, #2:Fresh)))
|| 
nil
|| 
nil)
< 1 . 4 . 7 . 5 . 3 . 6 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   -(#0:UName), 
   +(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
   +(seskey(a, b, n(s, #3:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(i ; #0:UName) | 
   -(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
   +(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), nil]  & 
:: #3:Fresh,#5:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #3:Fresh)) ; t(s, #5:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) !inI,
seskey(a, b, n(s, #3:Fresh)) !inI,
(#1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg) inI
|| 
-(#1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
-(#0:UName), 
+(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
-(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; seskey(a, b, n(s, #3:Fresh)) ; #4:Msg)), 
+(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
-(seskey(a, b, n(s, #3:Fresh)) ; #4:Msg), 
+(seskey(a, b, n(s, #3:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 . 7 . 6 . 6 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
   +(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
   +(#1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
   +(#2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
   +(e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
   +(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
   +(seskey(a, b, n(s, #5:Fresh))), nil]  & 
:: #5:Fresh,#7:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #5:Fresh)) ; t(s, #7:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #5:Fresh)) ; t(s, #7:Fresh)))) | nil] )
|| 
e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg) !inI,
(#1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)) !inI,
(#2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)) !inI,
(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg) !inI,
(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg) !inI,
seskey(a, b, n(s, #5:Fresh)) !inI,
(#0:Msg ; #1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)) inI
|| 
-(#0:Msg ; #1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
+(#1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
-(#1:Msg ; #2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
+(#2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
-(#2:Msg ; e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
+(e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
-(#3:Key), 
-(e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
+(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
-(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
+(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
-(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
+(seskey(a, b, n(s, #5:Fresh)))
|| 
ghost( #3:Key,
   :: nil ::
   [ nil | 
      -(#3:Key), 
      -(e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
      +(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
      +(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
      +(seskey(a, b, n(s, #5:Fresh))), nil]  & 
   :: #5:Fresh,#7:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #5:Fresh)) ; t(s, #7:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #5:Fresh)) ; t(s, #7:Fresh)))) | nil] ,    
   (#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg) !inI,
   (seskey(a, b, n(s, #5:Fresh)) ; #6:Msg) !inI,
   seskey(a, b, n(s, #5:Fresh)) !inI,
   e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg) inI,    
   -(#3:Key), 
   -(e(#3:Key, #4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg)), 
   +(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
   -(#4:Msg ; seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
   +(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
   -(seskey(a, b, n(s, #5:Fresh)) ; #6:Msg), 
   +(seskey(a, b, n(s, #5:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 6 . 7 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
   +(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] )
|| 
e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
seskey(a, b, n(s, #8:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) inI
|| 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
+(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#6:Key), 
-(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)))
|| 
ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
      +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
   :: #8:Fresh,#10:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] ,    
   (#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   (seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   seskey(a, b, n(s, #8:Fresh)) !inI,
   e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) inI,    
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 7 . 1 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
   +(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #7:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) inI
|| 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#5:Key), 
-(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)))
|| 
ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
      +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
   :: #7:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #7:Fresh)) !inI,
   e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) inI,    
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 7 . 5 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
   +(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #7:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#5:Key), 
-(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)))
|| 
ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
      +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
   :: #7:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #7:Fresh)) !inI,
   e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) inI,    
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 8 . 6 . 5 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#8:Key), 
   -(e(#8:Key, #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: #6:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
mkey(#0:UName, s) inI,
e(#8:Key, #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
-(#8:Key), 
-(e(#8:Key, #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #8:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#8:Key), 
      -(e(#8:Key, #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
      +(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
   :: nil ::
   [ nil | 
      -(mkey(#0:UName, s)), 
      -(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil, 
      +(#0:UName ; #1:UName) | 
      -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
      +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
   :: #6:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   mkey(#0:UName, s) inI,
   e(#8:Key, #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI,    
   -(#8:Key), 
   -(e(#8:Key, #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil ),

ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil)
< 1 . 4 . 7 . 1 . 2 . 2 . 6 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   +(i ; #4:UName), 
   -(e(mkey(i, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
   +(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(e(mkey(i, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   -(#4:UName), 
   +(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
   +(seskey(a, b, n(s, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #5:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #2:Fresh)) ; t(s, #5:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(mkey(i, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) !inI,
seskey(a, b, n(s, #2:Fresh)) !inI,
(#0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg) inI
|| 
-(#0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(#4:UName), 
+(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(e(mkey(i, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
+(i ; #4:UName), 
-(e(mkey(i, s), #4:UName ; #0:Sessionkey ; #1:Nonce ; seskey(a, b, n(s, #2:Fresh)) ; #3:Msg)), 
+(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
-(seskey(a, b, n(s, #2:Fresh)) ; #3:Msg), 
+(seskey(a, b, n(s, #2:Fresh)))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 . 7 . 6 . 6 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] )
|| 
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
e(#0:Key, #1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
-(#0:Key), 
-(e(#0:Key, #1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, #1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
      +(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
   :: nil ::
   [ nil | 
      -(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
   :: nil ::
   [ nil | 
      -(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#8:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] ,    
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
   (#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
   (#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#0:Key, #1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI,    
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#1:Msg ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil ),

ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#8:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 1 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
   +(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] )
|| 
e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
seskey(a, b, n(s, #8:Fresh)) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) inI
|| 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
+(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#6:Key), 
-(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)))
|| 
ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
      +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
   :: #8:Fresh,#10:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] ,    
   (#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   (seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   seskey(a, b, n(s, #8:Fresh)) !inI,
   e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) inI,    
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 5 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
   +(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] )
|| 
e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
seskey(a, b, n(s, #8:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
+(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#6:Key), 
-(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)))
|| 
ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
      +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
   :: #8:Fresh,#10:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] ,    
   (#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   (seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   seskey(a, b, n(s, #8:Fresh)) !inI,
   e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) inI,    
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 7 . 1 . 2 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
   +(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #7:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#5:Key), 
-(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)))
|| 
ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
      +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
   :: #7:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #7:Fresh)) !inI,
   e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) inI,    
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))),    
   nil )
|| 
nil)
< 1 . 4 . 5 . 2 . 7 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(i ; #0:UName) | 
   -(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: #6:Fresh,#8:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
-(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#8:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #8:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(8) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 1 . 2 > (
:: nil ::
[ nil | 
   +(#0:UName ; #1:UName), 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
   +(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] )
|| 
e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
seskey(a, b, n(s, #8:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) inI
|| 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
+(#0:UName ; #1:UName), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
+(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#6:Key), 
-(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)))
|| 
ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
      +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
   :: #8:Fresh,#10:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] ,    
   (#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   (seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   seskey(a, b, n(s, #8:Fresh)) !inI,
   e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) inI,    
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(i ; #0:UName) | 
   -(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
   +(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #7:Fresh)) !inI,
(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
-(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#5:Key), 
-(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)))
|| 
ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
      +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
   :: #7:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #7:Fresh)) !inI,
   e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) inI,    
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 5 . 10 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   -(#1:UName), 
   +(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(#0:UName ; #1:UName) | 
   -(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
   +(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] )
|| 
e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) !inI,
(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
seskey(a, b, n(s, #8:Fresh)) !inI,
mkey(#0:UName, s) inI,
(#2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)) inI
|| 
-(#2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#1:UName), 
+(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(mkey(#0:UName, s)), 
-(#1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
-(e(mkey(#0:UName, s), #1:UName ; #2:Sessionkey ; #3:Nonce ; #4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg))), 
+(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#4:Msg ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
-(#6:Key), 
-(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
+(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
-(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #8:Fresh)))
|| 
ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
      +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #8:Fresh))), nil]  & 
   :: #8:Fresh,#10:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #8:Fresh)) ; t(s, #10:Fresh)))) | nil] ,    
   (#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   (seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) !inI,
   seskey(a, b, n(s, #8:Fresh)) !inI,
   e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg) inI,    
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(#7:Msg ; seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   -(seskey(a, b, n(s, #8:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #8:Fresh))),    
   nil )
|| 
nil)
< 1 . 4 . 5 . 2 . 7 . 7 . 1 . 2 . 2 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   +(i ; #2:UName), 
   -(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg))), 
   +(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
   +(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
   +(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #0:Fresh))), nil]  & 
:: #0:Fresh,#1:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg) !inI,
e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)) !inI,
(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)) !inI,
(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg) !inI,
(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #0:Fresh)) !inI,
(#2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
+(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg))), 
+(i ; #2:UName), 
-(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg))), 
+(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
-(#5:Msg ; e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
+(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
-(#6:Key), 
-(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
+(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
-(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #0:Fresh)))
|| 
ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
      +(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #0:Fresh))), nil]  & 
   :: #0:Fresh,#1:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh)))) | nil] ,    
   (#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #0:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #0:Fresh)) !inI,
   e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg) inI,    
   -(#6:Key), 
   -(e(#6:Key, #7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg)), 
   +(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
   -(#7:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #0:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #0:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(9) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 1 . 2 . 2 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   +(i ; #2:UName), 
   -(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg))), 
   +(#5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Key), 
   -(e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
   +(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
   +(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
   +(#6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
   +(e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #0:Fresh))), nil]  & 
:: #0:Fresh,#1:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg) !inI,
e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)) !inI,
(#5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)) !inI,
(#6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)) !inI,
(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg) !inI,
(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg) !inI,
seskey(a, b, n(s, #0:Fresh)) !inI,
(#2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)) inI
|| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
+(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg))), 
+(i ; #2:UName), 
-(e(mkey(i, s), #2:UName ; #3:Sessionkey ; #4:Nonce ; #5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg))), 
+(#5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
-(#5:Msg ; #6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
+(#6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
-(#6:Msg ; e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
+(e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
-(#7:Key), 
-(e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
+(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
-(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
-(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
+(seskey(a, b, n(s, #0:Fresh)))
|| 
ghost( #7:Key,
   :: nil ::
   [ nil | 
      -(#7:Key), 
      -(e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
      +(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
      +(seskey(a, b, n(s, #0:Fresh))), nil]  & 
   :: #0:Fresh,#1:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #0:Fresh)) ; t(s, #1:Fresh)))) | nil] ,    
   (#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg) !inI,
   (seskey(a, b, n(s, #0:Fresh)) ; #9:Msg) !inI,
   seskey(a, b, n(s, #0:Fresh)) !inI,
   e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg) inI,    
   -(#7:Key), 
   -(e(#7:Key, #8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg)), 
   +(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
   -(#8:Msg ; seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
   -(seskey(a, b, n(s, #0:Fresh)) ; #9:Msg), 
   +(seskey(a, b, n(s, #0:Fresh))),    
   nil )
|| 
nil)
(< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 1 . 2 . 8 > (
:: nil ::
[ nil | 
   +(#10:UName ; #8:UName), 
   -(e(mkey(#10:UName, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#10:UName, s)), 
   -(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(mkey(#10:UName, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#8:UName), 
   +(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: #6:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
e(mkey(#10:UName, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
mkey(#10:UName, s) inI,
(#0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
-(#0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#8:UName), 
+(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(mkey(#10:UName, s)), 
-(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(mkey(#10:UName, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(#10:UName ; #8:UName), 
-(e(mkey(#10:UName, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil)
< 1 . 4 . 5 . 2 . 7 . 6 . 7 . 5 . 3 . 6 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   -(#0:UName), 
   +(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
:: nil ::
[ nil, 
   +(i ; #0:UName) | 
   -(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
   +(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) !inI,
(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
seskey(a, b, n(s, #7:Fresh)) !inI,
(#1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)) inI
|| 
-(#1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#0:UName), 
+(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
-(e(mkey(i, s), #0:UName ; #1:Sessionkey ; #2:Nonce ; #3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg))), 
+(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#3:Msg ; #4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#4:Msg ; e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
-(#5:Key), 
-(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
+(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
-(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
+(seskey(a, b, n(s, #7:Fresh)))
|| 
ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
      +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
      +(seskey(a, b, n(s, #7:Fresh))), nil]  & 
   :: #7:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #7:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   (seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) !inI,
   seskey(a, b, n(s, #7:Fresh)) !inI,
   e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg) inI,    
   -(#5:Key), 
   -(e(#5:Key, #6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg)), 
   +(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(#6:Msg ; seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   -(seskey(a, b, n(s, #7:Fresh)) ; #8:Msg), 
   +(seskey(a, b, n(s, #7:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(10) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < 1 . 4 . 5 . 2 . 7 . 6 . 7 . 1 . 2 . 2 . 7 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   +(i ; #8:UName), 
   -(e(mkey(i, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
   +(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(mkey(i, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   -(#8:UName), 
   +(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
:: #6:Fresh,#9:Fresh ::
[ nil, 
   -(a ; b), 
   +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] )
|| 
mkey(i, s) !inI,
e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
e(mkey(i, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) !inI,
(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
seskey(a, b, n(s, #6:Fresh)) !inI,
(#0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)) inI
|| 
-(#0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#8:UName), 
+(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(#8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(mkey(i, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(i ; #8:UName), 
-(e(mkey(i, s), #8:UName ; #0:Sessionkey ; #1:Nonce ; #2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg))), 
+(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#2:Msg ; #3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#3:Msg ; e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
-(#4:Key), 
-(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
+(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
-(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
+(seskey(a, b, n(s, #6:Fresh)))
|| 
ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
      +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), nil]  & 
   :: nil ::
   [ nil | 
      -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
      +(seskey(a, b, n(s, #6:Fresh))), nil]  & 
   :: #6:Fresh,#9:Fresh ::
   [ nil, 
      -(a ; b), 
      +(e(mkey(a, s), b ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh) ; e(mkey(b, s), a ; seskey(a, b, n(s, #6:Fresh)) ; t(s, #9:Fresh)))) | nil] ,    
   (#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   (seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) !inI,
   seskey(a, b, n(s, #6:Fresh)) !inI,
   e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg) inI,    
   -(#4:Key), 
   -(e(#4:Key, #5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg)), 
   +(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(#5:Msg ; seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   -(seskey(a, b, n(s, #6:Fresh)) ; #7:Msg), 
   +(seskey(a, b, n(s, #6:Fresh))),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(11) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
Maude> Bye.
Wed Dec  5 10:32:01 CET 2012
Santiagos-MacBook-Pro:prototype-20121204 sescobar$ 
