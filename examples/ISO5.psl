spec ISO5 is
Theory
  types UName SName Name Key Nonce Masterkey Sessionkey .
  subtype Masterkey Sessionkey < Key .
  subtype SName UName < Name .
  subtype Name < Public .

  op n : Name Fresh -> Nonce  .
  ops a b i : -> UName [ctor] .
  op s : ->  SName [ctor]  . 
  op mkey : Name Name -> Masterkey [comm] .
  op seskey : Name Name Nonce -> Sessionkey .
  op e : Key Msg -> Msg .
  op d : Key Msg -> Msg .
  op _;_ : Msg Msg -> Msg [gather (e E)] .

  var K : Key .
  var Z : Msg .
  eq d(K, e(K, Z)) = Z .
  eq e(K, d(K, Z)) = Z . 

    
     /*
        A -> B : A,na
        B -> S : A,na,B,nb1
        S -> B : E(kbs:nb1,kab,A), E(kas:na,kab,B)
        B -> A : E(kas:na,kab,B),E(kab:nb,na)
        A -> B : E(kab:na,nb)
    */

Protocol
  vars ANAME BNAME AB AS BS : UName .
  var SNAME : SName .
  vars K : Key .
  vars SKA SKB : Sessionkey .
  vars r r' : Fresh .
  vars NAB NAS NBA NBS : Nonce .
  var MA : Msg .

  roles A B S .

  Def(A) = na := n(ANAME, r), kas := mkey(ANAME, s) .

  In(A)  = ANAME, BNAME, SNAME .

  Def(B) = nb := n(BNAME, r), nb1 := n(BNAME, r'), kbs := mkey(BNAME,s) .
  In(B)  = BNAME, SNAME .

  Def(S) = ksa := mkey(AS, s), ksb := mkey(BS, s), 
           kab := seskey(AS, BS, n(s,r)) .
  In(S) = SNAME .

  1 . A -> B : ANAME  ; na 
            |- AB     ; NAB .

  2 . B -> S : AB ; NAB ; BNAME  ; nb1 
            |- AS ; NAS ; BS     ; NBS .

  3 . S -> B : e(ksb, NBS ; kab  ; AS)  ; e(ksa, NAS ; kab ; BS)
            |- e(kbs, nb1 ; SKB  ; AB)     ; MA .

  4 . B -> A : MA                        ; e(SKB, nb  ; NAB) 
            |- e(kas, na ; SKA ; BNAME ) ; e(SKA, NBA ; na) .

  5 . A -> B : e(SKA, na  ; NBA)
            |- e(SKB, NAB ; nb) .

  Out(A) = na, NBA, SKA .
  Out(B) = NAB, nb, nb1, SKB .
  Out(S) = NAS, NBS, kab .

Intruder
   vars C D : Name .
   var K : Key .
   vars M N : Msg .
   var r : Fresh .

   => C, s, mkey(i, D), mkey(i, s) .
   K, M => d(K, M), e(K, M) .
   M, N <=> M ; N .

Attacks
  0 . 
       B executes protocol .
       Subst(B) = AB |-> a , BNAME |-> b, SNAME |-> s . 

  1 .
      B executes protocol .
      Subst(B) = AB |-> a , BNAME |-> b , SNAME |-> s .
      Intruder learns SKB .

   2 .
      B executes protocol .
      Subst(B) = AB |-> a , BNAME |-> b , SNAME |-> s .
       without:
           A executes protocol .
           Subst(A) = ANAME |-> a, BNAME |-> b , SNAME |-> s, NBA |-> n(b, r) .

ends
