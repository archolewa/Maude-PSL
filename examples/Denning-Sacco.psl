spec Danning-Sacco is
Theory
  types  UName SName Name Key Nonce Masterkey Sessionkey .
  subtype Masterkey Sessionkey < Key .
  subtype SName UName < Name .
  subtype Name < Public . 

  op n : Name Fresh -> Nonce .
  op t : Name Fresh -> Nonce . 
  ops a b i : -> UName [ctor] .
  op s : ->  SName [ctor] . 
  op mkey : Name Name -> Masterkey .
  op seskey : Name Name Nonce -> Sessionkey .
  op e : Key Msg -> Msg .
  op d : Key Msg -> Msg .
  op _;_ : Msg Msg -> Msg [gather (e E)] .

  var K : Key .
  var Z : Msg .
  eq d(K, e(K, Z)) = Z .
  eq e(K, d(K, Z)) = Z . 

    

Protocol
    vars ANAME BNAME AS BS AB : UName .
    var SNAME : SName .
    vars r r' : Fresh .
    vars TSA TSB : Nonce .
    var K : Key .
    vars SK SK1 SKA SKB : Sessionkey .
    vars M N X Y : Msg .

    roles A B S .

    In(A) = ANAME, BNAME, SNAME .
    In(B) = BNAME, SNAME .
    In(S) = SNAME .

    Def(A) = kas := mkey(ANAME, SNAME) .
    Def(B) = kbs := mkey(BNAME, SNAME) .
    Def(S) = kab := seskey(AS, BS, n(SNAME,r)), ts := t(SNAME, r'),
             ksa := mkey(AS, SNAME),           ksb := mkey(BS, SNAME) .


    1 . A -> S : ANAME ; BNAME |- AS ; BS .

    2 . S -> A : e(ksa, BS    ; kab ; ts  ; e(ksb, AS ; kab ; ts))
              |- e(kas, BNAME ; SKA ; TSA ; M) .

    3 . A -> B : M |- e(kbs, AB ; SKB ; TSB) .
              

    Out(A) = SKA, TSA .
    Out(B) = SKB, TSB .
    Out(S) = kab, ts  .

Intruder
    var D : Name .
    var r : Fresh .
    var K : Key .
    vars M N : Msg .

          => D, n(i, r), t(i, r) . 
          => mkey(i, D), mkey(D, i) .
    K, M  => d(K, M), e(K, M) .
    M, N <=> M ; N .

Attacks
  0 . 
       A executes protocol .
       Subst(A) = ANAME |-> a , BNAME |-> b, SNAME |-> s . 

  1 .
      A executes protocol .
      Subst(A) = ANAME |-> a , BNAME |-> b, SNAME |-> s . 
      Intruder learns SKA .

  2 .
      S executes protocol .
      Subst(S)  = AS |-> a, BS |-> b, SNAME |-> s .
      Intruder learns kab .
ends
