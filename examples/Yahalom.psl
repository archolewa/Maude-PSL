spec Yahalom is
Theory
  types  Uname Sname Name Key Nonce Masterkey Sessionkey .
  subtype Masterkey Sessionkey < Key .
  subtype Sname Uname < Name .
  subtype Name < Public .
  
  op n : Name Fresh -> Nonce .
  ops a b i : -> Uname [ctor] .
  op s : ->  Sname [ctor] . 
  op mkey : Name Name -> Masterkey .
  op seskey : Name Name Nonce -> Sessionkey .
  op e : Key Msg -> Msg .
  op d : Key Msg -> Msg .
  op _;_ : Msg Msg -> Msg [gather (e E)] .
 
  eq d(K:Key, e(K:Key, Z:Msg )) = Z:Msg .
  eq e(K:Key, d(K:Key, Z:Msg )) = Z:Msg . 

  
  /*
    A -> B : A,na
    B -> S : B,E(kbs:A,na,nb)
    S -> A : E(kas:B,kab,na,nb),E(kbs:A,kab)
    A -> B : E(kbs:A,kab),E(kab:nb)
   */

Protocol
    vars ANAME BNAME : Uname .
    var SNAME : Sname .
    vars NA NBA NAS NBS : Nonce . 
    var  r : Fresh .
    var M N MB : Msg .
    var SKA SKB : Sessionkey .
    var D : Name .
    var K : Key .

    roles A B S .

    In(A) = ANAME, BNAME, SNAME .
    In(B) = ANAME, BNAME, SNAME .
    In(S) = ANAME, BNAME, SNAME .

    Def(A) = na := n(ANAME, r), kas := mkey(ANAME,s) .

    Def(B) = nb := n(BNAME, r), kbs := mkey(BNAME,s) .

    Def(S) = kas := mkey(ANAME, s), kbs := mkey(BNAME, s), 
        kab := seskey(ANAME , BNAME , n(s,r)) .

    1 . A -> B :  ANAME ; na 
               |- ANAME ; NA .

    2 . B -> S :  BNAME ; e(kbs, ANAME ; NA  ; nb)
               |- BNAME ; e(kbs, ANAME ; NAS ; NBS) .

    3 . S -> A :  e(kas, BNAME ; kab  ; NAS ; NBS) ; e(kbs, ANAME ; kab)
               |- e(kas, BNAME ; SKA  ; na  ; NBA) ; MB .

    4 . A -> B :  MB                  ; e(SKA, NBA) 
               |- e(kbs, ANAME ; SKB) ; e(SKB, nb) .

    Out(A) = na, NBA, SKA .
    Out(B) = NA, nb, SKB .
    Out(S) = NA, NBS, kab .

Intruder
    vars C D : Name .
    var r : Fresh .
    var K : Key .
    vars M N : Msg .
          => D, n(i, r), mkey(i, C), mkey(C, i), mkey(i, s) .
   K, M   => d(K, M), e(K, M) .
   M ; N <=> M, N .

Attacks
  0 . 
       B executes protocol .
       Subst(B) = ANAME |-> a , BNAME |-> b, SNAME |-> s . 

  1 .
      B executes protocol .
      Subst(B) = ANAME |-> a , BNAME |-> b, SNAME |-> s  .
      Intruder learns SKB .

   2 .
       B executes protocol .
       Subst(B) = ANAME |-> a, BNAME |-> b, SNAME |-> s  .
       without:
           A executes protocol .
           Subst(A) = ANAME |-> a, BNAME |-> b, SNAME |-> s, NBA |-> n(b, r)  .
ends
