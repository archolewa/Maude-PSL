spec Yahalom is
Theory
  types  Uname Sname name Key Nonce Masterkey Sessionkey .
  subtype Masterkey Sessionkey < Key .
  subtype Sname Uname < name .
  subtype name < Public .
  
  op n : name Fresh -> Nonce .
  ops a b i : -> Uname [ctor] .
  op s : ->  Sname [ctor] . 
  op mkey : name name -> Masterkey .
  op seskey : name name Nonce -> Sessionkey .
  op e : Key Msg -> Msg .
  op d : Key Msg -> Msg .
  op _;_ : Msg Msg -> Msg [gather (e E)] .
 
  eq d(K:Key, e(K:Key, Z:Msg )) = Z:Msg .
  eq e(K:Key, d(K:Key, Z:Msg )) = Z:Msg . 

  
  /*
    A -> B : A,na
    B -> S : B,E(kbs:A,na,nb)
    S -> A : E(kas:B,kab,na,nb),E(kbs:A,kab)
    A -> B : E(kbs:A,kab),E(kab:nb)
   */

/*
Note: The variable scoping here makes no sense. Ostensibly, the SK in Protocol, and the SK in Attacks should be different values. However, they're meant to represent the same
value. So, it seems like we should allow global variable declarations. Of course, the way the code is currently structured, implementing that won't exactly be trivial.

*/
Protocol
    vars A B : Uname .
    var S : Sname .
    vars NA NB : Nonce . 
    var  r : Fresh .
    var M N MB : Msg .
    var SK : Sessionkey .
    var D : name .
    var K : Key .

    Def(A) = na := n(A, r), kas := mkey(A,s) .
    In(A) = A, B, S .

    Def(B) = nb := n(B, r), kbs := mkey(B,s) .
    In(B) = A, B, S .

    Def(S) = kas := mkey(A, s), kbs := mkey(B, s), kab := seskey(A , B , n(s,r)) .
    In(S) = A, B, S .

    1 . A -> B :  A ; na 
               |- A ; NA .

    2 . B -> S :  B ; e(kbs, A ; NA ; nb)
               |- B ; e(kbs, A ; NA ; NB) .

    3 . S -> A : e(kas, B ; kab ; NA ; NB) ; e(kbs, A ; kab)
              |- e(kas, B ; SK  ; na ; NB) ; MB .

    4 . A -> B : MB             ; e(SK, NB) 
              |- e(kbs, A ; SK) ; e(SK, nb) .

    Out(A) = na, NB, SK .
    Out(B) = NA, nb, SK .
    Out(S) = NA, NB, kab .

Intruder
   => D:Name, n(i, r:Fresh), mkey(i, A:Name), mkey(A:Name, i), mkey(i, s) .
   K:Key, M:Msg => d(K:Key, M:Msg), e(K:Key, M:Msg) .
   M:Msg ; N:Msg <=> M:Msg, N:Msg .

Attacks
  vars A B : UName .
  var S : SName .
  var SK : Sessionkey .

  0 . 
       In(B) = A |-> a , B |-> b, S |-> s . 
       B executes protocol .
       Out(B) = ditto .

  1 .
      In(B) = A |-> a , B |-> b, S |-> s  .
      B executes protocol .
      Intruder learns SK .
      Out(B) = ditto .

   2 .
       In(B) = A |-> a, B |-> b, S |-> s  .
       B executes protocol .
       Out(B) = ditto .
       without:
           In(A) = A |-> a, B |-> b, S |-> s  .
           A executes protocol .
           Out(A) = NB |-> n(b, r), ditto .

ends
