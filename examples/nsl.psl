spec NSL is

Theory
  sorts Name Nonce Key .
  subsort Name < Key .
  subsort Name < Public .

  ops pk sk : Key Msg -> Msg .

  op n : Name Fresh -> Nonce .
  
  ops a b i : -> Name . // Alice Bob Intruder

  op t : -> Msg .
  
  op _;_ : Msg Msg -> Msg [gather (e E)] .

  op h : Msg -> Key .

  var Z : Msg .
  var K : Key .
  
  // Encryption/Decryption Cancellation
  eq pk(K,sk(K,Z)) = Z .
  eq sk(K,pk(K,Z)) = Z .

Protocol
    vars AName BName A1Name : Name .
    vars r r1   : Fresh .
    vars NA1 NB : Nonce .

    roles A B .

    In(A) = AName, BName .
    In(B) = BName .

    1 . A -> B : pk(BName, n(AName, r) ; AName) |- 
                 pk(BName, NA1         ; A1Name) .

    2 . B -> A : pk(A1Name, NA1         ; n(BName, r1) ; BName) |-    
                 pk(AName , n(AName, r) ; NB           ; BName) . 

    3 . A -> B : pk(BName, NB) |- 
                 pk(BName, n(BName, r1)) .                    


    Out(A) = AName, BName, n(AName, r), NB, h(n(AName, r) ; NB) .
    Out(B) = A1Name, BName, NA1, n(BName, r1), h(NA1 ; n(BName, r1)) .

Intruder
    var C    : Name .
    var r2   : Fresh .
    vars X Y : Msg .
    var K    : Key .

          => C .
    X, Y <=> X ; Y .
    X     => sk(i, X) .
    X, K  =>  pk(K, X) . 

Attacks
    0 .
        B executes up to 2 .
        A executes protocol .
        Subst(A) = BName |-> b, AName |-> a .
        Subst(B) = BName |-> b, A1Name |-> a, NA1 |-> n(a, r) .
        Intruder learns n(BName, r1) .

ends
