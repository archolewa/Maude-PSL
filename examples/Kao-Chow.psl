spec Kao-Chow is
Theory
  types  UName SName Name Key Nonce Masterkey Sessionkey .
  subtype Masterkey Sessionkey < Key .
  subtype SName UName < Name .
  subtype Name < Public . 

  op n : Name Fresh -> Nonce  .
  op t : Name Fresh -> Nonce  . 
  ops a b i : -> UName [ctor] .
  op s : ->  SName [ctor] . 
  op mkey : Name Name -> Masterkey .
  op seskey : Name Name Nonce -> Sessionkey .
  op e : Key Msg -> Msg .
  op d : Key Msg -> Msg .
  op _;_ : Msg Msg -> Msg [gather (e E)] .
 
  eq d(K:Key, e(K:Key, Z:Msg)) = Z:Msg .
  eq e(K:Key, d(K:Key, Z:Msg)) = Z:Msg . 

   /*
    A -> S : A , B , na
    S -> B : E(kas:A,B,na,kab) , E(kbs:A,B,na,kab)
    B -> A : E(kas:A,B,na,kab) , E(kab:na) , nb
    A -> B : E(kab:nb)
   */
Protocol
    vars A B : UName .
    var S : SName .
    vars MA M N : Msg .
    vars r r1 r2 : Fresh .
    var NAB : Nonce .
    vars SKA SKB : Sessionkey .
    var NAS NBS : Nonce .
    var NBA : Nonce .

    Def(A) = na := n(A, r), kas := mkey(A, s) .
    In(A) = A, B, S .

    Def(B) = nb := n(A, r1), kbs := mkey(B, s) .
    In(B) = A, B, S .

    Def(S) = kas := mkey(A, s), kbs := mkey(B, s), kab := seskey(A,B,n(s,r2)) .
    In(S) = A, B, S .


    1 . A -> S :  A ; B ; na
               |- A ; B ; NAS  .

    2 . S -> B :  e(kas, A ; B ; NAS ; kab) ; e(kbs, A ; B ; NAS ; kab)
               |- MA                        ; e(kbs, A ; B ; NAB ; SKB) .

    3 . B -> A :  MA                       ; e(SKB, NAB)  ; nb
               |- e(kas, A ; B ; na ; SKA) ; e(SKA, na)   ; NBA .

    4 . A -> B :  e(SKA, NBA) 
               |- e(SKB, nb) .

    Out(A) = na, NBA, SKA .
    Out(B) = NAB, nb, SKB .
    Out(S) = NAS, NBS, kab .


Intruder
    var D : Name .
    var r : Fresh .
    var K : Key .
    vars M N : Msg .

    => D, n(i, r), mkey(i, D), mkey(D, i) .
    K, M => d(K, M), e(K, M) .
    M ; N <=> M, N .

Attacks
    vars A B : UName .
    var S : SName .
    var SK : Sessionkey .
    var NBA : Nonce .
    var r : Fresh .

    0 . 
       In(B) = A |-> a, B |-> b, S |-> s . 
       B executes protocol .
       Out(B) = ditto .

    1 .
      In(B) = A |-> a, B |-> b, S |-> s . 
      B executes protocol .
      Intruder learns SK .
      Out(B) = ditto .

    2 .
      In(B) = A |-> a, B |-> b, S |-> s . 
      B executes protocol .
      Out(B) = ditto .
       without:
           In(A) = A |-> a, B |-> b, S |-> s .
           A executes protocol .
           Out(A) = NBA |-> n(b, r), ditto .

ends
