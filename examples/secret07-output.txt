Santiago:prototype-20111114 santiago$ examples/secret07-command 
Sun Nov 13 23:16:20 CET 2011
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.6 built: Dec 10 2010 11:12:39
	    Copyright 1997-2010 SRI International
		   Sun Nov 13 23:16:20 2011
Maude> 
	    Maude-NPA Version: 11/14/2011
	    Copyright (c) 2011, University of Illinois
	    All rights reserved.

==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 667484 in 3886ms cpu (4235ms real) (171754 rewrites/second)
result GrammarList: (
grl #0:NeNonceSet notInI, (#0:NeNonceSet notLeq n(i, #1:Fresh)), #0:NeNonceSet notLeq #2:NeNonceSet * #3:NeNonceSet => (#4:NeNonceSet * #0:NeNonceSet) inL . ; 
grl (#1:NeNonceSet * #0:NeNonceSet) notInI, (#0:NeNonceSet notLeq n(i, #2:Fresh)), (#1:NeNonceSet * #0:NeNonceSet) notLeq #3:NeNonceSet * #4:NeNonceSet => #0:NeNonceSet inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL .,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL .,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL .} usingGrammar 
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL .)
| 
grl #50:GenvExp notInI => exp(#50:GenvExp, #60:NeNonceSet) inL .
| 
grl #0:NeNonceSet notInI, (#0:NeNonceSet notLeq n(a, #1:Fresh)), (#0:NeNonceSet notLeq n(b, #2:Fresh)), #0:NeNonceSet notLeq #3:NeNonceSet * #4:NeNonceSet => exp(#5:GenvExp, #0:NeNonceSet) inL .
| (errorNoHeuristicApplied {
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL .,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL .,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL .} usingGrammar 
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL .)
| 
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 2595 in 83ms cpu (88ms real) (31121 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, r:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, NS:NeNonceSet)) | nil] 
|| 
exp(g, NS:NeNonceSet * n(a, r:Fresh)) inI
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(0) .
rewrites: 34 in 0ms cpu (0ms real) (34000000 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 536485 in 3054ms cpu (3251ms real) (175622 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 1666100 in 8259ms cpu (8746ms real) (201722 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 54592 in 194ms cpu (205ms real) (281402 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 56084 in 190ms cpu (204ms real) (295023 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, r:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, NS:NeNonceSet)) | nil] 
|| 
exp(g, NS:NeNonceSet * n(a, r:Fresh)) inI
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystemSet: (< 1 . 1 > (
:: nil ::
[ nil | 
   -(g), 
   -(#0:NeNonceSet), 
   +(exp(g, #0:NeNonceSet)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #1:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #0:NeNonceSet)), nil] )
|| 
exp(g, #0:NeNonceSet) !inI,
exp(g, #0:NeNonceSet * n(a, #1:Fresh)) inI
|| 
-(g), 
-(#0:NeNonceSet), 
+(exp(g, #0:NeNonceSet)), 
-(b), 
-(a), 
-(exp(g, #0:NeNonceSet))
|| 
ghost( #0:NeNonceSet,
   :: nil ::
   [ nil | 
      -(g), 
      -(#0:NeNonceSet), 
      +(exp(g, #0:NeNonceSet)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(a), 
      +(b), 
      +(exp(g, n(a, #1:Fresh))) | 
      -(b), 
      -(a), 
      -(exp(g, #0:NeNonceSet)), nil] ,    
   exp(g, #0:NeNonceSet) !inI,
   exp(g, #0:NeNonceSet * n(a, #1:Fresh)) inI,    
   -(g), 
   -(#0:NeNonceSet), 
   +(exp(g, #0:NeNonceSet)), 
   -(b), 
   -(a), 
   -(exp(g, #0:NeNonceSet)),    
   nil )
|| 
nil)
(< 1 . 2 > (
:: nil ::
[ nil | 
   -(g), 
   -(#0:NeNonceSet * n(a, #1:Fresh)), 
   +(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #1:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #0:NeNonceSet)), nil] )
|| 
exp(g, #0:NeNonceSet * n(a, #1:Fresh)) !inI,
(#0:NeNonceSet * n(a, #1:Fresh)) inI
|| 
-(g), 
-(#0:NeNonceSet * n(a, #1:Fresh)), 
+(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
-(b), 
-(a), 
-(exp(g, #0:NeNonceSet))
|| 
ghost( exp(g, #0:NeNonceSet),
   :: nil ::
   [ nil | 
      -(g), 
      -(#0:NeNonceSet * n(a, #1:Fresh)), 
      +(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(a), 
      +(b), 
      +(exp(g, n(a, #1:Fresh))) | 
      -(b), 
      -(a), 
      -(exp(g, #0:NeNonceSet)), nil] ,    
   exp(g, #0:NeNonceSet * n(a, #1:Fresh)) !inI,
   (#0:NeNonceSet * n(a, #1:Fresh)) inI,    
   -(g), 
   -(#0:NeNonceSet * n(a, #1:Fresh)), 
   +(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #0:NeNonceSet)),    
   nil )
|| 
nil)
(< 1 . 5 > (
:: nil ::
[ nil | 
   -(exp(g, #0:NeNonceSet)), 
   -(#1:NeNonceSet * n(a, #2:Fresh)), 
   +(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #2:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet * #0:NeNonceSet)), nil] )
|| 
exp(g, #0:NeNonceSet) !inI,
exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)) !inI,
(#1:NeNonceSet * n(a, #2:Fresh)) inI
|| 
generatedByIntruder(exp(g, #0:NeNonceSet)), 
-(exp(g, #0:NeNonceSet)), 
-(#1:NeNonceSet * n(a, #2:Fresh)), 
+(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet * #0:NeNonceSet))
|| 
ghost( exp(g, #1:NeNonceSet * #0:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(g, #0:NeNonceSet)), 
      -(#1:NeNonceSet * n(a, #2:Fresh)), 
      +(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      +(a), 
      +(b), 
      +(exp(g, n(a, #2:Fresh))) | 
      -(b), 
      -(a), 
      -(exp(g, #1:NeNonceSet * #0:NeNonceSet)), nil] ,    
   exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)) !inI,
   (#1:NeNonceSet * n(a, #2:Fresh)) inI,    
   -(exp(g, #0:NeNonceSet)), 
   -(#1:NeNonceSet * n(a, #2:Fresh)), 
   +(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet * #0:NeNonceSet)),    
   nil )
|| 
nil)
(< 1 . 6 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #0:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
|| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) inI
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
|| 
nil
|| 
nil)
< 1 . 7 > (
:: nil ::
[ nil | 
   -(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #1:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #2:NeNonceSet * #0:NeNonceSet)), nil] )
|| 
#2:NeNonceSet !inI,
exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(g, #0:NeNonceSet * n(a, #1:Fresh)) inI,
inst(#2:NeNonceSet)
|| 
generatedByIntruder(#2:NeNonceSet), 
-(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh))), 
-(b), 
-(a), 
-(exp(g, #2:NeNonceSet * #0:NeNonceSet))
|| 
ghost( exp(g, #2:NeNonceSet * #0:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      +(a), 
      +(b), 
      +(exp(g, n(a, #1:Fresh))) | 
      -(b), 
      -(a), 
      -(exp(g, #2:NeNonceSet * #0:NeNonceSet)), nil] ,    
   exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh)) !inI,
   exp(g, #0:NeNonceSet * n(a, #1:Fresh)) inI,
   inst(#2:NeNonceSet),    
   -(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #2:NeNonceSet * #0:NeNonceSet)),    
   nil )
|| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystem: < 1 . 6 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a), 
   +(b) | 
   +(exp(g, n(a, #0:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
|| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI
|| 
+(exp(g, n(a, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 18 in 0ms cpu (0ms real) (18000000 rewrites/second)
result IdSystem: < 1 . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a) | 
   +(b), 
   +(exp(g, n(a, #0:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
|| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI
|| 
+(b), 
+(exp(g, n(a, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 18 in 0ms cpu (0ms real) (9000000 rewrites/second)
result IdSystem: < 1 . 6 . 1 . 1 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(a), 
   +(b), 
   +(exp(g, n(a, #0:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
|| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI
|| 
+(a), 
+(b), 
+(exp(g, n(a, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
|| 
nil
|| 
nil
Maude> Bye.
Sun Nov 13 23:16:39 CET 2011
Santiago:prototype-20111114 santiago$ 
