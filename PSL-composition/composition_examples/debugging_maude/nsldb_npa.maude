
fmod PROTOCOL-EXAMPLE-SYMBOLS is protecting DEFINITION-PROTOCOL-RULES . --- -1
    sorts Name Nonce Key .
    subsort Name < Key .
    subsort Name < Public .

    ops pk sk : Key Msg -> Msg [frozen] .

    op n : Name Fresh -> Nonce [frozen] .

    ops a b i : -> Name . --- Alice Bob Intruder

    op _;_ : Msg Msg -> Msg [frozen gather (e E)] .

    op h : Msg -> Key [frozen] .

    var Z : Msg .
    var K : Key .

    op 0 : -> Msg .
    op n : Name Fresh -> Nonce [frozen] .

    op _*_ : Msg Msg -> Msg [assoc comm frozen] .

    ---------------Automatically generated and added by Python------------
    subsorts Name Nonce Key < Msg .
    ops NSL-init NSL-resp : -> Role .

    ops DB-init DB-resp : -> Role .

    ---Used for building the message for the synchronization message.
    ---op _$;_ : Msg Msg -> Msg [gather(E e) frozen] .
    ----------End Automatically generated and added by Python-------------------

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is protecting PROTOCOL-EXAMPLE-SYMBOLS .

    var Z : Msg .
    var K : Key .

    ---Encryption/Decryption Cancellation
    eq pk(K,sk(K,Z)) = Z [variant] .
    eq sk(K,pk(K,Z)) = Z [variant] .

    vars X Y : Msg .
    eq X * X = 0 [variant] .
    eq X * 0 = X [variant] .
    eq X * X * Y = Y [variant] .

endfm

fmod PROTOCOL-SPECIFICATION is 
    protecting PROTOCOL-EXAMPLE-SYMBOLS .  protecting DEFINITION-PROTOCOL-RULES .
    protecting DEFINITION-CONSTRAINTS-INPUT .

vars A B A1 : Name .
vars NA1 NB : Nonce .
var C    : Name .
vars X Y : Msg .
var K    : Key .
var NA : Nonce .
var NO : Nonce .

eq STRANDS-DOLEVYAO = 
:: nil ::
[ nil | 
   +(C), nil]  & 
:: nil ::
[ nil | 
   -(X), 
   +(sk(i, X)), nil]  & 
:: nil ::
[ nil | 
   -(X), 
   -(K), 
   +(pk(K, X)), nil]  & 
:: nil ::
[ nil | 
   -(Y), 
   -(X), 
   +(X ; Y), nil]  & 
:: nil ::
[ nil | 
   -(Y), 
   -(X), 
   +(X * Y), nil]  & 
:: nil ::
[ nil | 
   -(X ; Y), 
   +(X), nil]  & 
:: nil ::
[ nil | 
   -(X ; Y), 
   +(Y), nil]  & 
:: r:Fresh ::
[ nil | 
   +(n(i, r:Fresh)), nil] [nonexec] .

vars r r' : Fresh .
var N : Nonce .
eq STRANDS-PROTOCOL = 
    :: r ::  [nil | +(pk(B, n(A, r) ; A)),
                    -(pk(A, n(A, r) ; NB ; B)),
                    +(pk(B, NB)),
                    {NSL-init -> DB-resp ;; 1-1 ;; A ; B ; n(A, r)}, nil] &
    :: r ::  [nil | -(pk(B, NA ; A)),
                    +(pk(A, NA ; n(B, r) ; B)),
                    -(pk(B, n(B,r))), 
                    {NSL-resp -> DB-init ;; 1-1 ;; A ; B ; NA}, nil] &
    :: r' :: [nil | {NSL-resp -> DB-init ;; 1-1 ;; A ; B ; NA},
                    +(n(B, r')),
                    -(NA * n(B, r')), nil] &
    :: nil :: [nil | {NSL-init -> DB-resp ;; 1-1 ;; A ; B ; NA },
                     -(N),
                     +(NA * N), nil] [nonexec] .

var NC : Nonce .
var D : Name .
eq ATTACK-STATE(0) = 
    :: r :: 
    [nil, +(pk(C, n(a, r) ; a)) |
          -(pk(a, n(a, r) ; NC ; C)),
          +(pk(C, NC)),
          {NSL-init -> DB-resp ;; 1-1 ;; a ; C ; n(a, r)}, nil] &
    :: r' ::
    [nil, {NSL-resp -> DB-init ;; 1-1 ;; D ; b ; n(a, r)},
          +(n(b, r')), -(n(a, r) * n(b, r')) | nil]
    || (a != D), (C != b)
    || nil
    || nil
    || nil
    [nonexec] .

eq ATTACK-STATE(1) = 
    :: r :: 
    [nil, +(pk(b, n(a, r) ; a)),
          -(pk(a, n(a, r) ; NC ; b)),
          +(pk(b, NC)),
          {NSL-init -> DB-resp ;; 1-1 ;; a ; b ; n(a, r)} | nil] &
    :: r' ::
    [nil, {NSL-resp -> DB-init ;; 1-1 ;; a ; b ; n(a, r)},
          +(n(b, r')), -(n(a, r) * n(b, r')) | nil]
    || empty
    || nil
    || nil
    || nil
    [nonexec] .
endfm

select MAUDE-NPA .

red genGrammars .
---red run(1, unbounded) .
---red run(0, 13) .
