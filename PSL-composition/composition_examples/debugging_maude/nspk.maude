fmod PROTOCOL-EXAMPLE-SYMBOLS is protecting DEFINITION-PROTOCOL-RULES . --- -1
sorts Name Nonce Enc . --- 24
subsorts Name < Public . --- 25
op pk : Name Msg -> Enc [frozen] . --- 26
op sk : Name Msg -> Enc [frozen] . --- 27
op n : Name Fresh -> Nonce [frozen] . --- 28
op _;_ : Msg Msg -> Msg [ctor gather ( e E )  frozen ] . --- 29
op _$;_ : Msg Msg -> Msg [ctor gather(e E) frozen] .
ops a b c i : -> Name [ctor] . --- 30
subsort Name < Msg . --- -1
subsort Nonce < Msg . --- -1
subsort Enc < Msg . --- -1
endfm --- -1

---(
fmod PROTOCOL-EXAMPLE-ALGEBRAIC is protecting PROTOCOL-EXAMPLE-SYMBOLS . --- -1
var X : Name . --- 31
var Z : Msg . --- 32
eq pk ( X , sk ( X , Z ) ) = Z [variant] . --- 33
eq sk ( X , pk ( X , Z ) ) = Z [variant] . --- 34
endfm --- -1
fmod PROTOCOL-SPECIFICATION is protecting PROTOCOL-EXAMPLE-SYMBOLS .
protecting DEFINITION-PROTOCOL-RULES .
protecting DEFINITION-CONSTRAINTS-INPUT .
eq STRANDS-DOLEVYAO =
:: nil ::
[ nil |
-(X:Msg),
+(pk(A:Name, X:Msg)), nil]  &
:: nil ::
[ nil |
-(X:Msg),
+(sk(i, X:Msg)), nil]  &
:: nil ::
[ nil |
-(Y:Msg),
-(X:Msg),
+(X:Msg ; Y:Msg), nil]  &
:: nil ::
[ nil |
-(X:Msg ; Y:Msg),
+(X:Msg), nil]  &
:: nil ::
[ nil |
-(X:Msg ; Y:Msg),
+(Y:Msg), nil]  &
:: r1:Fresh ::
[ nil |
+(n(i, r1:Fresh)), nil] [nonexec].
eq STRANDS-PROTOCOL =
:: r1:Fresh ::
[ nil,
+(pk(B:Name, A:Name ; n(A:Name, r1:Fresh))),
-(pk(A:Name, n(A:Name, r1:Fresh) ; N2:Nonce)),
+(pk(B:Name, N2:Nonce)) | nil]  &
:: r2:Fresh ::
[ nil,
-(pk(B:Name, A:Name ; N1:Nonce)),
+(pk(A:Name, N1:Nonce ; n(B:Name, r2:Fresh))),
-(pk(B:Name, n(B:Name, r2:Fresh))) | nil] [nonexec].
eq ATTACK-STATE(0)=
:: r2:Fresh ::
[ nil,
-(pk(b, a ; N1:Nonce)),
+(pk(a, N1:Nonce ; n(b, r2:Fresh))),
-(pk(b, n(b, r2:Fresh))) | nil]
||
n(b, r2:Fresh) inI
||
nil
||
nil
||
nil[nonexec].
eq ATTACK-STATE(1)=
:: r2:Fresh ::
[ nil,
-(pk(b, a ; N1:Nonce)),
+(pk(a, N1:Nonce ; n(b, r2:Fresh))),
-(pk(b, n(b, r2:Fresh))) | nil]
||
n(b, r2:Fresh) inI
||
nil
||
nil
|| never(
:: r1:Fresh ::
[ nil,
+(pk(b, a ; n(a, r1:Fresh))),
-(pk(a, n(a, r1:Fresh) ; N2:Nonce)),
+(pk(b, N2:Nonce)) | nil]  || empty)[nonexec].
endfm

select MAUDE-NPA .
red genGrammars .
red run(0, unbounded) .
red run(1, unbounded) .
q
---)
